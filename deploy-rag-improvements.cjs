// –§–∏–Ω–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è —É–ª—É—á—à–µ–Ω–∏–π RAG
const { createClient } = require('@supabase/supabase-js');
const { spawn } = require('child_process');

require('dotenv').config();

const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
);

async function deployRAGImprovements() {
  console.log('üöÄ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–∏–π RAG —Å–∏—Å—Ç–µ–º—ã...\n');

  try {
    // –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase
    console.log('üîå –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase...');
    const { data, error } = await supabase.from('kb_chunks').select('count').limit(1);
    
    if (error) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase: ${error.message}`);
    }
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase —É—Å–ø–µ—à–Ω–æ');

    // –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π
    console.log('\nüì¶ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è PostgreSQL...');
    const extensions = ['vector', 'pg_trgm', 'unaccent'];
    
    for (const ext of extensions) {
      try {
        const { data: extData, error: extError } = await supabase
          .rpc('exec_sql', { 
            sql: `SELECT 1 FROM pg_extension WHERE extname = '${ext}';` 
          });
        
        if (extError) {
          console.log(`‚ö†Ô∏è –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ ${ext}: ${extError.message}`);
        } else {
          console.log(`‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ ${ext} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ`);
        }
      } catch (e) {
        console.log(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å ${ext}: ${e.message}`);
      }
    }

    // –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–æ–Ω–∫–∏
    console.log('\nüìä –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–æ–Ω–∫–∏ –≤ kb_chunks...');
    const { data: columns, error: colError } = await supabase
      .rpc('exec_sql', { 
        sql: `SELECT column_name FROM information_schema.columns WHERE table_name = 'kb_chunks' AND column_name IN ('embedding_vec', 'content_tsv');` 
      });
    
    if (colError) {
      console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–ª–æ–Ω–æ–∫: ${colError.message}`);
    } else {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${columns?.length || 0} –Ω–æ–≤—ã—Ö –∫–æ–ª–æ–Ω–æ–∫`);
    }

    // –®–∞–≥ 4: –ü—Ä–æ–≤–µ—Ä—è–µ–º RPC —Ñ—É–Ω–∫—Ü–∏—é
    console.log('\nüîß –ü—Ä–æ–≤–µ—Ä—è–µ–º RPC —Ñ—É–Ω–∫—Ü–∏—é rag_hybrid_search...');
    try {
      const { data: rpcData, error: rpcError } = await supabase
        .rpc('rag_hybrid_search', {
          q_vec: Array(1536).fill(0.1), // –¢–µ—Å—Ç–æ–≤—ã–π –≤–µ–∫—Ç–æ—Ä
          q_text: 'test',
          k: 1,
          min_sim: 0.1
        });
      
      if (rpcError) {
        console.log(`‚ö†Ô∏è RPC —Ñ—É–Ω–∫—Ü–∏—è: ${rpcError.message}`);
      } else {
        console.log(`‚úÖ RPC —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–∞–π–¥–µ–Ω–æ ${rpcData?.length || 0} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤`);
      }
    } catch (e) {
      console.log(`‚ö†Ô∏è RPC —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: ${e.message}`);
    }

    // –®–∞–≥ 5: –ú–∏–≥—Ä–∏—Ä—É–µ–º embeddings
    console.log('\nüîÑ –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é embeddings...');
    const migrateProcess = spawn('node', ['migrations/migrate_embeddings_simple.cjs'], {
      stdio: 'inherit',
      cwd: process.cwd()
    });

    migrateProcess.on('close', (code) => {
      if (code === 0) {
        console.log('\n‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è embeddings –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
        
        // –®–∞–≥ 6: –¢–µ—Å—Ç–∏—Ä—É–µ–º —É–ª—É—á—à–µ–Ω–∏—è
        console.log('\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —É–ª—É—á—à–µ–Ω–∏—è RAG...');
        const testProcess = spawn('node', ['test-rag-improvements.cjs'], {
          stdio: 'inherit',
          cwd: process.cwd()
        });

        testProcess.on('close', (testCode) => {
          if (testCode === 0) {
            console.log('\nüéâ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
            console.log('\nüìä –ß—Ç–æ –±—ã–ª–æ —Å–¥–µ–ª–∞–Ω–æ:');
            console.log('  ‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω—ã —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è pgvector, pg_trgm, unaccent');
            console.log('  ‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ embedding_vec –¥–ª—è –≤–µ–∫—Ç–æ—Ä–æ–≤');
            console.log('  ‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ content_tsv –¥–ª—è –ø–æ–ª–Ω–æ—Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞');
            console.log('  ‚úÖ –°–æ–∑–¥–∞–Ω—ã –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞');
            console.log('  ‚úÖ –°–æ–∑–¥–∞–Ω–∞ RPC —Ñ—É–Ω–∫—Ü–∏—è rag_hybrid_search');
            console.log('  ‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω RLS –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏');
            console.log('  ‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ rag_logs –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏');
            console.log('  ‚úÖ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã embeddings –≤ pgvector —Ñ–æ—Ä–º–∞—Ç');
            console.log('\nüöÄ RAG —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!');
            console.log('\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
            console.log('  1. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–∏—Å—ã –Ω–∞ VM: docker-compose restart');
            console.log('  2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: docker-compose logs -f');
            console.log('  3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –±–æ—Ç–∞ –≤ Telegram');
          } else {
            console.error(`‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: –∫–æ–¥ ${testCode}`);
          }
        });

      } else {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ embeddings: –∫–æ–¥ ${code}`);
      }
    });

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è:', error.message);
  }
}

deployRAGImprovements().catch(console.error);
