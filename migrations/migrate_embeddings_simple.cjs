// –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è embeddings –±–µ–∑ –ø—Ä–æ–∫—Å–∏
const { createClient } = require('@supabase/supabase-js');

require('dotenv').config();

const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
);

async function migrateEmbeddings() {
  console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é embeddings...\n');

  try {
    // 1. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —á–∞–Ω–∫–∏ —Å JSON embeddings
    console.log('üìä –ü–æ–ª—É—á–∞–µ–º —á–∞–Ω–∫–∏ —Å JSON embeddings...');
    const { data: chunks, error: fetchError } = await supabase
      .from('kb_chunks')
      .select('*') // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ–ª–æ–Ω–∫–∏
      .not('embedding', 'is', null)
      .not('article_id', 'is', null) // –ò—Å–∫–ª—é—á–∞–µ–º –∑–∞–ø–∏—Å–∏ –±–µ–∑ article_id
      .not('chunk_index', 'is', null) // –ò—Å–∫–ª—é—á–∞–µ–º –∑–∞–ø–∏—Å–∏ –±–µ–∑ chunk_index
      .is('embedding_vec', null); // –¢–æ–ª—å–∫–æ —Ç–µ, —É –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç vector

    if (fetchError) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —á–∞–Ω–∫–æ–≤: ${fetchError.message}`);
    }

    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${chunks.length} —á–∞–Ω–∫–æ–≤ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏`);

    if (chunks.length === 0) {
      console.log('‚úÖ –í—Å–µ embeddings —É–∂–µ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã');
      return;
    }

    // 2. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–∞—Ç—á–∞–º–∏ –ø–æ 50
    const batchSize = 50;
    let processed = 0;

    for (let i = 0; i < chunks.length; i += batchSize) {
      const batch = chunks.slice(i, i + batchSize);
      console.log(`\nüì¶ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–∞—Ç—á ${Math.floor(i/batchSize) + 1}/${Math.ceil(chunks.length/batchSize)}`);

      const updates = [];

      for (const chunk of batch) {
        try {
          // –ü–∞—Ä—Å–∏–º JSON embedding
          let embedding;
          if (typeof chunk.embedding === 'string') {
            embedding = JSON.parse(chunk.embedding);
          } else {
            embedding = chunk.embedding;
          }

          if (!Array.isArray(embedding) || embedding.length !== 1536) {
            console.warn(`‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç embedding –¥–ª—è —á–∞–Ω–∫–∞ ${chunk.id}`);
            continue;
          }

          // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤–µ–∫—Ç–æ—Ä (L2 normalization)
          const norm = Math.sqrt(embedding.reduce((sum, val) => sum + val * val, 0)) || 1;
          const normalizedEmbedding = embedding.map(val => val / norm);

          updates.push({
            id: chunk.id,
            embedding_vec: `[${normalizedEmbedding.join(',')}]`
          });

        } catch (error) {
          console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–∞–Ω–∫–∞ ${chunk.id}: ${error.message}`);
        }
      }

      // 3. –û–±–Ω–æ–≤–ª—è–µ–º –±–∞—Ç—á –≤ Supabase
      if (updates.length > 0) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ –æ–¥–Ω–æ–º—É –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        let batchProcessed = 0;
        for (const update of updates) {
          const { error: updateError } = await supabase
            .from('kb_chunks')
            .update({ embedding_vec: update.embedding_vec })
            .eq('id', update.id);

          if (updateError) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á–∞–Ω–∫–∞ ${update.id}: ${updateError.message}`);
          } else {
            batchProcessed++;
          }
        }
        
        processed += batchProcessed;
        console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ ${batchProcessed} —á–∞–Ω–∫–æ–≤ –∏–∑ ${updates.length}`);
      }

      // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏
      await new Promise(resolve => setTimeout(resolve, 200));
    }

    console.log(`\nüéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${processed} —á–∞–Ω–∫–æ–≤`);

    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const { data: checkData, error: checkError } = await supabase
      .from('kb_chunks')
      .select('id')
      .not('embedding_vec', 'is', null)
      .limit(1);

    if (checkError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏:', checkError.message);
    } else {
      console.log('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ - vector embeddings —Å–æ–∑–¥–∞–Ω—ã');
    }

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
migrateEmbeddings().catch(console.error);
