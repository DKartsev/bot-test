version: '3.8'

services:
  # База данных PostgreSQL
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: bot_support
      POSTGRES_USER: bot_user
      POSTGRES_PASSWORD: bot_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./supabase/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - bot-network

  # Redis для кэширования
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - bot-network

  # Backend сервис (финальный)
  bot-backend:
    build:
      context: .
      dockerfile: Dockerfile.backend.final
      target: development
      args:
        NODE_ENV: development
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - PORT=3000
      - DATABASE_URL=postgresql://bot_user:bot_password@postgres:5432/bot_support
      - REDIS_URL=redis://redis:6379
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
    env_file:
      - .env
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    networks:
      - bot-network
    volumes:
      - ./packages/backend:/app/packages/backend
      - ./packages/shared:/app/packages/shared
      - ./node_modules:/app/node_modules
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Admin панель (рабочая)
  bot-admin:
    build:
      context: .
      dockerfile: Dockerfile.admin.working
      args:
        NODE_ENV: development
    ports:
      - "3001:3000"
    environment:
      - NODE_ENV=development
      - PORT=3000
      - BACKEND_URL=http://bot-backend:3000
    env_file:
      - .env
    depends_on:
      - bot-backend
    restart: unless-stopped
    networks:
      - bot-network
    volumes:
      - ./packages/operator-admin:/app/packages/operator-admin
      - ./packages/shared:/app/packages/shared
      - ./node_modules:/app/node_modules
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

networks:
  bot-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
