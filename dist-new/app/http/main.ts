import Fastify from 'fastify';
import rateLimit from '@fastify/rate-limit';
import multipart from '@fastify/multipart';
import { Telegraf } from 'telegraf';
import { message } from 'telegraf/filters';
import { type Update } from 'telegraf/types';
import { logger } from '../utils/logger.js';
import pgPlugin from '../plugins/pg.js';
import { ragAnswer } from '../app/pipeline/ragAnswer.js';

// –õ–æ–∫–∞–ª—å–Ω—ã–µ —Ä–æ—É—Ç—ã/–ø–ª–∞–≥–∏–Ω—ã (NodeNext/ESM ‚Üí —É–∫–∞–∑—ã–≤–∞–µ–º .js)
import routes from './routes/index.js';
import adminTelegram from './routes/admin/telegram.js';
import adminConversations from './routes/admin/conversations.js';
import adminMetrics from './routes/admin/metrics.js';
import adminFAQ from './routes/admin/faq.js';
import adminUsers from './routes/admin/users.js';
import adminCategories from './routes/admin/categories.js';
import adminNotes from './routes/admin/notes.js';
import adminStream from './routes/admin/stream.js';
import adminPlugin from './plugins/admin.js';

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ Fastify-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
 * Health-—Ä–æ—É—Ç—ã: GET/HEAD "/"
 * Telegram webhook: POST ${TG_WEBHOOK_PATH}/:token?  (—Å–µ–∫—Ä–µ—Ç –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ x-telegram-bot-api-secret-token –ò–õ–ò –≤ :token)
 * –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ö–æ–¥—è—â–∏—Ö –∞–ø–¥–µ–π—Ç–æ–≤ –∏ –æ—Ç–ª–æ–≤ –æ—à–∏–±–æ–∫ Telegraf.
 */
export async function createApp(): Promise<FastifyInstance> {
  const app = Fastify({
    logger: {
      level: process.env.LOG_LEVEL ?? 'info',
    },
    trustProxy: true,
  });

  await app.register(rateLimit, { global: false });
  await app.register(pgPlugin);
  await app.register(multipart);

  // -------- Health --------
  app.head('/', (_req: unknown, reply: { code: (s: number) => { send: () => void } }) => reply.code(200).send());
  app.get('/', () => ({
    status: 'ok',
    service: 'bot-test-backend',
    time: new Date().toISOString(),
  }));

  // -------- Health Check –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ --------
  app.get('/health', async (_request: unknown, reply: { code: (s: number) => { send: (body: unknown) => void } }) => {
    const health = {
      status: 'ok',
      timestamp: new Date().toISOString(),
      uptime: process.uptime(),
      memory: process.memoryUsage(),
      checks: {} as Record<string, string>,
    };

    // Check database connection
    if (app.pg) {
      try {
        await app.pg.query('SELECT 1');
        health.checks.database = 'ok';
      } catch (err) {
        health.checks.database = 'error';
        health.status = 'error';
      }
    } else {
      health.checks.database = 'skipped';
    }

    const statusCode = health.status === 'ok' ? 200 : 503;
    return reply.code(statusCode).send(health);
  });

  // -------- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —Ä–æ—É—Ç–æ–≤ --------
  await app.register(routes);
  await app.register(adminPlugin, { prefix: '/api' });
  await app.register(adminTelegram);
  await app.register(adminConversations);
  await app.register(adminMetrics);
  await app.register(adminFAQ);
  await app.register(adminUsers);
  await app.register(adminCategories);
  await app.register(adminNotes);
  await app.register(adminStream);

  // -------- CORS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è operator-admin --------
  void app.addHook('onRequest', async (request: { method: string }, reply: { header: (k: string, v: string) => void; send: () => void }) => {
    // –†–∞–∑—Ä–µ—à–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã –æ—Ç operator-admin
    reply.header('Access-Control-Allow-Origin', 'https://bot-test-operator-admin.onrender.com');
    reply.header('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');
    reply.header('Access-Control-Allow-Headers', 'Content-Type, Authorization');

    if (request.method === 'OPTIONS') {
      return reply.send();
    }
  });

  app.log.info('üöÄ Backend API –≥–æ—Ç–æ–≤ –∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –ø–∞–Ω–µ–ª—å—é –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤');

  // -------- Telegram / Webhook --------
  const TG_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
  const TG_PATH = process.env.TG_WEBHOOK_PATH || '/webhooks/telegram';
  const TG_SECRET = process.env.TG_WEBHOOK_SECRET || '';

  if (!TG_TOKEN) {
    app.log.warn(
      '‚ö†Ô∏è TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ‚Äî –º–∞—Ä—à—Ä—É—Ç Telegram webhook –ù–ï –±—É–¥–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω',
    );
    return app;
  }

  const bot = new Telegraf(TG_TOKEN);

  void bot.catch((err: unknown, ctx: { chat?: { id?: number | string }; updateType?: string }) => {
    app.log.error(
      { err, tg_chat_id: ctx.chat?.id, tg_type: ctx.updateType },
      '‚ùå –û—à–∏–±–∫–∞ –≤ Telegram –±–æ—Ç–µ',
    );
  });

  void bot.on('message', async (ctx: { chat?: { id?: number | string }; updateType?: string }, next: () => Promise<void>) => {
    try {
      app.log.info(
        { tg_chat_id: ctx.chat?.id, tg_type: ctx.updateType },
        'üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
      );
    } catch {
      // ignore
    }
    return next();
  });

  void bot.on(message('text'), async (ctx: { message: { text?: string }; sendChatAction: (action: string) => Promise<void>; reply: (text: string) => Promise<void> }) => {
    const text = ctx.message.text || '';
    try {
      await ctx.sendChatAction('typing');
    } catch {
      // ignore
    }
    try {
      // –í—ã–∑—ã–≤–∞–µ–º ragAnswer –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
      const result = await ragAnswer({
        text,
        lang: 'ru',
        logger: app.log,
        pg: app.pg,
      });

      const answer = result.answer;
      const escalate = result.escalate;
      const tail = escalate
        ? '\n\n–ï—Å–ª–∏ –Ω—É–∂–Ω–æ ‚Äî –º–æ–≥—É –ø–æ–¥–∫–ª—é—á–∏—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏.'
        : '';

      await ctx.reply(`${answer}${tail}`);
    } catch (err) {
      app.log.error({ err }, '‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ ragAnswer');
      try {
        await ctx.reply(
          '‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏. –ú–æ–≥—É –ø–æ–¥–∫–ª—é—á–∏—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏.',
        );
      } catch {
        // ignore
      }
    }
  });

  interface TelegramWebhookParams {
    token?: string;
  }

  void app.post(`${TG_PATH}/:token?`, async (req: { headers: Record<string, string | undefined>; params: { token?: string }; body: unknown; ip: string }, reply: { code: (status: number) => { send: () => void } }) => {
    const headerSecret = String(
      req.headers['x-telegram-bot-api-secret-token'] || '',
    );
    const urlSecret = req.params?.token || '';
    const hasSecret = Boolean(TG_SECRET);

    if (hasSecret) {
      if (headerSecret !== TG_SECRET && urlSecret !== TG_SECRET) {
        app.log.warn({ ip: req.ip }, 'üö´ –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ Telegram webhook');
        return reply.code(401).send();
      }
    } else {
      app.log.warn(
        { ip: req.ip },
        'üö´ Telegram webhook –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç TG_WEBHOOK_SECRET',
      );
      return reply.code(401).send();
    }

    try {
      // @ts-expect-error: handleUpdate exists at runtime; shim types may not include it
      await bot.handleUpdate(req.body as Update);
      return reply.code(200).send();
    } catch (err) {
      app.log.error({ err }, '‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Telegram –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
      return reply.code(500).send();
    }
  });

  return app;
}

async function start() {
  const app = await createApp();
  const port = Number(process.env.PORT || 3000);
  const host = '0.0.0.0';
  try {
    await app.listen({ port, host });
    app.log.info({ port }, 'üöÄ –°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω');
  } catch (err) {
    app.log.error({ err }, '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä');
    process.exit(1);
  }
}

if (process.env.NODE_ENV !== 'test') {
  void start().catch((err) => {
    logger.error({ err }, 'Failed to start server');
    process.exit(1);
  });
}

export default createApp;
