const { createClient } = require('@supabase/supabase-js');

async function checkEmbeddings() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º embeddings –≤ kb_chunks...');
  
  const supabase = createClient(
    process.env.SUPABASE_URL,
    process.env.SUPABASE_SERVICE_ROLE_KEY
  );
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã kb_chunks
    const { data: chunks, error: chunksError } = await supabase
      .from('kb_chunks')
      .select('*')
      .limit(3);
    
    if (chunksError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ kb_chunks:', chunksError);
      return;
    }
    
    console.log('üìä –ù–∞–π–¥–µ–Ω–æ —á–∞–Ω–∫–æ–≤:', chunks.length);
    
    chunks.forEach((chunk, i) => {
      console.log(`\n${i+1}. –ß–∞–Ω–∫ ID: ${chunk.id}`);
      console.log(`   Article ID: ${chunk.article_id}`);
      console.log(`   Chunk Index: ${chunk.chunk_index}`);
      console.log(`   Chunk Text: ${chunk.chunk_text ? chunk.chunk_text.substring(0, 100) : 'N/A'}...`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ embedding
      if (chunk.embedding) {
        console.log(`   Embedding: –µ—Å—Ç—å, —Ä–∞–∑–º–µ—Ä: ${chunk.embedding.length}`);
        console.log(`   –¢–∏–ø: ${typeof chunk.embedding}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ embedding –º–∞—Å—Å–∏–≤–æ–º
        if (Array.isArray(chunk.embedding)) {
          console.log(`   –ü–µ—Ä–≤—ã–µ 5 –∑–Ω–∞—á–µ–Ω–∏–π: [${chunk.embedding.slice(0, 5).join(', ')}]`);
        } else {
          console.log(`   –ü–µ—Ä–≤—ã–µ 50 —Å–∏–º–≤–æ–ª–æ–≤: ${chunk.embedding.substring(0, 50)}...`);
          
          // –ü—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ JSON
          try {
            const parsed = JSON.parse(chunk.embedding);
            if (Array.isArray(parsed)) {
              console.log(`   Parsed –∫–∞–∫ JSON –º–∞—Å—Å–∏–≤, —Ä–∞–∑–º–µ—Ä: ${parsed.length}`);
              console.log(`   –ü–µ—Ä–≤—ã–µ 5 –∑–Ω–∞—á–µ–Ω–∏–π: [${parsed.slice(0, 5).join(', ')}]`);
            }
          } catch (e) {
            console.log(`   –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ JSON`);
          }
        }
      } else {
        console.log(`   Embedding: –û–¢–°–£–¢–°–¢–í–£–ï–¢!`);
      }
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–æ–ª–æ–Ω–∫–∞ embedding
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã...');
    const { data: columns, error: columnsError } = await supabase
      .from('information_schema.columns')
      .select('column_name, data_type')
      .eq('table_name', 'kb_chunks')
      .eq('table_schema', 'public');
    
    if (columnsError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã:', columnsError);
    } else {
      console.log('üìã –ö–æ–ª–æ–Ω–∫–∏ –≤ kb_chunks:');
      columns.forEach(col => {
        console.log(`   - ${col.column_name}: ${col.data_type}`);
      });
    }
    
  } catch (err) {
    console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞:', err.message);
  }
}

checkEmbeddings();
