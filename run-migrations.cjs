// –°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–π RAG —Å–∏—Å—Ç–µ–º—ã
const { createClient } = require('@supabase/supabase-js');
const fs = require('fs');
const path = require('path');

require('dotenv').config();

const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
);

async function runMigrations() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–π RAG —Å–∏—Å—Ç–µ–º—ã...\n');

  try {
    // 1. –ß–∏—Ç–∞–µ–º SQL –º–∏–≥—Ä–∞—Ü–∏—é
    const migrationPath = path.join(__dirname, 'migrations', '001_pgvector_setup.sql');
    const migrationSQL = fs.readFileSync(migrationPath, 'utf8');

    console.log('üìÑ –í—ã–ø–æ–ª–Ω—è–µ–º SQL –º–∏–≥—Ä–∞—Ü–∏–∏...');
    
    // –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é exec_sql
    const execSQLPath = path.join(__dirname, 'migrations', '002_exec_sql_function.sql');
    const execSQL = fs.readFileSync(execSQLPath, 'utf8');
    
    console.log('üîß –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é exec_sql...');
    const { error: execError } = await supabase.rpc('exec_sql', { sql: execSQL });
    if (execError) {
      console.log(`‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ exec_sql: ${execError.message}`);
    } else {
      console.log('‚úÖ –§—É–Ω–∫—Ü–∏—è exec_sql —Å–æ–∑–¥–∞–Ω–∞');
    }
    
    // –¢–µ–ø–µ—Ä—å –≤—ã–ø–æ–ª–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –º–∏–≥—Ä–∞—Ü–∏—é
    const statements = migrationSQL
      .split(';')
      .map(s => s.trim())
      .filter(s => s.length > 0 && !s.startsWith('--') && !s.startsWith('CREATE OR REPLACE FUNCTION'));

    let successCount = 0;
    let errorCount = 0;

    for (const statement of statements) {
      try {
        if (statement.trim()) {
          const { error } = await supabase.rpc('exec_sql', { sql: statement });
          if (error) {
            console.log(`‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: ${error.message}`);
            errorCount++;
          } else {
            successCount++;
          }
        }
      } catch (err) {
        console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ –∑–∞–ø—Ä–æ—Å–µ: ${err.message}`);
        errorCount++;
      }
    }

    console.log(`‚úÖ SQL –º–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${successCount} —É—Å–ø–µ—à–Ω–æ, ${errorCount} –æ—à–∏–±–æ–∫`);

    // 2. –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é embeddings
    console.log('\nüîÑ –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é embeddings...');
    const { spawn } = require('child_process');
    
    const migrateProcess = spawn('node', ['migrations/migrate_embeddings.cjs'], {
      stdio: 'inherit',
      cwd: __dirname
    });

    migrateProcess.on('close', (code) => {
      if (code === 0) {
        console.log('\nüéâ –í—Å–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
        console.log('\nüìä –ß—Ç–æ –±—ã–ª–æ —Å–¥–µ–ª–∞–Ω–æ:');
        console.log('  ‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω—ã —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è pgvector, pg_trgm, unaccent');
        console.log('  ‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ embedding_vec –¥–ª—è –≤–µ–∫—Ç–æ—Ä–æ–≤');
        console.log('  ‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ content_tsv –¥–ª—è –ø–æ–ª–Ω–æ—Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞');
        console.log('  ‚úÖ –°–æ–∑–¥–∞–Ω—ã –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞');
        console.log('  ‚úÖ –°–æ–∑–¥–∞–Ω–∞ RPC —Ñ—É–Ω–∫—Ü–∏—è rag_hybrid_search');
        console.log('  ‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω RLS –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏');
        console.log('  ‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ rag_logs –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏');
        console.log('  ‚úÖ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã embeddings –≤ pgvector —Ñ–æ—Ä–º–∞—Ç');
        console.log('\nüöÄ RAG —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!');
      } else {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ embeddings: –∫–æ–¥ ${code}`);
      }
    });

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:', error.message);
  }
}

runMigrations().catch(console.error);