async function testWebhook() {
  console.log('üîó –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–æ—Ç–∞ —á–µ—Ä–µ–∑ webhook...');
  
  const webhookUrl = 'http://localhost:3000/telegram/webhook';
  const testChatId = 123456789; // –¢–µ—Å—Ç–æ–≤—ã–π chat ID
  
  try {
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É /start
    console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É /start...');
    
    const startResponse = await fetch(webhookUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        update_id: 1,
        message: {
          message_id: 1,
          from: {
            id: testChatId,
            is_bot: false,
            first_name: 'Test',
            username: 'testuser'
          },
          chat: {
            id: testChatId,
            first_name: 'Test',
            username: 'testuser',
            type: 'private'
          },
          date: Math.floor(Date.now() / 1000),
          text: '/start'
        }
      }),
    });
    
    const startData = await startResponse.text();
    console.log('‚úÖ –ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞, –æ—Ç–≤–µ—Ç:', startData);
    
    // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ
    console.log('‚è≥ –ñ–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã...');
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
    console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π...');
    
    const questionResponse = await fetch(webhookUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        update_id: 2,
        message: {
          message_id: 2,
          from: {
            id: testChatId,
            is_bot: false,
            first_name: 'Test',
            username: 'testuser'
          },
          chat: {
            id: testChatId,
            first_name: 'Test',
            username: 'testuser',
            type: 'private'
          },
          date: Math.floor(Date.now() / 1000),
          text: '–∫–∞–∫ –æ—Ç–∫—Ä—ã—Ç—å —Å–¥–µ–ª–∫—É'
        }
      }),
    });
    
    const questionData = await questionResponse.text();
    console.log('‚úÖ –í–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –æ—Ç–≤–µ—Ç:', questionData);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ webhook:', error.message);
  }
}

testWebhook();
