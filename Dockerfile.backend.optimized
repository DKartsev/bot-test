# Оптимизированный Dockerfile для backend
FROM node:20-alpine AS base

# Устанавливаем только необходимые системные зависимости
RUN apk add --no-cache python3 build-base

# Создаем пользователя для безопасности
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nodejs -u 1001

WORKDIR /app

# Копируем только package.json файлы для кэширования слоев
COPY package*.json ./
COPY packages/backend/package*.json ./packages/backend/
COPY packages/shared/package*.json ./packages/shared/

# Устанавливаем зависимости (кэшируется отдельным слоем)
RUN npm ci --only=production --omit=dev

# Development stage
FROM base AS development

# Устанавливаем dev зависимости
RUN npm ci

# Копируем исходный код
COPY packages/backend ./packages/backend
COPY packages/shared ./packages/shared
COPY tsconfig*.json ./

# Создаем необходимые директории
RUN mkdir -p logs data && \
    chown -R nodejs:nodejs logs data

USER nodejs

EXPOSE 3000

# Используем tsx для hot reload в development
CMD ["npm", "run", "dev", "-w", "packages/backend"]

# Production stage
FROM base AS production

# Копируем исходный код
COPY packages/backend ./packages/backend
COPY packages/shared ./packages/shared
COPY tsconfig*.json ./

# Собираем приложение
RUN npm run build -w packages/backend

# Создаем необходимые директории
RUN mkdir -p logs data && \
    chown -R nodejs:nodejs logs data

USER nodejs

EXPOSE 3000

CMD ["npm", "run", "start", "-w", "packages/backend"]
