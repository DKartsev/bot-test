# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–∏–ø—Ç –¥–µ–ø–ª–æ—è –Ω–∞ VM
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: .\scripts\auto-deploy.ps1

param(
    [Parameter(Mandatory=$true)]
    [string]$VMIP,
    
    [Parameter(Mandatory=$true)]
    [string]$SSHKeyPath,
    
    [string]$VMUser = "dankartsev",
    [string]$ProjectPath = "~/bot-project",
    [switch]$Watch,
    [switch]$Force
)

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
$Red = "Red"
$Green = "Green"
$Yellow = "Yellow"
$Blue = "Blue"
$White = "White"

Write-Host "üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –¥–µ–ø–ª–æ–π –Ω–∞ VM $VMIP" -ForegroundColor $Green
Write-Host ""

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã –Ω–∞ VM
function Invoke-VMCommand {
    param([string]$Command, [string]$Description)
    
    Write-Host "üì° $Description..." -ForegroundColor $Blue
    Write-Host "–ö–æ–º–∞–Ω–¥–∞: $Command" -ForegroundColor $White
    
    try {
        $result = ssh -i $SSHKeyPath "${VMUser}@${VMIP}" $Command 2>&1
        if ($LASTEXITCODE -eq 0) {
            Write-Host "‚úÖ $Description –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ" -ForegroundColor $Green
            return $result
        } else {
            Write-Host "‚ùå $Description –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –æ—à–∏–±–∫–æ–π" -ForegroundColor $Red
            Write-Host "–û—à–∏–±–∫–∞: $result" -ForegroundColor $Red
            return $false
        }
    } catch {
        Write-Host "‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: $($_.Exception.Message)" -ForegroundColor $Red
        return $false
    }
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –Ω–∞ VM
function Copy-ToVM {
    param([string]$Source, [string]$Destination)
    
    Write-Host "üì§ –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ $Source –Ω–∞ VM..." -ForegroundColor $Blue
    
    try {
        $result = scp -i $SSHKeyPath $Source "${VMUser}@${VMIP}:$Destination" 2>&1
        if ($LASTEXITCODE -eq 0) {
            Write-Host "‚úÖ –§–∞–π–ª —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ" -ForegroundColor $Green
            return $true
        } else {
            Write-Host "‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è: $result" -ForegroundColor $Red
            return $false
        }
    } catch {
        Write-Host "‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è: $($_.Exception.Message)" -ForegroundColor $Red
        return $false
    }
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–µ–ø–ª–æ—è
function Deploy-ToVM {
    Write-Host "üîÑ –ù–∞—á–∏–Ω–∞–µ–º –¥–µ–ø–ª–æ–π..." -ForegroundColor $Yellow
    
    # –®–∞–≥ 1: –û—á–∏—Å—Ç–∫–∞ –∏ —Å–±–æ—Ä–∫–∞
    Write-Host "üì¶ –û—á–∏—Å—Ç–∫–∞ –∏ —Å–±–æ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞..." -ForegroundColor $Blue
    if (-not (Test-Path "dist")) {
        Write-Host "‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è dist –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–±–æ—Ä–∫—É –ø—Ä–æ–µ–∫—Ç–∞ —Å–Ω–∞—á–∞–ª–∞." -ForegroundColor $Red
        return $false
    }
    
    # –®–∞–≥ 2: –°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞
    Write-Host "üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞ –¥–ª—è –¥–µ–ø–ª–æ—è..." -ForegroundColor $Blue
    $timestamp = Get-Date -Format "yyyyMMdd-HHmmss"
    $archiveName = "deploy-${timestamp}.zip"
    
    try {
        Compress-Archive -Path "dist" -DestinationPath $archiveName -Force
        Write-Host "‚úÖ –ê—Ä—Ö–∏–≤ —Å–æ–∑–¥–∞–Ω: $archiveName" -ForegroundColor $Green
    } catch {
        Write-Host "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞—Ä—Ö–∏–≤–∞: $($_.Exception.Message)" -ForegroundColor $Red
        return $false
    }
    
    # –®–∞–≥ 3: –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞ –Ω–∞ VM
    if (-not (Copy-ToVM $archiveName "$ProjectPath/")) {
        return $false
    }
    
    # –®–∞–≥ 4: –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ –Ω–∞ VM
    Write-Host "üì¶ –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ –∞—Ä—Ö–∏–≤–∞ –Ω–∞ VM..." -ForegroundColor $Blue
    $deployCommands = @(
        "cd $ProjectPath",
        "rm -rf dist-old",
        "if [ -d 'dist' ]; then mv dist dist-old; fi",
        "unzip -o $archiveName",
        "rm $archiveName"
    )
    
    $deployScript = $deployCommands -join " ; "
    if (-not (Invoke-VMCommand $deployScript "Unpacking archive")) {
        return $false
    }
    
    # –®–∞–≥ 5: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    Write-Host "üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..." -ForegroundColor $Blue
    $installCommands = @(
        "cd $ProjectPath/dist",
        "npm ci --production"
    )
    
    $installScript = $installCommands -join " && "
    if (-not (Invoke-VMCommand $installScript "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")) {
        return $false
    }
    
    # –®–∞–≥ 6: –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
    Write-Host "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤..." -ForegroundColor $Blue
    $restartCommands = @(
        "pm2 reload ecosystem.config.js || pm2 start ecosystem.config.js",
        "pm2 save"
    )
    
    $restartScript = $restartCommands -join " && "
    if (-not (Invoke-VMCommand $restartScript "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤")) {
        return $false
    }
    
    # –®–∞–≥ 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
    Write-Host "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–æ–≤..." -ForegroundColor $Blue
    $status = Invoke-VMCommand "pm2 status" "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ PM2"
    if ($status) {
        Write-Host "üìä –°—Ç–∞—Ç—É—Å PM2:" -ForegroundColor $Blue
        Write-Host $status -ForegroundColor $White
    }
    
    # –®–∞–≥ 8: –û—á–∏—Å—Ç–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∞—Ä—Ö–∏–≤–∞
    Remove-Item $archiveName -Force
    Write-Host "‚úÖ –õ–æ–∫–∞–ª—å–Ω—ã–π –∞—Ä—Ö–∏–≤ —É–¥–∞–ª–µ–Ω" -ForegroundColor $Green
    
    Write-Host "üéâ –î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!" -ForegroundColor $Green
    return $true
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π
function Watch-AndDeploy {
    Write-Host "üëÄ –†–µ–∂–∏–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π..." -ForegroundColor $Yellow
    Write-Host "–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏" -ForegroundColor $White
    Write-Host ""
    
    $watcher = New-Object System.IO.FileSystemWatcher
    $watcher.Path = "."
    $watcher.IncludeSubdirectories = $true
    $watcher.EnableRaisingEvents = $true
    
    $action = {
        $path = $Event.SourceEventArgs.FullPath
        $changeType = $Event.SourceEventArgs.ChangeType
        $timestamp = Get-Date -Format "HH:mm:ss"
        
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        if ($path -match "\.(tmp|log|zip|tar\.gz)$|node_modules|dist|\.git") {
            return
        }
        
        Write-Host "[$timestamp] $changeType`: $path" -ForegroundColor $Yellow
        
        # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å
        Start-Sleep -Seconds 2
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –¥–µ–ø–ª–æ–π
        Write-Host "üîÑ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–µ–ø–ª–æ—è..." -ForegroundColor $Blue
        Deploy-ToVM
    }
    
    # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è
    Register-ObjectEvent $watcher "Changed" -Action $action | Out-Null
    Register-ObjectEvent $watcher "Created" -Action $action | Out-Null
    Register-ObjectEvent $watcher "Deleted" -Action $action | Out-Null
    Register-ObjectEvent $watcher "Renamed" -Action $action | Out-Null
    
    try {
        Write-Host "üëÄ –û–∂–∏–¥–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ñ–∞–π–ª–∞—Ö..." -ForegroundColor $Green
        while ($true) {
            Start-Sleep -Seconds 1
        }
    } finally {
        # –û—á–∏—Å—Ç–∫–∞
        Unregister-Event -SourceIdentifier $action.Name -ErrorAction SilentlyContinue
        $watcher.EnableRaisingEvents = $false
        $watcher.Dispose()
    }
}

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
try {
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    if (-not (Test-Path $SSHKeyPath)) {
        Write-Host "‚ùå SSH –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω: $SSHKeyPath" -ForegroundColor $Red
        exit 1
    }
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ VM
    Write-Host "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ VM..." -ForegroundColor $Blue
    $connectionTest = Invoke-VMCommand "echo 'Connection OK'" "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"
    if (-not $connectionTest) {
        Write-Host "‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ VM. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ IP –∞–¥—Ä–µ—Å –∏ SSH –∫–ª—é—á." -ForegroundColor $Red
        exit 1
    }
    
    Write-Host "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ VM —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ" -ForegroundColor $Green
    
    if ($Watch) {
        # –†–µ–∂–∏–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        Watch-AndDeploy
    } else {
        # –û–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π –¥–µ–ø–ª–æ–π
        Deploy-ToVM
    }
    
} catch {
    Write-Host "‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: $($_.Exception.Message)" -ForegroundColor $Red
    exit 1
}
