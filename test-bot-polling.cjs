const https = require('https');

const BOT_TOKEN = '8466377396:AAGOt2PImCCeFkC3vEIsM7KISv87Lpj9OhY';
const SERVER_URL = 'http://158.160.197.7:3000';

async function makeRequest(url, method = 'GET', data = null) {
  return new Promise((resolve, reject) => {
    const options = {
      method,
      headers: {
        'Content-Type': 'application/json'
      }
    };
    
    const client = url.startsWith('https:') ? https : require('http');
    const req = client.request(url, options, (res) => {
      let body = '';
      res.on('data', (chunk) => body += chunk);
      res.on('end', () => {
        try {
          const parsed = JSON.parse(body);
          resolve(parsed);
        } catch (e) {
          reject(new Error(`Invalid JSON: ${body}`));
        }
      });
    });
    
    req.on('error', reject);
    
    if (data) {
      req.write(JSON.stringify(data));
    }
    
    req.end();
  });
}

async function testBotWithPolling() {
  console.log('ü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞ —Å polling...');
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º health
    console.log('\n1. –ü—Ä–æ–≤–µ—Ä–∫–∞ health...');
    const health = await makeRequest(`${SERVER_URL}/health`);
    console.log('‚úÖ Health:', health.status);
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
    console.log('\n2. –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ...');
    const botInfo = await makeRequest(`https://api.telegram.org/bot${BOT_TOKEN}/getMe`);
    console.log('‚úÖ –ë–æ—Ç:', botInfo.result.first_name, `(@${botInfo.result.username})`);
    
    // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (polling)
    console.log('\n3. –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...');
    const updates = await makeRequest(`https://api.telegram.org/bot${BOT_TOKEN}/getUpdates`);
    console.log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–π –ø–æ–ª—É—á–µ–Ω–æ:', updates.result.length);
    
    if (updates.result.length > 0) {
      console.log('\nüì® –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è:');
      updates.result.forEach((update, index) => {
        if (update.message) {
          console.log(`  ${index + 1}. –û—Ç ${update.message.from.first_name}: "${update.message.text}"`);
        }
      });
    } else {
      console.log('‚ÑπÔ∏è –ù–µ—Ç –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start –±–æ—Ç—É –≤ Telegram.');
    }
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è
    console.log('\n4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è...');
    const testMessage = {
      chat_id: 123456789, // –¢–µ—Å—Ç–æ–≤—ã–π ID
      text: '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞'
    };
    
    try {
      const sendResult = await makeRequest(`https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`, 'POST', testMessage);
      console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:', sendResult.ok);
    } catch (error) {
      console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ (–æ–∂–∏–¥–∞–µ–º–æ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ ID):', error.message);
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testBotWithPolling();
