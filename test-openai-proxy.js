const OpenAI = require('openai');
const { HttpsProxyAgent } = require('https-proxy-agent');

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏
const PROXY_CONFIG = {
  host: '193.233.115.178',
  port: 11403,
  username: 'aUGIll6zoH',
  password: 'KFu2uvbHBx'
};

// –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–∫—Å–∏ URL
const proxyUrl = `http://${PROXY_CONFIG.username}:${PROXY_CONFIG.password}@${PROXY_CONFIG.host}:${PROXY_CONFIG.port}`;

console.log('üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏:');
console.log(`   Host: ${PROXY_CONFIG.host}:${PROXY_CONFIG.port}`);
console.log(`   Username: ${PROXY_CONFIG.username}`);
console.log(`   Proxy URL: http://${PROXY_CONFIG.username}:***@${PROXY_CONFIG.host}:${PROXY_CONFIG.port}`);

// –°–æ–∑–¥–∞–µ–º HTTPS –∞–≥–µ–Ω—Ç —Å –ø—Ä–æ–∫—Å–∏
const httpsAgent = new HttpsProxyAgent(proxyUrl);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º OpenAI –∫–ª–∏–µ–Ω—Ç
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
  httpAgent: httpsAgent, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à –ø—Ä–æ–∫—Å–∏ –∞–≥–µ–Ω—Ç
});

async function testOpenAI() {
  try {
    console.log('\nüöÄ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ OpenAI API —á–µ—Ä–µ–∑ HTTP-–ø—Ä–æ–∫—Å–∏...');
    
    // –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π
    console.log('\nüìã –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π...');
    const models = await openai.models.list();
    console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${models.data.length} –º–æ–¥–µ–ª–µ–π`);
    
    // –ù–∞—Ö–æ–¥–∏–º gpt-4o-mini
    const gpt4oMini = models.data.find(model => model.id === 'gpt-4o-mini');
    if (gpt4oMini) {
      console.log(`‚úÖ –ú–æ–¥–µ–ª—å gpt-4o-mini –Ω–∞–π–¥–µ–Ω–∞: ${gpt4oMini.id}`);
    } else {
      console.log('‚ö†Ô∏è  –ú–æ–¥–µ–ª—å gpt-4o-mini –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ');
    }
    
    // –¢–µ—Å—Ç 2: –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    console.log('\nüí¨ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ gpt-4o-mini...');
    const completion = await openai.chat.completions.create({
      model: 'gpt-4o-mini',
      messages: [
        {
          role: 'user',
          content: 'Hello from VM'
        }
      ],
      max_tokens: 100,
      temperature: 0.7
    });
    
    console.log('‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω:');
    console.log(`   –ú–æ–¥–µ–ª—å: ${completion.model}`);
    console.log(`   –û—Ç–≤–µ—Ç: ${completion.choices[0].message.content}`);
    console.log(`   –¢–æ–∫–µ–Ω—ã: ${completion.usage.total_tokens} (prompt: ${completion.usage.prompt_tokens}, completion: ${completion.usage.completion_tokens})`);
    
    console.log('\nüéâ –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω! OpenAI API —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ HTTP-–ø—Ä–æ–∫—Å–∏.');
    
  } catch (error) {
    console.error('\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ OpenAI API:');
    console.error(`   –¢–∏–ø –æ—à–∏–±–∫–∏: ${error.name}`);
    console.error(`   –°–æ–æ–±—â–µ–Ω–∏–µ: ${error.message}`);
    
    if (error.status) {
      console.error(`   HTTP —Å—Ç–∞—Ç—É—Å: ${error.status}`);
    }
    
    if (error.response) {
      console.error(`   –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: ${JSON.stringify(error.response.data, null, 2)}`);
    }
    
    process.exit(1);
  }
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞
if (!process.env.OPENAI_API_KEY) {
  console.error('‚ùå –û—à–∏–±–∫–∞: –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è OPENAI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
  console.error('   –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ—ë –∫–æ–º–∞–Ω–¥–æ–π: export OPENAI_API_KEY="your-api-key-here"');
  process.exit(1);
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testOpenAI();
