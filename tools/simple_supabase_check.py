#!/usr/bin/env python3
"""
–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ Supabase
"""

import psycopg2
import sys

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Supabase
DB_CONFIG = {
    'host': 'aws-0-eu-north-1.pooler.supabase.com',
    'port': 5432,
    'database': 'postgres',
    'user': 'postgres.ymfduihrjjuzwuckbjjh',
    'password': 'mn4c0Je402fgh3mc5'
}

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîç –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ Supabase")
    print("=" * 50)
    
    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn = psycopg2.connect(**DB_CONFIG)
        cursor = conn.cursor()
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
        print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–∞–±–ª–∏—Ü:")
        
        tables = ['kb_articles', 'kb_chunks', 'conversations', 'messages', 'operators']
        for table in tables:
            try:
                cursor.execute(f"SELECT COUNT(*) FROM {table}")
                count = cursor.fetchone()[0]
                print(f"  - {table}: {count} –∑–∞–ø–∏—Å–µ–π")
            except Exception as e:
                print(f"  - {table}: –û–®–ò–ë–ö–ê - {e}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥–∏
        print("\nü§ñ –ü—Ä–æ–≤–µ—Ä–∫–∞ RAG —Å–∏—Å—Ç–µ–º—ã:")
        
        cursor.execute("""
            SELECT 
                COUNT(*) as total_chunks,
                COUNT(CASE WHEN embedding IS NOT NULL THEN 1 END) as chunks_with_embeddings
            FROM kb_chunks
        """)
        embedding_stats = cursor.fetchone()
        
        total_chunks = embedding_stats[0]
        chunks_with_embeddings = embedding_stats[1]
        coverage_percent = (chunks_with_embeddings * 100.0 / total_chunks) if total_chunks > 0 else 0
        
        print(f"  - –í—Å–µ–≥–æ —á–∞–Ω–∫–æ–≤: {total_chunks}")
        print(f"  - –° —ç–º–±–µ–¥–¥–∏–Ω–≥–∞–º–∏: {chunks_with_embeddings}")
        print(f"  - –ü–æ–∫—Ä—ã—Ç–∏–µ: {coverage_percent:.1f}%")
        
        if coverage_percent == 100:
            print("  ‚úÖ RAG —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")
        elif coverage_percent > 80:
            print("  ‚ö†Ô∏è  RAG —Å–∏—Å—Ç–µ–º–∞ –ø–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–∞")
        else:
            print("  ‚ùå RAG —Å–∏—Å—Ç–µ–º–∞ —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ —á–∞–Ω–∫–æ–≤
        cursor.execute("""
            SELECT 
                AVG(LENGTH(chunk_text)) as avg_length,
                MIN(LENGTH(chunk_text)) as min_length,
                MAX(LENGTH(chunk_text)) as max_length
            FROM kb_chunks
        """)
        quality_stats = cursor.fetchone()
        
        print(f"\nüìù –ö–∞—á–µ—Å—Ç–≤–æ —á–∞–Ω–∫–æ–≤:")
        print(f"  - –°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞: {quality_stats[0]:.0f} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"  - –î–∏–∞–ø–∞–∑–æ–Ω: {quality_stats[1]} - {quality_stats[2]} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä—ã —Ç–∞–±–ª–∏—Ü
        cursor.execute("""
            SELECT 
                tablename,
                pg_size_pretty(pg_total_relation_size('public.'||tablename)) as size
            FROM pg_tables 
            WHERE schemaname = 'public' 
            AND tablename IN ('kb_articles', 'kb_chunks', 'conversations', 'messages')
            ORDER BY pg_total_relation_size('public.'||tablename) DESC
        """)
        sizes = cursor.fetchall()
        
        print(f"\nüíæ –†–∞–∑–º–µ—Ä—ã —Ç–∞–±–ª–∏—Ü:")
        for table_name, size in sizes:
            print(f"  - {table_name}: {size}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–¥–µ–∫—Å—ã
        cursor.execute("""
            SELECT COUNT(*) 
            FROM pg_indexes 
            WHERE schemaname = 'public' 
            AND tablename IN ('kb_articles', 'kb_chunks', 'conversations', 'messages')
        """)
        index_count = cursor.fetchone()[0]
        print(f"\nüîç –ò–Ω–¥–µ–∫—Å–æ–≤: {index_count}")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        print(f"\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        
        if coverage_percent < 100:
            print("  - –ù—É–∂–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ –¥–ª—è –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —á–∞–Ω–∫–æ–≤")
        
        if quality_stats[1] < 100:
            print("  - –ï—Å—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–µ —á–∞–Ω–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –æ–±—ä–µ–¥–∏–Ω–µ–Ω—ã")
        
        if quality_stats[2] > 1000:
            print("  - –ï—Å—Ç—å –¥–ª–∏–Ω–Ω—ã–µ —á–∞–Ω–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å —Ä–∞–∑–±–∏—Ç—ã")
        
        if total_chunks > 0:
            print("  - RAG —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é")
        
        print(f"\nüéâ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        sys.exit(1)
    finally:
        if 'conn' in locals():
            cursor.close()
            conn.close()
            print("üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Supabase –∑–∞–∫—Ä—ã—Ç–æ")

if __name__ == "__main__":
    main()
