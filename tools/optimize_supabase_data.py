#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ Supabase
"""

import psycopg2
import sys
from datetime import datetime

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Supabase
DB_CONFIG = {
    'host': 'aws-0-eu-north-1.pooler.supabase.com',
    'port': 5432,
    'database': 'postgres',
    'user': 'postgres.ymfduihrjjuzwuckbjjh',
    'password': 'mn4c0Je402fgh3mc5'
}

def check_database_health(cursor) -> dict:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–¥–æ—Ä–æ–≤—å–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    health = {}
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
    tables = ['kb_articles', 'kb_chunks', 'conversations', 'messages', 'operators']
    for table in tables:
        try:
            cursor.execute(f"SELECT COUNT(*) FROM {table}")
            count = cursor.fetchone()[0]
            health[table] = count
        except Exception as e:
            health[table] = f"ERROR: {e}"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–¥–µ–∫—Å—ã
    cursor.execute("""
        SELECT indexname, tablename 
        FROM pg_indexes 
        WHERE schemaname = 'public' 
        AND tablename IN ('kb_articles', 'kb_chunks', 'conversations', 'messages')
        ORDER BY tablename, indexname
    """)
    indexes = cursor.fetchall()
    health['indexes'] = len(indexes)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä—ã —Ç–∞–±–ª–∏—Ü
    cursor.execute("""
        SELECT 
            schemaname,
            tablename,
            pg_size_pretty(pg_total_relation_size(schemaname||'.'||tablename)) as size
        FROM pg_tables 
        WHERE schemaname = 'public' 
        AND tablename IN ('kb_articles', 'kb_chunks', 'conversations', 'messages')
        ORDER BY pg_total_relation_size(schemaname||'.'||tablename) DESC
    """)
    sizes = cursor.fetchall()
    health['table_sizes'] = sizes
    
    return health

def analyze_kb_data(cursor) -> dict:
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π"""
    analysis = {}
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—Ç–∞—Ç–µ–π
    cursor.execute("""
        SELECT 
            COUNT(*) as total_articles,
            COUNT(CASE WHEN tags IS NOT NULL THEN 1 END) as articles_with_tags,
            COUNT(CASE WHEN body_md IS NOT NULL AND LENGTH(body_md) > 0 THEN 1 END) as articles_with_content
        FROM kb_articles
    """)
    article_stats = cursor.fetchone()
    analysis['articles'] = {
        'total': article_stats[0],
        'with_tags': article_stats[1],
        'with_content': article_stats[2]
    }
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞–Ω–∫–æ–≤
    cursor.execute("""
        SELECT 
            COUNT(*) as total_chunks,
            COUNT(CASE WHEN embedding IS NOT NULL THEN 1 END) as chunks_with_embeddings,
            AVG(LENGTH(chunk_text)) as avg_chunk_length,
            MIN(LENGTH(chunk_text)) as min_chunk_length,
            MAX(LENGTH(chunk_text)) as max_chunk_length
        FROM kb_chunks
    """)
    chunk_stats = cursor.fetchone()
    analysis['chunks'] = {
        'total': chunk_stats[0],
        'with_embeddings': chunk_stats[1],
        'avg_length': round(chunk_stats[2] or 0, 2),
        'min_length': chunk_stats[3] or 0,
        'max_length': chunk_stats[4] or 0
    }
    
    # –¢–æ–ø —Ç–µ–≥–æ–≤ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
    try:
        cursor.execute("""
            SELECT tags, COUNT(*) as count
            FROM kb_articles 
            WHERE tags IS NOT NULL AND tags != '[]' AND tags != 'null'
            GROUP BY tags 
            ORDER BY count DESC 
            LIMIT 10
        """)
        top_tags = cursor.fetchall()
        analysis['top_tags'] = top_tags
    except Exception as e:
        print(f"    ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–≥–æ–≤: {e}")
        analysis['top_tags'] = []
    
    return analysis

def check_rag_readiness(cursor) -> dict:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å RAG —Å–∏—Å—Ç–µ–º—ã"""
    readiness = {}
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
    cursor.execute("""
        SELECT 
            COUNT(*) as total_chunks,
            COUNT(CASE WHEN embedding IS NOT NULL THEN 1 END) as chunks_with_embeddings,
            ROUND(
                COUNT(CASE WHEN embedding IS NOT NULL THEN 1 END) * 100.0 / COUNT(*), 
                2
            ) as embedding_coverage_percent
        FROM kb_chunks
    """)
    embedding_stats = cursor.fetchone()
    readiness['embeddings'] = {
        'total_chunks': embedding_stats[0],
        'with_embeddings': embedding_stats[1],
        'coverage_percent': embedding_stats[2]
    }
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ —á–∞–Ω–∫–æ–≤
    cursor.execute("""
        SELECT 
            COUNT(*) as total_chunks,
            COUNT(CASE WHEN LENGTH(chunk_text) > 100 THEN 1 END) as good_length_chunks,
            COUNT(CASE WHEN LENGTH(chunk_text) > 500 THEN 1 END) as long_chunks,
            COUNT(CASE WHEN LENGTH(chunk_text) < 50 THEN 1 END) as short_chunks
        FROM kb_chunks
    """)
    quality_stats = cursor.fetchone()
    readiness['chunk_quality'] = {
        'total': quality_stats[0],
        'good_length': quality_stats[1],
        'long': quality_stats[2],
        'short': quality_stats[3]
    }
    
    return readiness

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîç –ê–Ω–∞–ª–∏–∑ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ Supabase")
    print("=" * 50)
    
    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn = psycopg2.connect(**DB_CONFIG)
        cursor = conn.cursor()
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        
        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        print("\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        health = check_database_health(cursor)
        
        print("  –¢–∞–±–ª–∏—Ü—ã:")
        for table, count in health.items():
            if isinstance(count, int):
                print(f"    - {table}: {count} –∑–∞–ø–∏—Å–µ–π")
        
        print(f"  –ò–Ω–¥–µ–∫—Å–æ–≤: {health['indexes']}")
        
        print("  –†–∞–∑–º–µ—Ä—ã —Ç–∞–±–ª–∏—Ü:")
        for size_info in health['table_sizes']:
            print(f"    - {size_info[1]}: {size_info[2]}")
        
        # 2. –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
        print("\nüìö –ê–Ω–∞–ª–∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π...")
        kb_analysis = analyze_kb_data(cursor)
        
        print(f"  –°—Ç–∞—Ç—å–∏:")
        print(f"    - –í—Å–µ–≥–æ: {kb_analysis['articles']['total']}")
        print(f"    - –° —Ç–µ–≥–∞–º–∏: {kb_analysis['articles']['with_tags']}")
        print(f"    - –° –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º: {kb_analysis['articles']['with_content']}")
        
        print(f"  –ß–∞–Ω–∫–∏:")
        print(f"    - –í—Å–µ–≥–æ: {kb_analysis['chunks']['total']}")
        print(f"    - –° —ç–º–±–µ–¥–¥–∏–Ω–≥–∞–º–∏: {kb_analysis['chunks']['with_embeddings']}")
        print(f"    - –°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞: {kb_analysis['chunks']['avg_length']} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"    - –î–∏–∞–ø–∞–∑–æ–Ω: {kb_analysis['chunks']['min_length']} - {kb_analysis['chunks']['max_length']} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ RAG
        print("\nü§ñ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ RAG —Å–∏—Å—Ç–µ–º—ã...")
        rag_readiness = check_rag_readiness(cursor)
        
        coverage = rag_readiness['embeddings']['coverage_percent']
        print(f"  –ü–æ–∫—Ä—ã—Ç–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞–º–∏: {coverage}%")
        
        if coverage == 100:
            print("  ‚úÖ RAG —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")
        elif coverage > 80:
            print("  ‚ö†Ô∏è  RAG —Å–∏—Å—Ç–µ–º–∞ –ø–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–∞")
        else:
            print("  ‚ùå RAG —Å–∏—Å—Ç–µ–º–∞ —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏")
        
        quality = rag_readiness['chunk_quality']
        print(f"  –ö–∞—á–µ—Å—Ç–≤–æ —á–∞–Ω–∫–æ–≤:")
        print(f"    - –•–æ—Ä–æ—à–µ–π –¥–ª–∏–Ω—ã (>100 —Å–∏–º–≤–æ–ª–æ–≤): {quality['good_length']}")
        print(f"    - –î–ª–∏–Ω–Ω—ã–µ (>500 —Å–∏–º–≤–æ–ª–æ–≤): {quality['long']}")
        print(f"    - –ö–æ—Ä–æ—Ç–∫–∏–µ (<50 —Å–∏–º–≤–æ–ª–æ–≤): {quality['short']}")
        
        # 4. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        print("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        
        if coverage < 100:
            print("  - –ù—É–∂–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ –¥–ª—è –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —á–∞–Ω–∫–æ–≤")
        
        if quality['short'] > 0:
            print("  - –ï—Å—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–µ —á–∞–Ω–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –æ–±—ä–µ–¥–∏–Ω–µ–Ω—ã")
        
        if quality['long'] > 0:
            print("  - –ï—Å—Ç—å –¥–ª–∏–Ω–Ω—ã–µ —á–∞–Ω–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å —Ä–∞–∑–±–∏—Ç—ã")
        
        if kb_analysis['articles']['with_tags'] < kb_analysis['articles']['total']:
            print("  - –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Å—Ç–∞—Ç—å–∏ –Ω–µ –∏–º–µ—é—Ç —Ç–µ–≥–æ–≤")
        
        print(f"\nüéâ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        sys.exit(1)
    finally:
        if 'conn' in locals():
            cursor.close()
            conn.close()
            print("üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Supabase –∑–∞–∫—Ä—ã—Ç–æ")

if __name__ == "__main__":
    main()
