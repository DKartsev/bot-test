#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∑–Ω–∞–Ω–∏–π –∏–∑ markdown —Ñ–∞–π–ª–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö PostgreSQL
"""

import os
import sys
import psycopg2
import uuid
from datetime import datetime
from pathlib import Path
import re

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
DB_CONFIG = {
    'host': 'localhost',
    'port': 5432,
    'database': 'support_db',
    'user': 'postgres',
    'password': 'postgres'
}

def parse_markdown_file(file_path: Path) -> dict:
    """–ü–∞—Ä—Å–∏—Ç markdown —Ñ–∞–π–ª –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ"""
    content = file_path.read_text(encoding='utf-8')
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º frontmatter (–º–µ–∂–¥—É ---)
    frontmatter_match = re.match(r'^---\n(.*?)\n---\n', content, re.DOTALL)
    
    if frontmatter_match:
        frontmatter_text = frontmatter_match.group(1)
        # –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–∏–Ω–≥ YAML
        metadata = {}
        for line in frontmatter_text.split('\n'):
            if ':' in line:
                key, value = line.split(':', 1)
                key = key.strip()
                value = value.strip().strip('"')
                if key == 'tags':
                    # –ü–∞—Ä—Å–∏–º —Ç–µ–≥–∏
                    tags_text = value.strip('[]')
                    tags = [tag.strip().strip('"') for tag in tags_text.split(',') if tag.strip()]
                    metadata[key] = tags
                else:
                    metadata[key] = value
        
        # –£–±–∏—Ä–∞–µ–º frontmatter –∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
        body_md = content[frontmatter_match.end():].strip()
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç frontmatter, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
        metadata = {
            'title': file_path.stem.replace('-', ' ').title(),
            'slug': file_path.stem,
            'tags': []
        }
        body_md = content
    
    return {
        'title': metadata.get('title', file_path.stem.replace('-', ' ').title()),
        'slug': metadata.get('slug', file_path.stem),
        'tags': metadata.get('tags', []),
        'body_md': body_md
    }

def create_kb_article(cursor, article_data: dict) -> str:
    """–°–æ–∑–¥–∞–µ—Ç —Å—Ç–∞—Ç—å—é –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π"""
    article_id = str(uuid.uuid4())
    
    cursor.execute("""
        INSERT INTO kb_articles (id, title, slug, body_md, tags, updated_at)
        VALUES (%s, %s, %s, %s, %s, %s)
        ON CONFLICT (slug) DO UPDATE SET
            title = EXCLUDED.title,
            body_md = EXCLUDED.body_md,
            tags = EXCLUDED.tags,
            updated_at = EXCLUDED.updated_at
        RETURNING id
    """, (
        article_id,
        article_data['title'],
        article_data['slug'],
        article_data['body_md'],
        article_data['tags'],
        datetime.now()
    ))
    
    return cursor.fetchone()[0]

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å —Ñ–∞–π–ª–∞–º–∏ –∑–Ω–∞–Ω–∏–π
    kb_path = Path('../apps/support-gateway/kb_articles')
    
    if not kb_path.exists():
        print(f"‚ùå –ü–∞–ø–∫–∞ {kb_path} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        sys.exit(1)
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    try:
        conn = psycopg2.connect(**DB_CONFIG)
        cursor = conn.cursor()
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        sys.exit(1)
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ markdown —Ñ–∞–π–ª–æ–≤
        md_files = list(kb_path.glob('*.md'))
        print(f"üìÅ –ù–∞–π–¥–µ–Ω–æ {len(md_files)} markdown —Ñ–∞–π–ª–æ–≤")
        
        if not md_files:
            print("‚ùå Markdown —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
        loaded_count = 0
        for md_file in md_files:
            try:
                print(f"üìñ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é {md_file.name}...")
                
                # –ü–∞—Ä—Å–∏–º —Ñ–∞–π–ª
                article_data = parse_markdown_file(md_file)
                
                # –°–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ç—å—é –≤ –±–∞–∑–µ
                article_id = create_kb_article(cursor, article_data)
                
                print(f"‚úÖ –°—Ç–∞—Ç—å—è '{article_data['title']}' –∑–∞–≥—Ä—É–∂–µ–Ω–∞ (ID: {article_id})")
                loaded_count += 1
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {md_file.name}: {e}")
                continue
        
        # –ö–æ–º–º–∏—Ç–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        conn.commit()
        print(f"\nüéâ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ó–∞–≥—Ä—É–∂–µ–Ω–æ {loaded_count} —Å—Ç–∞—Ç–µ–π")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        cursor.execute("SELECT COUNT(*) FROM kb_articles")
        total_count = cursor.fetchone()[0]
        print(f"üìä –í—Å–µ–≥–æ —Å—Ç–∞—Ç–µ–π –≤ –±–∞–∑–µ: {total_count}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        conn.rollback()
    finally:
        cursor.close()
        conn.close()
        print("üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ")

if __name__ == "__main__":
    main()
