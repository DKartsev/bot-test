#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã RAG –ø–∞–π–ø–ª–∞–π–Ω–∞
"""

import os
import sys
import json
import time
from typing import Dict, Any

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from bot_search import RAGClient

def test_rag_health(client: RAGClient) -> bool:
    """–¢–µ—Å—Ç –∑–¥–æ—Ä–æ–≤—å—è RAG —Å–µ—Ä–≤–∏—Å–∞"""
    print("üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è RAG —Å–µ—Ä–≤–∏—Å–∞...")
    
    try:
        health = client.get_health()
        if health.get("success"):
            print("‚úÖ –°–µ—Ä–≤–∏—Å –∑–¥–æ—Ä–æ–≤")
            print(f"   –°—Ç–∞—Ç—É—Å: {health['data']['status']}")
            print(f"   –í—Ä–µ–º—è: {health['data']['timestamp']}")
            return True
        else:
            print("‚ùå –°–µ—Ä–≤–∏—Å –Ω–µ–∑–¥–æ—Ä–æ–≤")
            print(f"   –û—à–∏–±–∫–∞: {health.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è: {e}")
        return False

def test_model_info(client: RAGClient) -> bool:
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥–µ–ª–∏"""
    print("\nü§ñ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥–µ–ª–∏...")
    
    try:
        model_info = client.get_model_info()
        if model_info.get("success"):
            data = model_info["data"]
            print("‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏ –ø–æ–ª—É—á–µ–Ω–∞")
            print(f"   –ú–æ–¥–µ–ª—å: {data['model']}")
            print(f"   –ü—Ä–æ–≤–∞–π–¥–µ—Ä: {data['provider']}")
            print(f"   –ú–∞–∫—Å —Ç–æ–∫–µ–Ω–æ–≤: {data['maxTokens']}")
            print(f"   –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {data['temperature']}")
            return True
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ–ª–∏")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥–µ–ª–∏: {e}")
        return False

def test_pipeline_stats(client: RAGClient) -> bool:
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–∞–π–ø–ª–∞–π–Ω–∞"""
    print("\nüìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–∞–π–ø–ª–∞–π–Ω–∞...")
    
    try:
        stats = client.get_stats()
        if stats.get("success"):
            data = stats["data"]
            print("‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞")
            print(f"   –°–µ—Ä–≤–∏—Å: {data.get('service', 'N/A')}")
            print(f"   –í–µ—Ä—Å–∏—è: {data.get('version', 'N/A')}")
            print(f"   –í—Ä–µ–º—è: {data.get('timestamp', 'N/A')}")
            return True
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return False

def test_pipeline_test(client: RAGClient, test_query: str) -> bool:
    """–¢–µ—Å—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞–π–ø–ª–∞–π–Ω–∞"""
    print(f"\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–π–ø–ª–∞–π–Ω–∞ —Å –∑–∞–ø—Ä–æ—Å–æ–º: '{test_query}'")
    
    try:
        test_result = client.test_pipeline(test_query)
        if test_result.get("success"):
            print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–π–ø–ª–∞–π–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            data = test_result["data"]
            print(f"   –°—Ç–∞—Ç—É—Å: {data.get('pipelineStatus', 'N/A')}")
            if "response" in data:
                response = data["response"]
                print(f"   –û—Ç–≤–µ—Ç: {response.get('answer', 'N/A')[:100]}...")
                print(f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {response.get('confidence', 'N/A')}")
                print(f"   –ò—Å—Ç–æ—á–Ω–∏–∫–∏: {len(response.get('sources', []))}")
            return True
        else:
            print("‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–π–ø–ª–∞–π–Ω–∞ –Ω–µ —É–¥–∞–ª–æ—Å—å")
            print(f"   –û—à–∏–±–∫–∞: {test_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞–π–ø–ª–∞–π–Ω–∞: {e}")
        return False

def test_real_query(client: RAGClient, question: str, context: str = None) -> bool:
    """–¢–µ—Å—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
    print(f"\nüîç –¢–µ—Å—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: '{question}'")
    
    try:
        start_time = time.time()
        
        response = client.process_query(
            question=question,
            context=context,
            user_id=999,
            chat_id=888,
            options={
                "temperature": 0.3,
                "maxTokens": 2000,
                "useHybridSearch": True
            }
        )
        
        end_time = time.time()
        processing_time = end_time - start_time
        
        if response.get("success"):
            print("‚úÖ –ó–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            data = response["data"]
            print(f"   –û—Ç–≤–µ—Ç: {data.get('answer', 'N/A')[:200]}...")
            print(f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {data.get('confidence', 'N/A')}")
            print(f"   –í—Ä–µ–º—è –ø–æ–∏—Å–∫–∞: {data.get('searchTime', 'N/A')}ms")
            print(f"   –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {data.get('processingTime', 'N/A')}ms")
            print(f"   –û–±—â–µ–µ –≤—Ä–µ–º—è: {data.get('totalTime', 'N/A')}ms")
            print(f"   –í—Ä–µ–º—è –∫–ª–∏–µ–Ω—Ç–∞: {processing_time:.2f}s")
            print(f"   –ò—Å—Ç–æ—á–Ω–∏–∫–∏: {len(data.get('sources', []))}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            metadata = data.get('metadata', {})
            if metadata:
                print(f"   –ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å: {metadata.get('queryRephrased', 'N/A')}")
                print(f"   –°—Ç—Ä–∞—Ç–µ–≥–∏—è –ø–æ–∏—Å–∫–∞: {metadata.get('searchStrategy', 'N/A')}")
                print(f"   –ú–æ–¥–µ–ª—å: {metadata.get('modelUsed', 'N/A')}")
            
            return True
        else:
            print("‚ùå –ó–∞–ø—Ä–æ—Å –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
            print(f"   –û—à–∏–±–∫–∞: {response.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return False

def test_search_config_update(client: RAGClient) -> bool:
    """–¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ–∏—Å–∫–∞"""
    print("\n‚öôÔ∏è –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ–∏—Å–∫–∞...")
    
    try:
        new_config = {
            "vectorWeight": 0.8,
            "keywordWeight": 0.2,
            "maxResults": 15,
            "minScore": 0.4
        }
        
        result = client.update_search_config(new_config)
        if result.get("success"):
            print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            print(f"   –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {json.dumps(new_config, indent=2)}")
            return True
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é")
            print(f"   –û—à–∏–±–∫–∞: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return False

def run_all_tests(backend_url: str = None) -> Dict[str, bool]:
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ RAG –ø–∞–π–ø–ª–∞–π–Ω–∞")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
    client = RAGClient(backend_url)
    
    # –°–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤
    tests = [
        ("–ó–¥–æ—Ä–æ–≤—å–µ —Å–µ—Ä–≤–∏—Å–∞", lambda: test_rag_health(client)),
        ("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏", lambda: test_model_info(client)),
        ("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞–π–ø–ª–∞–π–Ω–∞", lambda: test_pipeline_stats(client)),
        ("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–π–ø–ª–∞–π–Ω–∞", lambda: test_pipeline_test(client, "–ö–∞–∫ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å —á–µ—Ä–µ–∑ QR-–∫–æ–¥?")),
        ("–†–µ–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å 1", lambda: test_real_query(client, "–ö–∞–∫ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å —á–µ—Ä–µ–∑ QR-–∫–æ–¥?", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç—Å—è —Å–ø–æ—Å–æ–±–∞–º–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è")),
        ("–†–µ–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å 2", lambda: test_real_query(client, "–ß—Ç–æ –¥–µ–ª–∞—Ç—å –µ—Å–ª–∏ —É–ø–∞–ª —Ä–µ–π—Ç–∏–Ω–≥?", "–ü—Ä–æ–±–ª–µ–º–∞ —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")),
        ("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏", lambda: test_search_config_update(client)),
    ]
    
    results = {}
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    for test_name, test_func in tests:
        try:
            print(f"\n{'='*20} {test_name} {'='*20}")
            results[test_name] = test_func()
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ '{test_name}': {e}")
            results[test_name] = False
    
    # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏
    print("\n" + "=" * 60)
    print("üìã –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 60)
    
    passed = 0
    total = len(results)
    
    for test_name, result in results.items():
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"{test_name}: {status}")
        if result:
            passed += 1
    
    print(f"\n–†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã")
    
    return results

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    import argparse
    
    parser = argparse.ArgumentParser(description="–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ RAG –ø–∞–π–ø–ª–∞–π–Ω–∞")
    parser.add_argument(
        "--backend-url", 
        default="http://localhost:3002",
        help="URL backend —Å–µ—Ä–≤–µ—Ä–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: http://localhost:3002)"
    )
    parser.add_argument(
        "--single-test",
        choices=["health", "model", "stats", "pipeline", "query", "config"],
        help="–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ç–µ—Å—Ç"
    )
    
    args = parser.parse_args()
    
    if args.single_test:
        # –ó–∞–ø—É—Å–∫ –æ–¥–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
        client = RAGClient(args.backend_url)
        
        if args.single_test == "health":
            test_rag_health(client)
        elif args.single_test == "model":
            test_model_info(client)
        elif args.single_test == "stats":
            test_pipeline_stats(client)
        elif args.single_test == "pipeline":
            test_pipeline_test(client, "–ö–∞–∫ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å —á–µ—Ä–µ–∑ QR-–∫–æ–¥?")
        elif args.single_test == "query":
            test_real_query(client, "–ö–∞–∫ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å —á–µ—Ä–µ–∑ QR-–∫–æ–¥?")
        elif args.single_test == "config":
            test_search_config_update(client)
    else:
        # –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
        run_all_tests(args.backend_url)

if __name__ == "__main__":
    main()
