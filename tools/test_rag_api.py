#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è RAG API
"""

import requests
import json
import sys

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API
API_BASE_URL = "http://158.160.169.147:3000"

def test_rag_health():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç health endpoint RAG API"""
    try:
        response = requests.get(f"{API_BASE_URL}/api/rag/health", timeout=10)
        if response.status_code == 200:
            data = response.json()
            print("‚úÖ RAG Health Check:")
            print(f"  Status: {data.get('data', {}).get('status', 'unknown')}")
            print(f"  Services: {data.get('data', {}).get('services', {})}")
            return True
        else:
            print(f"‚ùå RAG Health Check failed: {response.status_code}")
            print(f"  Response: {response.text}")
            return False
    except Exception as e:
        print(f"‚ùå RAG Health Check error: {e}")
        return False

def test_rag_query(question: str):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç RAG query endpoint"""
    try:
        payload = {"question": question}
        headers = {
            'Content-Type': 'application/json',
            'Accept': 'application/json'
        }
        
        print(f"\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å: '{question}'")
        
        response = requests.post(
            f"{API_BASE_URL}/api/rag/query",
            json=payload,
            headers=headers,
            timeout=30
        )
        
        print(f"  Status Code: {response.status_code}")
        print(f"  Headers: {dict(response.headers)}")
        
        if response.status_code == 200:
            data = response.json()
            print("‚úÖ RAG Query —É—Å–ø–µ—à–µ–Ω:")
            print(f"  Answer: {data.get('data', {}).get('answer', 'No answer')}")
            print(f"  Sources: {len(data.get('data', {}).get('sources', []))} –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤")
            return True
        else:
            print(f"‚ùå RAG Query failed: {response.status_code}")
            print(f"  Response: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå RAG Query error: {e}")
        return False

def test_backend_health():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±—â–∏–π health endpoint backend"""
    try:
        response = requests.get(f"{API_BASE_URL}/health", timeout=10)
        if response.status_code == 200:
            data = response.json()
            print("‚úÖ Backend Health Check:")
            print(f"  Status: {data.get('status', 'unknown')}")
            print(f"  Environment: {data.get('environment', 'unknown')}")
            print(f"  Redis: {data.get('redis', {}).get('status', 'unknown')}")
            return True
        else:
            print(f"‚ùå Backend Health Check failed: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Backend Health Check error: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ RAG API")
    print("=" * 50)
    
    # 1. –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—â–∏–π health backend
    print("\n1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Backend Health...")
    backend_ok = test_backend_health()
    
    # 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º RAG health
    print("\n2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ RAG Health...")
    rag_health_ok = test_rag_health()
    
    # 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º RAG –∑–∞–ø—Ä–æ—Å—ã
    if rag_health_ok:
        print("\n3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ RAG Queries...")
        
        test_questions = [
            "–ß—Ç–æ —Ç–∞–∫–æ–µ —Ç–µ—Å—Ç–æ–≤–∞—è —Å—Ç–∞—Ç—å—è?",
            "–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–∏—Å—Ç–µ–º–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏?",
            "–ö–∞–∫–∏–µ –µ—Å—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏?",
            "–ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –±–æ—Ç–∞?",
            "–ß—Ç–æ –¥–µ–ª–∞—Ç—å –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö?"
        ]
        
        success_count = 0
        for question in test_questions:
            if test_rag_query(question):
                success_count += 1
        
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
        print(f"  - Backend Health: {'‚úÖ' if backend_ok else '‚ùå'}")
        print(f"  - RAG Health: {'‚úÖ' if rag_health_ok else '‚ùå'}")
        print(f"  - RAG Queries: {success_count}/{len(test_questions)} —É—Å–ø–µ—à–Ω—ã—Ö")
        
        if success_count == len(test_questions):
            print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        elif success_count > 0:
            print("\n‚ö†Ô∏è  –ß–∞—Å—Ç–∏—á–Ω–æ —É—Å–ø–µ—à–Ω–æ - –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã")
        else:
            print("\n‚ùå –í—Å–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏")
    else:
        print("\n‚ùå RAG Health –Ω–µ –ø—Ä–æ—à–µ–ª, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤")

if __name__ == "__main__":
    main()
