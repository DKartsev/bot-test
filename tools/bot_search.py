import os
import json
import requests
from typing import Dict, List, Optional, Any

BACKEND_URL = os.environ.get("BACKEND_URL", "http://localhost:3002")

class RAGClient:
    """
    –ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å RAG –ø–∞–π–ø–ª–∞–π–Ω–æ–º
    """
    
    def __init__(self, backend_url: str = None):
        self.backend_url = backend_url or BACKEND_URL
        self.session = requests.Session()
        self.session.headers.update({
            'Content-Type': 'application/json',
            'User-Agent': 'RAG-Client/1.0'
        })

    def process_query(self, question: str, context: str = None, user_id: int = None, 
                     chat_id: int = None, language: str = "ru", options: Dict = None) -> Dict:
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ RAG –ø–∞–π–ø–ª–∞–π–Ω
        
        Args:
            question: –í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            context: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            chat_id: ID —á–∞—Ç–∞
            language: –Ø–∑—ã–∫ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä—É—Å—Å–∫–∏–π)
            options: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
            
        Returns:
            Dict —Å –æ—Ç–≤–µ—Ç–æ–º –æ—Ç RAG –ø–∞–π–ø–ª–∞–π–Ω–∞
        """
        payload = {
            "question": question,
            "context": context,
            "userId": user_id,
            "chatId": chat_id,
            "language": language,
            "options": options or {}
        }
        
        try:
            response = self.session.post(
                f"{self.backend_url}/api/rag/query",
                json=payload,
                timeout=120  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º timeout –¥–ª—è RAG –æ–±—Ä–∞–±–æ—Ç–∫–∏
            )
            response.raise_for_status()
            return response.json()
        except requests.RequestException as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ RAG API: {e}")
            return {"error": str(e), "success": False}

    def test_pipeline(self, test_query: str) -> Dict:
        """
        –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ RAG –ø–∞–π–ø–ª–∞–π–Ω–∞
        
        Args:
            test_query: –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            
        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        """
        payload = {"testQuery": test_query}
        
        try:
            response = self.session.post(
                f"{self.backend_url}/api/rag/test",
                json=payload,
                timeout=60
            )
            response.raise_for_status()
            return response.json()
        except requests.RequestException as e:
            print(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è RAG –ø–∞–π–ø–ª–∞–π–Ω–∞: {e}")
            return {"error": str(e), "success": False}

    def get_stats(self) -> Dict:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ RAG –ø–∞–π–ø–ª–∞–π–Ω–∞
        
        Returns:
            Dict —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        """
        try:
            response = self.session.get(
                f"{self.backend_url}/api/rag/stats",
                timeout=30
            )
            response.raise_for_status()
            return response.json()
        except requests.RequestException as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {"error": str(e), "success": False}

    def get_health(self) -> Dict:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è RAG —Å–µ—Ä–≤–∏—Å–∞
        
        Returns:
            Dict —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º –∑–¥–æ—Ä–æ–≤—å—è
        """
        try:
            response = self.session.get(
                f"{self.backend_url}/api/rag/health",
                timeout=30
            )
            response.raise_for_status()
            return response.json()
        except requests.RequestException as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è: {e}")
            return {"error": str(e), "success": False}

    def get_model_info(self) -> Dict:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥–µ–ª–∏
        
        Returns:
            Dict —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –º–æ–¥–µ–ª–∏
        """
        try:
            response = self.session.get(
                f"{self.backend_url}/api/rag/model-info",
                timeout=30
            )
            response.raise_for_status()
            return response.json()
        except requests.RequestException as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥–µ–ª–∏: {e}")
            return {"error": str(e), "success": False}

    def update_search_config(self, search_config: Dict) -> Dict:
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ–∏—Å–∫–∞
        
        Args:
            search_config: –ù–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞
            
        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        """
        payload = {"searchConfig": search_config}
        
        try:
            response = self.session.put(
                f"{self.backend_url}/api/rag/config",
                json=payload,
                timeout=30
            )
            response.raise_for_status()
            return response.json()
        except requests.RequestException as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            return {"error": str(e), "success": False}

# –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å - –æ—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Ñ—É–Ω–∫—Ü–∏—é
def bot_search_and_refine(question: str, draft: str, sources: list, lang: str = "ru"):
    """
    –£—Å—Ç–∞—Ä–µ–≤—à–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏.
    –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å RAGClient.process_query()
    """
    client = RAGClient()
    return client.process_query(
        question=question,
        context=f"–ß–µ—Ä–Ω–æ–≤–∏–∫: {draft}",
        language=lang,
        options={
            "targetLang": lang,
            "minConfidenceToEscalate": 0.55,
            "temperature": 0.3
        }
    )

def demo_rag_pipeline():
    """
    –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã RAG –ø–∞–π–ø–ª–∞–π–Ω–∞
    """
    client = RAGClient()
    
    print("üöÄ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è RAG –ø–∞–π–ø–ª–∞–π–Ω–∞")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ —Å–µ—Ä–≤–∏—Å–∞
    print("\n1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞:")
    health = client.get_health()
    print(json.dumps(health, ensure_ascii=False, indent=2))
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ–ª–∏
    print("\n2. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏:")
    model_info = client.get_model_info()
    print(json.dumps(model_info, ensure_ascii=False, indent=2))
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞–π–ø–ª–∞–π–Ω
    print("\n3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–π–ø–ª–∞–π–Ω–∞:")
    test_result = client.test_pipeline("–ö–∞–∫ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å —á–µ—Ä–µ–∑ QR-–∫–æ–¥?")
    print(json.dumps(test_result, ensure_ascii=False, indent=2))
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    print("\n4. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞–π–ø–ª–∞–π–Ω–∞:")
    stats = client.get_stats()
    print(json.dumps(stats, ensure_ascii=False, indent=2))
    
    # –ü—Ä–∏–º–µ—Ä —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    print("\n5. –ü—Ä–∏–º–µ—Ä —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞:")
    query_result = client.process_query(
        question="–ö–∞–∫ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å —á–µ—Ä–µ–∑ QR-–∫–æ–¥?",
        context="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç—Å—è —Å–ø–æ—Å–æ–±–∞–º–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è",
        user_id=123,
        chat_id=456,
        options={
            "temperature": 0.3,
            "maxTokens": 2000,
            "useHybridSearch": True
        }
    )
    print(json.dumps(query_result, ensure_ascii=False, indent=2))

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é
    demo_rag_pipeline()
    
    # –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    print("\n" + "=" * 50)
    print("–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏:")
    
    q = "–ö–∞–∫ –ø–æ–ø–æ–ª–Ω–∏—Ç—å —á–µ—Ä–µ–∑ QR-–∫–æ–¥?"
    d = "–ß–µ—Ä–Ω–æ–≤–∏–∫ –æ—Ç–≤–µ—Ç–∞ –∏–∑ –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞..."
    srcs = [{"id": "kb:qr_intro", "title": "QR-–æ–ø–ª–∞—Ç–∞", "url": "https://kb/qr"}]
    res = bot_search_and_refine(q, d, srcs)
    print(json.dumps(res, ensure_ascii=False, indent=2))
