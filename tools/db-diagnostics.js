#!/usr/bin/env node

const { Client } = require('pg');
const fs = require('fs');
const path = require('path');

class DatabaseDiagnostics {
  constructor() {
    this.client = null;
    this.config = this.loadConfig();
  }

  loadConfig() {
    // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
    const configSources = [
      process.env.DATABASE_URL,
      process.env.SUPABASE_URL ? this.buildSupabaseUrl() : null,
      this.loadFromFile('.env'),
      this.loadFromFile('docker.env'),
      this.loadFromFile('packages/backend/.env')
    ].filter(Boolean);

    if (configSources.length === 0) {
      console.log('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ë–î. –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env —Å –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π DATABASE_URL');
      return null;
    }

    const config = configSources[0];
    console.log('üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ë–î –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
    return config;
  }

  buildSupabaseUrl() {
    const url = process.env.SUPABASE_URL;
    const key = process.env.SUPABASE_KEY;
    if (url && key) {
      return url.replace('https://', 'postgresql://postgres:' + key + '@') + ':5432/postgres';
    }
    return null;
  }

  loadFromFile(filePath) {
    try {
      if (fs.existsSync(filePath)) {
        const content = fs.readFileSync(filePath, 'utf8');
        const match = content.match(/DATABASE_URL=(.+)/);
        if (match) {
          return match[1].trim();
        }
      }
    } catch (error) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
    }
    return null;
  }

  async connect() {
    if (!this.config) {
      throw new Error('–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ë–î –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }

    try {
      this.client = new Client({
        connectionString: this.config,
        ssl: this.config.includes('supabase') ? { rejectUnauthorized: false } : false
      });

      await this.client.connect();
      console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
      return true;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î:', error.message);
      return false;
    }
  }

  async disconnect() {
    if (this.client) {
      await this.client.end();
      console.log('üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –∑–∞–∫—Ä—ã—Ç–æ');
    }
  }

  async getDatabaseInfo() {
    try {
      console.log('\nüìä –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ë–î:');
      console.log('='.repeat(50));

      // –í–µ—Ä—Å–∏—è PostgreSQL
      const versionResult = await this.client.query('SELECT version()');
      console.log('PostgreSQL –≤–µ—Ä—Å–∏—è:', versionResult.rows[0].version);

      // –°–ø–∏—Å–æ–∫ —Å—Ö–µ–º
      const schemasResult = await this.client.query(`
        SELECT schema_name, schema_owner 
        FROM information_schema.schemata 
        WHERE schema_name NOT IN ('information_schema', 'pg_catalog', 'pg_toast')
        ORDER BY schema_name
      `);
      
      console.log('\nüìÅ –°—Ö–µ–º—ã –ë–î:');
      schemasResult.rows.forEach(row => {
        console.log(`  - ${row.schema_name} (–≤–ª–∞–¥–µ–ª–µ—Ü: ${row.schema_owner})`);
      });

      // –†–∞–∑–º–µ—Ä –ë–î
      const sizeResult = await this.client.query(`
        SELECT pg_size_pretty(pg_database_size(current_database())) as db_size
      `);
      console.log('\nüíæ –†–∞–∑–º–µ—Ä –ë–î:', sizeResult.rows[0].db_size);

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ë–î:', error.message);
    }
  }

  async getTablesInfo(schema = 'public') {
    try {
      console.log(`\nüóÇÔ∏è  –¢–ê–ë–õ–ò–¶–´ –í –°–•–ï–ú–ï '${schema}':`);
      console.log('='.repeat(50));

      const tablesResult = await this.client.query(`
        SELECT 
          table_name,
          table_type,
          (SELECT COUNT(*) FROM information_schema.columns WHERE table_schema = t.table_schema AND table_name = t.table_name) as columns_count
        FROM information_schema.tables t
        WHERE table_schema = $1
        ORDER BY table_name
      `, [schema]);

      if (tablesResult.rows.length === 0) {
        console.log(`  –ù–µ—Ç —Ç–∞–±–ª–∏—Ü –≤ —Å—Ö–µ–º–µ '${schema}'`);
        return;
      }

      tablesResult.rows.forEach(row => {
        console.log(`  üìã ${row.table_name} (${row.table_type}, –∫–æ–ª–æ–Ω–æ–∫: ${row.columns_count})`);
      });

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–∞–±–ª–∏—Ü–∞—Ö:', error.message);
    }
  }

  async getTableStructure(tableName, schema = 'public') {
    try {
      console.log(`\nüîç –°–¢–†–£–ö–¢–£–†–ê –¢–ê–ë–õ–ò–¶–´ '${schema}.${tableName}':`);
      console.log('='.repeat(50));

      const columnsResult = await this.client.query(`
        SELECT 
          column_name,
          data_type,
          is_nullable,
          column_default,
          character_maximum_length
        FROM information_schema.columns
        WHERE table_schema = $1 AND table_name = $2
        ORDER BY ordinal_position
      `, [schema, tableName]);

      if (columnsResult.rows.length === 0) {
        console.log(`  –¢–∞–±–ª–∏—Ü–∞ '${schema}.${tableName}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
        return;
      }

      console.log('  –ö–æ–ª–æ–Ω–∫–∏:');
      columnsResult.rows.forEach(col => {
        const nullable = col.is_nullable === 'YES' ? 'NULL' : 'NOT NULL';
        const length = col.character_maximum_length ? `(${col.character_maximum_length})` : '';
        const defaultValue = col.column_default ? ` DEFAULT ${col.column_default}` : '';
        console.log(`    - ${col.column_name}: ${col.data_type}${length} ${nullable}${defaultValue}`);
      });

      // –ò–Ω–¥–µ–∫—Å—ã
      const indexesResult = await this.client.query(`
        SELECT 
          indexname,
          indexdef
        FROM pg_indexes
        WHERE schemaname = $1 AND tablename = $2
        ORDER BY indexname
      `, [schema, tableName]);

      if (indexesResult.rows.length > 0) {
        console.log('\n  üîë –ò–Ω–¥–µ–∫—Å—ã:');
        indexesResult.rows.forEach(idx => {
          console.log(`    - ${idx.indexname}: ${idx.indexdef}`);
        });
      }

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã:', error.message);
    }
  }

  async getTableData(tableName, schema = 'public', limit = 5) {
    try {
      console.log(`\nüìä –î–ê–ù–ù–´–ï –¢–ê–ë–õ–ò–¶–´ '${schema}.${tableName}' (–ø–µ—Ä–≤—ã–µ ${limit} –∑–∞–ø–∏—Å–µ–π):`);
      console.log('='.repeat(50));

      const countResult = await this.client.query(`
        SELECT COUNT(*) as total_count
        FROM ${schema}.${tableName}
      `);
      
      const totalCount = countResult.rows[0].total_count;
      console.log(`  –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: ${totalCount}`);

      if (totalCount === 0) {
        console.log('  –¢–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞');
        return;
      }

      const dataResult = await this.client.query(`
        SELECT * FROM ${schema}.${tableName}
        ORDER BY created_at DESC, id DESC
        LIMIT $1
      `, [limit]);

      console.log('\n  –ü—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö:');
      dataResult.rows.forEach((row, index) => {
        console.log(`\n  –ó–∞–ø–∏—Å—å ${index + 1}:`);
        Object.entries(row).forEach(([key, value]) => {
          const displayValue = value === null ? 'NULL' : 
                             typeof value === 'string' && value.length > 100 ? 
                             value.substring(0, 100) + '...' : value;
          console.log(`    ${key}: ${displayValue}`);
        });
      });

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü—ã:', error.message);
    }
  }

  async getSupportSchemaInfo() {
    try {
      console.log('\nüéØ –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –°–•–ï–ú–ï SUPPORT:');
      console.log('='.repeat(50));

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å—Ö–µ–º—ã support
      const schemaExists = await this.client.query(`
        SELECT EXISTS(
          SELECT 1 FROM information_schema.schemata 
          WHERE schema_name = 'support'
        )
      `);

      if (!schemaExists.rows[0].exists) {
        console.log('  ‚ùå –°—Ö–µ–º–∞ "support" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        return;
      }

      console.log('  ‚úÖ –°—Ö–µ–º–∞ "support" —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');

      // –ü–æ–ª—É—á–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –≤ —Å—Ö–µ–º–µ support
      await this.getTablesInfo('support');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Ç–∞–±–ª–∏—Ü—ã
      const keyTables = ['chats', 'messages', 'users', 'operators'];
      for (const table of keyTables) {
        try {
          const exists = await this.client.query(`
            SELECT EXISTS(
              SELECT 1 FROM information_schema.tables 
              WHERE table_schema = 'support' AND table_name = $1
            )
          `, [table]);

          if (exists.rows[0].exists) {
            const count = await this.client.query(`SELECT COUNT(*) FROM support.${table}`);
            console.log(`  üìä ${table}: ${count.rows[0].count} –∑–∞–ø–∏—Å–µ–π`);
          } else {
            console.log(`  ‚ùå ${table}: —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
          }
        } catch (error) {
          console.log(`  ‚ö†Ô∏è  ${table}: –æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏`);
        }
      }

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ö–µ–º–µ support:', error.message);
    }
  }

  async runDiagnostics() {
    try {
      console.log('üöÄ –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ë–î...\n');

      if (!await this.connect()) {
        return;
      }

      // –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
      await this.getDatabaseInfo();

      // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ö–µ–º–µ support
      await this.getSupportSchemaInfo();

      // –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–ª—é—á–µ–≤—ã—Ö —Ç–∞–±–ª–∏—Ü
      const keyTables = ['chats', 'messages', 'users', 'operators'];
      for (const table of keyTables) {
        try {
          await this.getTableStructure(table, 'support');
          await this.getTableData(table, 'support', 3);
        } catch (error) {
          console.log(`  ‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–∞–±–ª–∏—Ü—É ${table} –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏`);
        }
      }

      console.log('\n‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');

    } catch (error) {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
    } finally {
      await this.disconnect();
    }
  }

  async runCustomQuery(query, params = []) {
    try {
      if (!await this.connect()) {
        return;
      }

      console.log(`\nüîç –í–´–ü–û–õ–ù–ï–ù–ò–ï –ó–ê–ü–†–û–°–ê:`);
      console.log('='.repeat(50));
      console.log('SQL:', query);
      if (params.length > 0) {
        console.log('–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:', params);
      }
      console.log('='.repeat(50));

      const result = await this.client.query(query, params);
      
      console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç (${result.rows.length} –∑–∞–ø–∏—Å–µ–π):`);
      if (result.rows.length > 0) {
        console.table(result.rows);
      } else {
        console.log('  –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö');
      }

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞:', error.message);
    } finally {
      await this.disconnect();
    }
  }
}

// CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
async function main() {
  const args = process.argv.slice(2);
  const diagnostics = new DatabaseDiagnostics();

  if (args.length === 0) {
    // –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    await diagnostics.runDiagnostics();
  } else if (args[0] === 'query' && args[1]) {
    // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    const query = args[1];
    const params = args.slice(2);
    await diagnostics.runCustomQuery(query, params);
  } else if (args[0] === 'tables') {
    // –ü–æ–∫–∞–∑–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã
    if (await diagnostics.connect()) {
      await diagnostics.getTablesInfo('support');
      await diagnostics.disconnect();
    }
  } else if (args[0] === 'structure' && args[1]) {
    // –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
    if (await diagnostics.connect()) {
      await diagnostics.getTableStructure(args[1], 'support');
      await diagnostics.disconnect();
    }
  } else if (args[0] === 'data' && args[1]) {
    // –ü–æ–∫–∞–∑–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
    if (await diagnostics.connect()) {
      await diagnostics.getTableData(args[1], 'support', 10);
      await diagnostics.disconnect();
    }
  } else {
    console.log(`
üìã –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï –°–ö–†–ò–ü–¢–ê –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò –ë–î:

  node tools/db-diagnostics.js                    # –ü–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
  node tools/db-diagnostics.js tables            # –ü–æ–∫–∞–∑–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã –≤ —Å—Ö–µ–º–µ support
  node tools/db-diagnostics.js structure chats   # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã chats
  node tools/db-diagnostics.js data chats        # –î–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã chats (10 –∑–∞–ø–∏—Å–µ–π)
  node tools/db-diagnostics.js query "SELECT * FROM support.chats LIMIT 5"  # –ö–∞—Å—Ç–æ–º–Ω—ã–π –∑–∞–ø—Ä–æ—Å

üîß –ù–ê–°–¢–†–û–ô–ö–ê:
  –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞ —Å –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π:
  DATABASE_URL=postgresql://user:password@host:port/database

  –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:
  - SUPABASE_URL –∏ SUPABASE_KEY –¥–ª—è Supabase
  - DATABASE_URL –¥–ª—è –ø—Ä—è–º–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL
    `);
  }
}

if (require.main === module) {
  main().catch(console.error);
}

module.exports = DatabaseDiagnostics;
