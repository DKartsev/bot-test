const { createClient } = require('@supabase/supabase-js');

async function checkConversationsStructure() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã conversations...');
  
  const supabase = createClient(
    process.env.SUPABASE_URL,
    process.env.SUPABASE_SERVICE_ROLE_KEY
  );
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã conversations
    const { data: conversations, error: conversationsError } = await supabase
      .from('conversations')
      .select('*')
      .limit(3);
    
    if (conversationsError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ conversations:', conversationsError);
      return;
    }
    
    console.log('üìä –ù–∞–π–¥–µ–Ω–æ conversations:', conversations.length);
    
    if (conversations.length > 0) {
      console.log('\nüìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã conversations:');
      const firstConversation = conversations[0];
      Object.keys(firstConversation).forEach(key => {
        const value = firstConversation[key];
        const type = typeof value;
        const preview = type === 'string' ? value.substring(0, 50) + '...' : value;
        console.log(`   - ${key}: ${type} = ${preview}`);
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É messages
    const { data: messages, error: messagesError } = await supabase
      .from('messages')
      .select('*')
      .limit(3);
    
    if (messagesError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ messages:', messagesError);
    } else {
      console.log('\nüìä –ù–∞–π–¥–µ–Ω–æ messages:', messages.length);
      
      if (messages.length > 0) {
        console.log('\nüìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã messages:');
        const firstMessage = messages[0];
        Object.keys(firstMessage).forEach(key => {
          const value = firstMessage[key];
          const type = typeof value;
          const preview = type === 'string' ? value.substring(0, 50) + '...' : value;
          console.log(`   - ${key}: ${type} = ${preview}`);
        });
      }
    }
    
  } catch (err) {
    console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞:', err.message);
  }
}

checkConversationsStructure();
