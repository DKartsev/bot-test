// –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞ –Ω–∞ VM
const { exec } = require('child_process');
const { promisify } = require('util');

const execAsync = promisify(exec);

async function checkVMStatus() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞ –Ω–∞ VM...\n');

  try {
    // –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ VM
    const commands = [
      'docker-compose ps',
      'docker logs bot-test_bot-backend_1 --tail 20',
      'docker exec bot-test_bot-backend_1 node /app/test-bot-direct.cjs'
    ];

    for (const cmd of commands) {
      console.log(`\nüìã –í—ã–ø–æ–ª–Ω—è–µ–º: ${cmd}`);
      console.log('‚îÄ'.repeat(50));
      
      try {
        const { stdout, stderr } = await execAsync(`ssh -l dankartsev 158.160.197.7 "cd /home/dankartsev/bot-test && ${cmd}"`);
        
        if (stdout) {
          console.log(stdout);
        }
        if (stderr) {
          console.log('‚ö†Ô∏è Stderr:', stderr);
        }
      } catch (error) {
        console.log('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã:', error.message);
      }
    }

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
  }
}

checkVMStatus().catch(console.error);
