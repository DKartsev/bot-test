const { db } = require('./packages/backend/dist/database/connection');

async function checkDatabase() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
    const tablesResult = await db.query(`
      SELECT table_name 
      FROM information_schema.tables 
      WHERE table_schema = 'public'
      ORDER BY table_name
    `);
    
    console.log('üìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã:');
    tablesResult.rows.forEach(row => {
      console.log(`  - ${row.table_name}`);
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É operators
    if (tablesResult.rows.some(r => r.table_name === 'operators')) {
      console.log('\nüë• –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É operators...');
      const operatorsResult = await db.query('SELECT COUNT(*) as count FROM operators');
      console.log(`  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤: ${operatorsResult.rows[0].count}`);
      
      if (parseInt(operatorsResult.rows[0].count) > 0) {
        const operators = await db.query('SELECT id, name, email, role, is_active FROM operators LIMIT 5');
        console.log('  –ü–µ—Ä–≤—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã:');
        operators.rows.forEach(op => {
          console.log(`    ID: ${op.id}, –ò–º—è: ${op.name}, Email: ${op.email}, –†–æ–ª—å: ${op.role}, –ê–∫—Ç–∏–≤–µ–Ω: ${op.is_active}`);
        });
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É chats
    if (tablesResult.rows.some(r => r.table_name === 'chats')) {
      console.log('\nüí¨ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É chats...');
      const chatsResult = await db.query('SELECT COUNT(*) as count FROM chats');
      console.log(`  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Ç–æ–≤: ${chatsResult.rows[0].count}`);
    }
    
    console.log('\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    process.exit(0);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ë–î:', error);
    process.exit(1);
  }
}

checkDatabase();
