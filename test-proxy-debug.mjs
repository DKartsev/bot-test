import { HttpsProxyAgent } from 'https-proxy-agent';
import OpenAI from 'openai';

async function testProxy() {
  console.log('üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∫—Å–∏ –≤ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ...');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
  console.log('üìã –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:');
  console.log('OPENAI_PROXY_URL:', process.env.OPENAI_PROXY_URL);
  console.log('HTTPS_PROXY:', process.env.HTTPS_PROXY);
  console.log('HTTP_PROXY:', process.env.HTTP_PROXY);
  
  // –í—ã–±–∏—Ä–∞–µ–º –ø—Ä–æ–∫—Å–∏ URL
  const proxyUrl = process.env.OPENAI_PROXY_URL || process.env.HTTPS_PROXY || process.env.HTTP_PROXY;
  console.log('üéØ –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –ø—Ä–æ–∫—Å–∏ URL:', proxyUrl);
  
  if (!proxyUrl) {
    console.error('‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.');
    return;
  }
  
  // –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç
  const agent = new HttpsProxyAgent(proxyUrl);
  console.log('‚úÖ HttpsProxyAgent —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ');
  
  // –°–æ–∑–¥–∞–µ–º OpenAI –∫–ª–∏–µ–Ω—Ç
  const openai = new OpenAI({
    apiKey: process.env.OPENAI_API_KEY,
    baseURL: 'https://api.openai.com/v1',
    httpAgent: agent,
  });
  
  console.log('ü§ñ OpenAI –∫–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω —Å –ø—Ä–æ–∫—Å–∏');
  
  try {
    console.log('üåê –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ OpenAI —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏...');
    const response = await openai.chat.completions.create({
      model: 'gpt-4o-mini',
      messages: [{ role: 'user', content: 'Hello from Docker container via proxy' }],
      max_tokens: 50,
    });
    
    console.log('‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω –æ—Ç OpenAI:', response.choices[0].message.content);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ OpenAI —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏:');
    if (error.response) {
      console.log('üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', error.response.status);
      console.log('üìã –ó–∞–≥–æ–ª–æ–≤–∫–∏:', error.response.headers);
      console.log('‚ùå –û—à–∏–±–∫–∞:', error.response.data);
    } else {
      console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    }
  }
}

testProxy();
