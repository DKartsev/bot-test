version: '3.8'

# Backend сервисы на основном диске
networks:
  backend-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:

services:
  # PostgreSQL База данных
  postgres:
    image: postgres:15-alpine
    container_name: backend_postgres
    environment:
      POSTGRES_DB: bot_db
      POSTGRES_USER: bot_user  
      POSTGRES_PASSWORD: bot_password
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - backend-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U bot_user -d bot_db"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Redis
  redis:
    image: redis:7-alpine
    container_name: backend_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - backend-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Backend API
  bot-backend:
    build:
      context: .
      dockerfile: Dockerfile.backend.simple
      args:
        NODE_ENV: development
    container_name: backend_api
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://bot_user:bot_password@postgres:5432/bot_db
      - REDIS_URL=redis://redis:6379
      - PORT=3000
    volumes:
      - ./src:/app/src
      - ./packages/backend/src:/app/packages/backend/src
      - ./packages/shared/src:/app/packages/shared/src
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - backend-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s
