// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
require('dotenv').config();

const { createClient } = require('@supabase/supabase-js');
const { HttpsProxyAgent } = require('https-proxy-agent');
const OpenAI = require('openai');

async function testBotDirect() {
  console.log('ü§ñ –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–æ—Ç–∞ –Ω–∞–ø—Ä—è–º—É—é...');
  
  const supabase = createClient(
    process.env.SUPABASE_URL,
    process.env.SUPABASE_SERVICE_ROLE_KEY
  );
  
  const openai = new OpenAI({
    apiKey: process.env.OPENAI_API_KEY,
    baseURL: process.env.OPENAI_BASE_URL || 'https://api.openai.com/v1',
    httpAgent: process.env.OPENAI_PROXY_URL ? new HttpsProxyAgent(process.env.OPENAI_PROXY_URL) : undefined,
  });
  
  try {
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π
    console.log('üìä –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π...');
    
    const testQuery = "–∫–∞–∫ –æ—Ç–∫—Ä—ã—Ç—å —Å–¥–µ–ª–∫—É";
    console.log(`üîç –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: "${testQuery}"`);
    
    // –°–æ–∑–¥–∞–µ–º embedding –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    const embeddingResponse = await openai.embeddings.create({
      model: "text-embedding-3-small",
      input: testQuery,
    });
    
    const queryEmbedding = embeddingResponse.data[0].embedding;
    console.log(`üìä Embedding —Å–æ–∑–¥–∞–Ω, —Ä–∞–∑–º–µ—Ä: ${queryEmbedding.length}`);
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π
    const { data: chunks, error: chunksError } = await supabase
      .from('kb_chunks')
      .select(`
        id,
        article_id,
        chunk_index,
        chunk_text,
        embedding
      `)
      .not('embedding', 'is', null)
      .limit(10);
    
    if (chunksError) {
      throw new Error(`Supabase –æ—à–∏–±–∫–∞: ${chunksError.message}`);
    }
    
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ —á–∞–Ω–∫–æ–≤ —Å embeddings: ${chunks.length}`);
    
    if (chunks.length === 0) {
      console.log('‚ùå –ù–µ—Ç —á–∞–Ω–∫–æ–≤ —Å embeddings –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π');
      return;
    }
    
    // –í—ã—á–∏—Å–ª—è–µ–º similarity –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–∞–Ω–∫–∞
    const resultsWithSimilarity = chunks.map(chunk => {
      let similarity = 0;
      
      try {
        // –ü–∞—Ä—Å–∏–º embedding –∏–∑ JSON —Å—Ç—Ä–æ–∫–∏
        const chunkEmbedding = typeof chunk.embedding === 'string' 
          ? JSON.parse(chunk.embedding) 
          : chunk.embedding;
        
        if (Array.isArray(chunkEmbedding) && chunkEmbedding.length === queryEmbedding.length) {
          // –í—ã—á–∏—Å–ª—è–µ–º cosine similarity
          const dotProduct = queryEmbedding.reduce((sum, val, i) => sum + val * chunkEmbedding[i], 0);
          const queryNorm = Math.sqrt(queryEmbedding.reduce((sum, val) => sum + val * val, 0));
          const chunkNorm = Math.sqrt(chunkEmbedding.reduce((sum, val) => sum + val * val, 0));
          
          if (queryNorm > 0 && chunkNorm > 0) {
            similarity = dotProduct / (queryNorm * chunkNorm);
          }
        }
      } catch (e) {
        console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ embedding –¥–ª—è —á–∞–Ω–∫–∞ ${chunk.id}: ${e.message}`);
      }
      
      return {
        ...chunk,
        similarity
      };
    });
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ similarity
    const sortedResults = resultsWithSimilarity
      .sort((a, b) => b.similarity - a.similarity);
    
    console.log('\nüìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:');
    sortedResults.forEach((result, i) => {
      console.log(`\n${i+1}. –ß–∞–Ω–∫ ID: ${result.id}`);
      console.log(`   Similarity: ${result.similarity.toFixed(4)}`);
      console.log(`   –¢–µ–∫—Å—Ç: ${result.chunk_text ? result.chunk_text.substring(0, 100) : 'N/A'}...`);
    });
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç–≤–µ—Ç–∞ —Å –Ω–∏–∑–∫–∏–º –ø–æ—Ä–æ–≥–æ–º
    console.log('\nü§ñ –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç–≤–µ—Ç–∞ —Å –Ω–∏–∑–∫–∏–º –ø–æ—Ä–æ–≥–æ–º...');
    
    const contextChunks = sortedResults.slice(0, 3).map(r => r.chunk_text);
    const prompt = `–ö–æ–Ω—Ç–µ–∫—Å—Ç:\n${contextChunks.join('\n\n')}\n\n–í–æ–ø—Ä–æ—Å: ${testQuery}\n\n–û—Ç–≤–µ—Ç:`;
    
    console.log('üìù –ü—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:');
    console.log(prompt.substring(0, 200) + '...');
    
    const response = await openai.chat.completions.create({
      model: "gpt-4o-mini",
      messages: [
        { 
          role: "system", 
          content: "–¢—ã - –ø–æ–º–æ—â–Ω–∏–∫ —Å–ª—É–∂–±—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏. –û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤. –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, —Å–∫–∞–∂–∏ –æ–± —ç—Ç–æ–º." 
        },
        { role: "user", content: prompt }
      ],
      max_tokens: 500,
      temperature: 0.3,
    });
    
    console.log('\n‚úÖ –û—Ç–≤–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω:');
    console.log(response.choices[0].message.content);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –±–æ—Ç–∞:', error.message);
  }
}

testBotDirect();
