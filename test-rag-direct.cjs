// –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç RAG —Å–µ—Ä–≤–∏—Å–∞ –±–µ–∑ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏
const { createClient } = require('@supabase/supabase-js');
const { HttpsProxyAgent } = require('https-proxy-agent');
const fetch = require('node-fetch');

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
require('dotenv').config();

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
const SUPABASE_URL = process.env.SUPABASE_URL;
const SUPABASE_SERVICE_ROLE_KEY = process.env.SUPABASE_SERVICE_ROLE_KEY;
const OPENAI_API_KEY = process.env.OPENAI_API_KEY;
const OPENAI_PROXY_URL = process.env.OPENAI_PROXY_URL || 'http://aUGIll6zoH:KFu2uvbHBx@193.233.115.178:11403';

async function testRAGService() {
  console.log('üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ RAG —Å–µ—Ä–≤–∏—Å–∞...\n');

  try {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase
    const supabase = createClient(SUPABASE_URL, SUPABASE_SERVICE_ROLE_KEY);
    console.log('‚úÖ Supabase –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–∫—Å–∏ –¥–ª—è OpenAI
    const proxyAgent = new HttpsProxyAgent(OPENAI_PROXY_URL);
    console.log('‚úÖ HTTP –ø—Ä–æ–∫—Å–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');

    // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase
    console.log('\nüìä –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase...');
    const { data: testData, error: testError } = await supabase
      .from('kb_chunks')
      .select('id, chunk_text')
      .limit(1);

    if (testError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase:', testError.message);
      return;
    }
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase —Ä–∞–±–æ—Ç–∞–µ—Ç');

    // –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ OpenAI API
    console.log('\nü§ñ –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ OpenAI API...');
    try {
      const response = await fetch('https://api.openai.com/v1/models', {
        headers: {
          'Authorization': `Bearer ${OPENAI_API_KEY}`,
        },
        agent: proxyAgent,
      });

      if (response.ok) {
        console.log('‚úÖ OpenAI API –¥–æ—Å—Ç—É–ø–µ–Ω');
      } else {
        console.log('‚ùå OpenAI API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', response.status, response.statusText);
      }
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ OpenAI:', error.message);
    }

    // –¢–µ—Å—Ç 3: –°–æ–∑–¥–∞–Ω–∏–µ embeddings
    console.log('\nüîÆ –¢–µ—Å—Ç 3: –°–æ–∑–¥–∞–Ω–∏–µ embeddings...');
    const testQuestion = '–∫–∞–∫ –æ—Ç–∫—Ä—ã—Ç—å —Å–¥–µ–ª–∫—É';
    
    try {
      const embeddingResponse = await fetch('https://api.openai.com/v1/embeddings', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${OPENAI_API_KEY}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          model: 'text-embedding-3-small',
          input: testQuestion,
        }),
        agent: proxyAgent,
      });

      if (embeddingResponse.ok) {
        const embeddingData = await embeddingResponse.json();
        const embedding = embeddingData.data[0]?.embedding;
        console.log('‚úÖ Embeddings —Å–æ–∑–¥–∞–Ω—ã, —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å:', embedding?.length);
        
        // –¢–µ—Å—Ç 4: –ü–æ–∏—Å–∫ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π
        console.log('\nüîç –¢–µ—Å—Ç 4: –ü–æ–∏—Å–∫ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π...');
        const { data: chunks, error: chunksError } = await supabase
          .from('kb_chunks')
          .select('id, chunk_text, embedding, chunk_index, article_id')
          .not('embedding', 'is', null)
          .limit(10);

        if (chunksError) {
          console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π:', chunksError.message);
          return;
        }

        console.log('‚úÖ –ù–∞–π–¥–µ–Ω–æ —á–∞–Ω–∫–æ–≤ —Å embeddings:', chunks.length);

        if (chunks.length > 0) {
          // –í—ã—á–∏—Å–ª—è–µ–º similarity –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —á–∞–Ω–∫–∞
          const firstChunk = chunks[0];
          let similarity = 0;
          
          try {
            const chunkEmbedding = typeof firstChunk.embedding === 'string' 
              ? JSON.parse(firstChunk.embedding) 
              : firstChunk.embedding;
            
            if (Array.isArray(chunkEmbedding) && chunkEmbedding.length === embedding.length) {
              const dotProduct = embedding.reduce((sum, val, i) => sum + val * chunkEmbedding[i], 0);
              const queryNorm = Math.sqrt(embedding.reduce((sum, val) => sum + val * val, 0));
              const chunkNorm = Math.sqrt(chunkEmbedding.reduce((sum, val) => sum + val * val, 0));
              
              if (queryNorm > 0 && chunkNorm > 0) {
                similarity = dotProduct / (queryNorm * chunkNorm);
              }
            }
          } catch (e) {
            console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ embedding:', e.message);
          }

          console.log('üìä Similarity —Å –ø–µ—Ä–≤—ã–º —á–∞–Ω–∫–æ–º:', similarity.toFixed(3));
          console.log('üìù –¢–µ–∫—Å—Ç –ø–µ—Ä–≤–æ–≥–æ —á–∞–Ω–∫–∞:', firstChunk.chunk_text.substring(0, 100) + '...');
        }

      } else {
        console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è embeddings:', embeddingResponse.status, embeddingResponse.statusText);
      }
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ embeddings:', error.message);
    }

    console.log('\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testRAGService().catch(console.error);
