// –¢–µ—Å—Ç —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ RAG —Å–µ—Ä–≤–∏—Å–∞
const { SupabaseRAGService } = require('./packages/backend/dist/services/supabaseRAGService.js');

require('dotenv').config();

async function testRAGImprovements() {
  console.log('üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ RAG —Å–µ—Ä–≤–∏—Å–∞...\n');

  try {
    const ragService = new SupabaseRAGService();
    
    // –¢–µ—Å—Ç–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã
    const testQuestions = [
      '–∫–∞–∫ –æ—Ç–∫—Ä—ã—Ç—å —Å–¥–µ–ª–∫—É',
      '–∫–∞–∫–∏–µ –µ—Å—Ç—å —Å–ø–æ—Å–æ–±—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å—á–µ—Ç–∞',
      '–∫–∞–∫ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π',
      '—á—Ç–æ —Ç–∞–∫–æ–µ —Å—Ç–æ–ø-–ª–æ—Å—Å',
      '–∫–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'
    ];

    for (const question of testQuestions) {
      console.log(`\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å: "${question}"`);
      console.log('‚îÄ'.repeat(60));

      const startTime = Date.now();
      
      const result = await ragService.testPipeline(question);
      
      const totalTime = Date.now() - startTime;

      if (result.success) {
        console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω');
        console.log(`üìù –û—Ç–≤–µ—Ç: ${result.response.answer.substring(0, 200)}...`);
        console.log(`üìä –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${(result.response.confidence * 100).toFixed(1)}%`);
        console.log(`üîç –ù–∞–π–¥–µ–Ω–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: ${result.response.sources.length}`);
        console.log(`‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${totalTime}ms`);
        
        if (result.response.sources.length > 0) {
          console.log('\nüìö –¢–æ–ø-3 –∏—Å—Ç–æ—á–Ω–∏–∫–∞:');
          result.response.sources.slice(0, 3).forEach((source, i) => {
            console.log(`  ${i+1}. Similarity: ${source.score.toFixed(3)} | ${source.content.substring(0, 80)}...`);
          });
        }
      } else {
        console.log('‚ùå –û—à–∏–±–∫–∞:', result.error);
      }

      // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
      await new Promise(resolve => setTimeout(resolve, 1000));
    }

    console.log('\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    console.log('\nüìä –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏ RAG –∑–∞–ø—Ä–æ—Å–æ–≤...');
    const { createClient } = require('@supabase/supabase-js');
    const supabase = createClient(
      process.env.SUPABASE_URL,
      process.env.SUPABASE_SERVICE_ROLE_KEY
    );

    const { data: logs, error } = await supabase
      .from('rag_logs')
      .select('*')
      .order('created_at', { ascending: false })
      .limit(5);

    if (error) {
      console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤:', error.message);
    } else {
      console.log(`üìà –ù–∞–π–¥–µ–Ω–æ ${logs.length} –∑–∞–ø–∏—Å–µ–π –≤ –ª–æ–≥–∞—Ö:`);
      logs.forEach((log, i) => {
        console.log(`  ${i+1}. ${log.question_text?.substring(0, 50)}... | ${log.total_time_ms}ms | ${(log.confidence * 100).toFixed(1)}%`);
      });
    }

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
  }
}

testRAGImprovements().catch(console.error);
