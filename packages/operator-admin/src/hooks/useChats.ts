import { useState, useEffect, useCallback, useRef } from 'react';
import { Chat, Message, FilterOptions } from '../types';
import apiClient from '../lib/api';

// Fallback –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
const FALLBACK_CHATS: Chat[] = [
  {
    id: 1,
    user: {
      id: 1,
      telegram_id: 123456789,
      username: 'test_user',
      first_name: '–¢–µ—Å—Ç–æ–≤—ã–π',
      last_name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
      balance: 1000,
      deals_count: 5,
      flags: [],
      is_blocked: false,
      is_verified: true,
      created_at: new Date().toISOString(),
      last_activity: new Date().toISOString()
    },
    last_message: {
      id: 1,
      chat_id: 1,
      author_type: 'user',
      author_id: 1,
      text: '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –£ –º–µ–Ω—è –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ –∑–∞–∫–∞–∑—É.',
      timestamp: new Date().toISOString(),
      is_read: false,
      metadata: {
        source: 'telegram',
        channel: 'telegram'
      }
    },
    status: 'waiting',
    priority: 'medium',
    source: 'telegram',
    is_pinned: false,
    is_important: false,
    unread_count: 1,
    created_at: new Date().toISOString(),
    updated_at: new Date().toISOString(),
    tags: ['–∑–∞–∫–∞–∑', '–≤–æ–ø—Ä–æ—Å']
  },
  {
    id: 2,
    user: {
      id: 2,
      telegram_id: 987654321,
      username: 'support_user',
      first_name: '–ü–æ–¥–¥–µ—Ä–∂–∫–∞',
      last_name: '–ö–ª–∏–µ–Ω—Ç',
      balance: 500,
      deals_count: 2,
      flags: [],
      is_blocked: false,
      is_verified: true,
      created_at: new Date().toISOString(),
      last_activity: new Date().toISOString()
    },
    last_message: {
      id: 2,
      chat_id: 2,
      author_type: 'operator',
      author_id: 1,
      text: '–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ! –ú—ã —Ä–µ—à–∏–º –≤–∞—à –≤–æ–ø—Ä–æ—Å.',
      timestamp: new Date().toISOString(),
      is_read: true,
      metadata: {
        source: 'telegram',
        channel: 'telegram'
      }
    },
    status: 'in_progress',
    priority: 'high',
    source: 'telegram',
    operator_id: 1,
    is_pinned: true,
    is_important: true,
    unread_count: 0,
    created_at: new Date().toISOString(),
    updated_at: new Date().toISOString(),
    tags: ['–ø–æ–¥–¥–µ—Ä–∂–∫–∞', '–∞–∫—Ç–∏–≤–Ω–æ']
  }
];

export function useChats() {
  const [chats, setChats] = useState<Chat[]>([]);
  const [selectedChatId, setSelectedChatId] = useState<number | null>(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [filters, setFilters] = useState<FilterOptions>({});
  const [hasMore, setHasMore] = useState(true);
  const [page, setPage] = useState(1);
  const [isInitialized, setIsInitialized] = useState(false);
  const [useFallbackData, setUseFallbackData] = useState(false);
  
  // WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
  const wsRef = useRef<any | null>(null);
  const reconnectTimeoutRef = useRef<NodeJS.Timeout | null>(null);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  const initializeWebSocket = useCallback(() => {
    try {
      const wsUrl = process.env.NEXT_PUBLIC_WS_URL || 'ws://localhost:3000/ws';
      const ws = new (globalThis as any).WebSocket(wsUrl);
      
      ws.onopen = () => {
        console.log('WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω');
        setError(null);
      };
      
      ws.onmessage = (event) => {
        try {
          const data = JSON.parse(event.data);
          handleWebSocketMessage(data);
        } catch (err) {
          console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ WebSocket —Å–æ–æ–±—â–µ–Ω–∏—è:', err);
        }
      };
      
      ws.onclose = () => {
        console.log('WebSocket –æ—Ç–∫–ª—é—á–µ–Ω');
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        if (reconnectTimeoutRef.current) {
          clearTimeout(reconnectTimeoutRef.current);
        }
        reconnectTimeoutRef.current = setTimeout(initializeWebSocket, 5000);
      };
      
      ws.onerror = (error) => {
        console.error('WebSocket –æ—à–∏–±–∫–∞:', error);
        setError('–û—à–∏–±–∫–∞ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è');
      };
      
      wsRef.current = ws;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ WebSocket:', error);
    }
  }, []);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ WebSocket —Å–æ–æ–±—â–µ–Ω–∏–π
  const handleWebSocketMessage = useCallback((data: any) => {
    switch (data.type) {
      case 'new_message':
        handleNewMessage(data.data);
        break;
      case 'chat_status_change':
        handleChatStatusChange(data.data);
        break;
      case 'chat_update':
        handleChatUpdate(data.data);
        break;
      case 'operator_status_change':
        handleOperatorStatusChange(data.data);
        break;
      default:
        console.log('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø WebSocket —Å–æ–æ–±—â–µ–Ω–∏—è:', data.type);
    }
  }, []);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
  const handleNewMessage = useCallback(({ chatId, message }: { chatId: number; message: Message }) => {
    setChats(prev => prev.map(chat => {
      if (chat.id === chatId) {
        return {
          ...chat,
          last_message: message,
          unread_count: chat.unread_count + 1,
          updated_at: new Date().toISOString()
        };
      }
      return chat;
    }));
  }, []);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —á–∞—Ç–∞
  const handleChatStatusChange = useCallback(({ chatId, status, operatorId }: { chatId: number; status: string; operatorId?: number }) => {
    setChats(prev => prev.map(chat => {
      if (chat.id === chatId) {
        return {
          ...chat,
          status: status as any,
          operator_id: operatorId,
          updated_at: new Date().toISOString()
        };
      }
      return chat;
    }));
  }, []);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á–∞—Ç–∞
  const handleChatUpdate = useCallback(({ chatId, chat: chatData }: { chatId: number; chat: Chat }) => {
    setChats(prev => prev.map(chat => {
      if (chat.id === chatId) {
        return { ...chat, ...chatData };
      }
      return chat;
    }));
  }, []);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
  const handleOperatorStatusChange = useCallback(({ operatorId, status }: { operatorId: number; status: string }) => {
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –≤ UI
    console.log(`–û–ø–µ—Ä–∞—Ç–æ—Ä ${operatorId} –∏–∑–º–µ–Ω–∏–ª —Å—Ç–∞—Ç—É—Å –Ω–∞: ${status}`);
  }, []);

  // –ó–∞–≥—Ä—É–∑–∫–∞ —á–∞—Ç–æ–≤
  const loadChats = useCallback(async (reset = false) => {
    try {
      setLoading(true);
      setError(null);
      
      const currentPage = reset ? 1 : page;
      const response = await apiClient.getChats({
        ...filters,
        page: currentPage,
        limit: 20
      });
      
      if (reset) {
        setChats(response);
        setPage(1);
      } else {
        setChats(prev => [...prev, ...response]);
        setPage(currentPage + 1);
      }
      
      setHasMore(response.length === 20);
      setIsInitialized(true);
      setUseFallbackData(false);
      
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Ç–æ–≤';
      setError(errorMessage);
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Ç–æ–≤:', err);
      
      // –ï—Å–ª–∏ backend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback –¥–∞–Ω–Ω—ã–µ
      if (errorMessage.includes('Network Error') || errorMessage.includes('Backend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω')) {
        console.log('üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏');
        setUseFallbackData(true);
        
        if (reset) {
          setChats(FALLBACK_CHATS);
          setPage(1);
        } else {
          setChats(prev => [...prev, ...FALLBACK_CHATS]);
          setPage(currentPage + 1);
        }
        
        setHasMore(false);
        setIsInitialized(true);
        setError('Backend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–∫–∞–∑–∞–Ω—ã –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.');
      }
    } finally {
      setLoading(false);
    }
  }, [filters, page]);

  // –ü—Ä–∏–Ω—è—Ç–∏–µ —á–∞—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É
  const takeChat = useCallback(async (chatId: number) => {
    try {
      const updatedChat = await apiClient.takeChat(chatId);
      
      setChats(prev => prev.map(chat => 
        chat.id === chatId ? updatedChat : chat
      ));
      
      setSelectedChatId(chatId);
      return updatedChat;
      
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è —á–∞—Ç–∞';
      setError(errorMessage);
      throw err;
    }
  }, []);

  // –ó–∞–∫—Ä—ã—Ç–∏–µ —á–∞—Ç–∞
  const closeChat = useCallback(async (chatId: number) => {
    try {
      const updatedChat = await apiClient.closeChat(chatId);
      
      setChats(prev => prev.map(chat => 
        chat.id === chatId ? updatedChat : chat
      ));
      
      if (selectedChatId === chatId) {
        setSelectedChatId(null);
      }
      
      return updatedChat;
      
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —á–∞—Ç–∞';
      setError(errorMessage);
      throw err;
    }
  }, [selectedChatId]);

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
  const updateFilters = useCallback((newFilters: Partial<FilterOptions>) => {
    setFilters(prev => ({ ...prev, ...newFilters }));
  }, []);

  // –°–±—Ä–æ—Å —Ñ–∏–ª—å—Ç—Ä–æ–≤
  const resetFilters = useCallback(() => {
    setFilters({});
  }, []);

  // –í—ã–±–æ—Ä —á–∞—Ç–∞
  const selectChat = useCallback((chat: Chat) => {
    setSelectedChatId(chat.id);
    
    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á–∞—Ç–∞ —á–µ—Ä–µ–∑ WebSocket
    if (wsRef.current && wsRef.current.readyState === (globalThis as any).WebSocket.OPEN) {
      wsRef.current.send(JSON.stringify({
        type: 'subscribe_to_chat',
        chatId: chat.id
      }));
    }
  }, []);

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
  const sendMessage = useCallback(async (chatId: number, text: string, attachments?: File[]) => {
    try {
      const message = await apiClient.sendMessage(chatId, text, attachments);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —á–∞—Ç —Å –Ω–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
      setChats(prev => prev.map(chat => {
        if (chat.id === chatId) {
          return {
            ...chat,
            last_message: message,
            updated_at: new Date().toISOString()
          };
        }
        return chat;
      }));
      
      return message;
      
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è';
      setError(errorMessage);
      throw err;
    }
  }, []);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    initializeWebSocket();
    loadChats(true);
    
    return () => {
      if (wsRef.current) {
        wsRef.current.close();
      }
      if (reconnectTimeoutRef.current) {
        clearTimeout(reconnectTimeoutRef.current);
      }
    };
  }, []);

  // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —á–∞—Ç–æ–≤ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
  useEffect(() => {
    if (isInitialized) {
      loadChats(true);
    }
  }, [filters, isInitialized]);

  return {
    chats,
    selectedChatId,
    loading,
    error,
    filters,
    hasMore,
    useFallbackData,
    loadChats,
    takeChat,
    closeChat,
    updateFilters,
    resetFilters,
    selectChat,
    sendMessage,
    loadMore: () => loadChats(false)
  };
}
