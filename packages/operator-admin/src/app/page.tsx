'use client';

import React, { useState, useEffect } from 'react';
import { ChatList } from '../components/ChatList';
import { ChatView } from '../components/ChatView';
import { UserPanel } from '../components/UserPanel';
import { Notifications, Notification } from '../components/Notifications';
import { ConnectionStatus } from '../components/ConnectionStatus';
import { useChats } from '../hooks/useChats';
import { Chat, User } from '../types';
import apiClient from '../lib/api';

export default function OperatorPanel() {
  const {
    chats,
    selectedChatId,
    loading,
    error,
    filters,
    hasMore,
    useFallbackData,
    loadChats,
    takeChat,
    closeChat,
    updateFilters,
    resetFilters,
    selectChat,
    sendMessage,
    loadMore
  } = useChats();

  const [selectedChat, setSelectedChat] = useState<Chat | null>(null);
  const [currentUser, setCurrentUser] = useState<User | null>(null);
  const [notifications, setNotifications] = useState<Notification[]>([]);

  const [isAuthenticated, setIsAuthenticated] = useState<boolean>(false);
  const [loginEmail, setLoginEmail] = useState('test@operator.com');
  const [loginPassword, setLoginPassword] = useState('test123');
  const [loginError, setLoginError] = useState<string | null>(null);

  useEffect(() => {
    const token = (globalThis as any).localStorage?.getItem('auth_token');
    setIsAuthenticated(Boolean(token));
  }, []);

  const handleLogin = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoginError(null);
    try {
      await apiClient.login(loginEmail, loginPassword);
      setIsAuthenticated(true);
      loadChats(true);
    } catch (err) {
      setLoginError('–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å');
    }
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞
  useEffect(() => {
    if (selectedChatId) {
      const chat = chats.find(c => c.id === selectedChatId);
      setSelectedChat(chat || null);
    } else {
      setSelectedChat(null);
    }
  }, [selectedChatId, chats]);

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  useEffect(() => {
    if (selectedChat) {
      setCurrentUser(selectedChat.user);
    } else {
      setCurrentUser(null);
    }
  }, [selectedChat]);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —á–∞—Ç–∞
  const handleSelectChat = (chat: Chat) => {
    selectChat(chat);
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è —á–∞—Ç–∞
  const handleTakeChat = async (chatId: number) => {
    try {
      await takeChat(chatId);
      addNotification('–ß–∞—Ç –ø—Ä–∏–Ω—è—Ç –≤ —Ä–∞–±–æ—Ç—É', 'success');
    } catch (err) {
      addNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ —á–∞—Ç–∞', 'error');
    }
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —á–∞—Ç–∞
  const handleCloseChat = async () => {
    if (selectedChat) {
      try {
        await closeChat(selectedChat.id);
        addNotification('–ß–∞—Ç –∑–∞–∫—Ä—ã—Ç', 'success');
      } catch (err) {
        addNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —á–∞—Ç–∞', 'error');
      }
    }
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
  const handleSendMessage = async (text: string, attachments?: File[]) => {
    if (selectedChat) {
      try {
        await sendMessage(selectedChat.id, text, attachments);
        addNotification('–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ', 'success');
      } catch (err) {
        addNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è', 'error');
      }
    }
  };

  // –°–æ–∑–¥–∞–Ω–∏–µ –∫–µ–π—Å–∞
  const handleCreateCase = () => {
    if (selectedChat) {
      addNotification('–§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–µ–π—Å–∞ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –ø–æ–∑–∂–µ');
    }
  };

  // –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏
  const handleCopyLink = () => {
    if (selectedChat) {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –≤–º–µ—Å—Ç–æ window.location.origin
      const link = `/chat/${selectedChat.id}`;
      addNotification(`–°—Å—ã–ª–∫–∞: ${link} (—Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –≤—Ä—É—á–Ω—É—é)`, 'info');
    }
  };

  // –î–µ–π—Å—Ç–≤–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
  const handleOpenProfile = () => {
    if (currentUser) {
      addNotification('–§—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –ø–æ–∑–∂–µ');
    }
  };

  const handleBlockUser = () => {
    if (currentUser) {
      addNotification('–§—É–Ω–∫—Ü–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –ø–æ–∑–∂–µ');
    }
  };

  const handleUnblockUser = () => {
    if (currentUser) {
      addNotification('–§—É–Ω–∫—Ü–∏—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –ø–æ–∑–∂–µ');
    }
  };

  const handleCreateRefund = () => {
    if (currentUser) {
      addNotification('–§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –ø–æ–∑–∂–µ');
    }
  };

  const handleViewHistory = () => {
    if (currentUser) {
      addNotification('–§—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –ø–æ–∑–∂–µ');
    }
  };

  // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏
  const handleCreateNote = async (content: string, isInternal: boolean) => {
    if (selectedChat) {
      try {
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç API –≤—ã–∑–æ–≤
        await new Promise(resolve => setTimeout(resolve, 300));
        addNotification(`–ó–∞–º–µ—Ç–∫–∞ ${isInternal ? '–≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è' : '–ø—É–±–ª–∏—á–Ω–∞—è'} —Å–æ–∑–¥–∞–Ω–∞`);
      } catch (err) {
        addNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏');
      }
    }
  };

  // –£–ª—É—á—à–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
  const handleImproveResponse = async (text: string, isOperator: boolean) => {
    try {
      // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç API –≤—ã–∑–æ–≤ –∫ AI —Å–µ—Ä–≤–∏—Å—É
      await new Promise(resolve => setTimeout(resolve, 1000));
      addNotification(`–û—Ç–≤–µ—Ç —É–ª—É—á—à–µ–Ω ${isOperator ? '(–æ–ø–µ—Ä–∞—Ç–æ—Ä—Å–∫–∏–π)' : '(AI)'}`);
    } catch (err) {
      addNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–ª—É—á—à–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞');
    }
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á–∞—Ç–æ–≤
  const handleRefreshChats = () => {
    loadChats(true);
  };

  // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
  const addNotification = (message: string, type: Notification['type'] = 'info') => {
    const id = Date.now().toString();
    const notification: Notification = { id, type, message };
    setNotifications(prev => [...prev, notification]);
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
      removeNotification(id);
    }, 5000);
  };

  const removeNotification = (id: string) => {
    setNotifications(prev => prev.filter(n => n.id !== id));
  };

  // –≠–∫—Ä–∞–Ω –ª–æ–≥–∏–Ω–∞
  if (!isAuthenticated) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center px-4">
        <div className="w-full max-w-md bg-white p-6 rounded-lg shadow">
          <h1 className="text-xl font-semibold text-gray-900 mb-4">–í—Ö–æ–¥ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞</h1>
          <form onSubmit={handleLogin} className="space-y-4">
            <div>
              <label className="block text-sm text-gray-700 mb-1" htmlFor="login-email">Email</label>
              <input id="login-email" aria-label="Email" placeholder="–í–≤–µ–¥–∏—Ç–µ email" value={loginEmail} onChange={(e) => setLoginEmail((e.target as any).value)} type="email" className="w-full border border-gray-300 rounded-lg px-3 py-2" required />
            </div>
            <div>
              <label className="block text-sm text-gray-700 mb-1" htmlFor="login-password">–ü–∞—Ä–æ–ª—å</label>
              <input id="login-password" aria-label="–ü–∞—Ä–æ–ª—å" placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å" value={loginPassword} onChange={(e) => setLoginPassword((e.target as any).value)} type="password" className="w-full border border-gray-300 rounded-lg px-3 py-2" required />
            </div>
            {loginError && <div className="text-sm text-red-600">{loginError}</div>}
            <button type="submit" className="w-full px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700">–í–æ–π—Ç–∏</button>
          </form>
          <p className="text-xs text-gray-500 mt-3">–î–ª—è —Ç–µ—Å—Ç–∞: test@operator.com / test123</p>
        </div>
      </div>
    );
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
  if (error) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <div className="text-red-600 text-6xl mb-4">‚ö†Ô∏è</div>
          <h1 className="text-2xl font-bold text-gray-900 mb-2">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</h1>
          <p className="text-gray-600 mb-4">{error}</p>
          <button
            onClick={() => loadChats(true)}
            className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
          >
            –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <header className="bg-white border-b border-gray-200 px-6 py-4">
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-4">
            <h1 className="text-2xl font-bold text-gray-900">–ü–∞–Ω–µ–ª—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤</h1>
            {useFallbackData && (
              <div className="px-3 py-1 bg-yellow-100 text-yellow-800 text-sm rounded-full border border-yellow-200">
                üîÑ –î–µ–º–æ —Ä–µ–∂–∏–º (Backend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)
              </div>
            )}
          </div>
          <ConnectionStatus />
        </div>
      </header>

      {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç */}
      <div className="flex h-[calc(100vh-80px)]">
        {/* –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ */}
        <ChatList
          chats={chats}
          selectedChatId={selectedChatId}
          onSelectChat={handleSelectChat}
          onTakeChat={handleTakeChat}
          filters={filters}
          onUpdateFilters={updateFilters}
          onResetFilters={resetFilters}
          loading={loading}
          hasMore={hasMore}
          onLoadMore={loadMore}
        />

        {/* –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –ø—Ä–æ—Å–º–æ—Ç—Ä —á–∞—Ç–∞ */}
        <ChatView
          chat={selectedChat}
          onSendMessage={handleSendMessage}
          onCloseChat={handleCloseChat}
          onCreateCase={handleCreateCase}
          onCopyLink={handleCopyLink}
          onCreateNote={handleCreateNote}
          onImproveResponse={handleImproveResponse}
        />

        {/* –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ */}
        <UserPanel
          user={currentUser}
          onOpenProfile={handleOpenProfile}
          onBlockUser={handleBlockUser}
          onUnblockUser={handleUnblockUser}
          onCreateRefund={handleCreateRefund}
          onViewHistory={handleViewHistory}
        />
      </div>

      {/* –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è */}
      <Notifications notifications={notifications} onRemove={removeNotification} />
    </div>
  );
}
