import swaggerJsdoc from 'swagger-jsdoc';
import { env } from './env';

/**
 * –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Swagger/OpenAPI
 */
const swaggerOptions = {
  definition: {
    openapi: '3.0.0',
    info: {
      title: 'Telegram Bot Support API',
      version: '1.0.0',
      description: `
        API –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏ Telegram –±–æ—Ç–∞ —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏:
        
        ## üöÄ –û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
        
        - **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–∞—Ç–∞–º–∏** - —Å–æ–∑–¥–∞–Ω–∏–µ, –ø—Ä–æ—Å–º–æ—Ç—Ä, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–∞—Ç–æ–≤
        - **–°–∏—Å—Ç–µ–º–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤** - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
        - **–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π** - –æ—Ç–ø—Ä–∞–≤–∫–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
        - **–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤** - –±–µ–∑–æ–ø–∞—Å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤
        - **Redis –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ** - –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ API
        - **Rate Limiting** - –∑–∞—â–∏—Ç–∞ –æ—Ç DDoS –∞—Ç–∞–∫
        - **–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è SQL** - –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        - **–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫** - —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
        
        ## üîê –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
        
        API –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Bearer —Ç–æ–∫–µ–Ω—ã –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏. –î–æ–±–∞–≤—å—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫:
        \`\`\`
        Authorization: Bearer <your-token>
        \`\`\`
        
        ## üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        
        - Health check: \`GET /health\`
        - –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—à–∏–±–æ–∫
        - –ê–Ω–∞–ª–∏–∑ SQL –∑–∞–ø—Ä–æ—Å–æ–≤
        
        ## üõ°Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
        
        - –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        - Rate limiting
        - –ó–∞—â–∏—Ç–∞ –æ—Ç SQL –∏–Ω—ä–µ–∫—Ü–∏–π
        - –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤
      `,
      contact: {
        name: 'API Support',
        email: 'support@example.com',
        url: 'https://example.com/support',
      },
      license: {
        name: 'MIT',
        url: 'https://opensource.org/licenses/MIT',
      },
      servers: [
        {
          url: `http://localhost:${env.PORT || 3000}`,
          description: 'Development server',
        },
        {
          url: 'https://api.production.com',
          description: 'Production server',
        },
      ],
    },
    components: {
      securitySchemes: {
        bearerAuth: {
          type: 'http',
          scheme: 'bearer',
          bearerFormat: 'JWT',
          description: 'JWT —Ç–æ–∫–µ–Ω –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤',
        },
      },
      schemas: {
        // –ë–∞–∑–æ–≤—ã–µ —Å—Ö–µ–º—ã
        Error: {
          type: 'object',
          properties: {
            error: {
              type: 'object',
              properties: {
                type: { type: 'string', example: 'VALIDATION' },
                code: { type: 'string', example: 'INVALID_INPUT' },
                message: { type: 'string', example: '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏' },
                timestamp: { type: 'string', format: 'date-time' },
                requestId: { type: 'string', example: 'req_1234567890_abc123def' },
              },
            },
          },
        },
        
        // –û–ø–µ—Ä–∞—Ç–æ—Ä—ã
        Operator: {
          type: 'object',
          properties: {
            id: { type: 'integer', example: 1 },
            username: { type: 'string', example: 'operator1' },
            email: { type: 'string', format: 'email', example: 'operator@example.com' },
            firstName: { type: 'string', example: '–ò–≤–∞–Ω' },
            lastName: { type: 'string', example: '–ò–≤–∞–Ω–æ–≤' },
            role: { type: 'string', enum: ['operator', 'admin', 'supervisor'], example: 'operator' },
            isActive: { type: 'boolean', example: true },
            createdAt: { type: 'string', format: 'date-time' },
            updatedAt: { type: 'string', format: 'date-time' },
          },
        },
        
        // –ß–∞—Ç—ã
        Chat: {
          type: 'object',
          properties: {
            id: { type: 'integer', example: 1 },
            telegramId: { type: 'integer', example: 123456789 },
            title: { type: 'string', example: '–ß–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º' },
            status: { type: 'string', enum: ['open', 'in_progress', 'closed', 'resolved'], example: 'open' },
            priority: { type: 'string', enum: ['low', 'medium', 'high', 'urgent'], example: 'medium' },
            operatorId: { type: 'integer', nullable: true, example: 1 },
            userId: { type: 'integer', example: 1 },
            hasAttachments: { type: 'boolean', example: false },
            createdAt: { type: 'string', format: 'date-time' },
            updatedAt: { type: 'string', format: 'date-time' },
            lastMessageAt: { type: 'string', format: 'date-time' },
          },
        },
        
        // –°–æ–æ–±—â–µ–Ω–∏—è
        Message: {
          type: 'object',
          properties: {
            id: { type: 'integer', example: 1 },
            chatId: { type: 'integer', example: 1 },
            operatorId: { type: 'integer', nullable: true, example: 1 },
            text: { type: 'string', example: '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?' },
            type: { type: 'string', enum: ['user', 'operator', 'bot'], example: 'operator' },
            isRead: { type: 'boolean', example: false },
            createdAt: { type: 'string', format: 'date-time' },
            updatedAt: { type: 'string', format: 'date-time' },
          },
        },
        
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        User: {
          type: 'object',
          properties: {
            id: { type: 'integer', example: 1 },
            telegramId: { type: 'integer', example: 123456789 },
            username: { type: 'string', nullable: true, example: 'user123' },
            firstName: { type: 'string', example: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å' },
            lastName: { type: 'string', nullable: true, example: '–¢–µ—Å—Ç–æ–≤—ã–π' },
            language: { type: 'string', example: 'ru' },
            isActive: { type: 'boolean', example: true },
            lastActivityAt: { type: 'string', format: 'date-time' },
            createdAt: { type: 'string', format: 'date-time' },
            updatedAt: { type: 'string', format: 'date-time' },
          },
        },
        
        // –í–ª–æ–∂–µ–Ω–∏—è
        Attachment: {
          type: 'object',
          properties: {
            id: { type: 'integer', example: 1 },
            chatId: { type: 'integer', example: 1 },
            messageId: { type: 'integer', nullable: true, example: 1 },
            fileName: { type: 'string', example: 'document.pdf' },
            filePath: { type: 'string', example: '/uploads/document.pdf' },
            fileSize: { type: 'integer', example: 1024 },
            mimeType: { type: 'string', example: 'application/pdf' },
            createdAt: { type: 'string', format: 'date-time' },
          },
        },
        
        // –ó–∞–º–µ—Ç–∫–∏
        Note: {
          type: 'object',
          properties: {
            id: { type: 'integer', example: 1 },
            chatId: { type: 'integer', example: 1 },
            operatorId: { type: 'integer', example: 1 },
            text: { type: 'string', example: '–í–∞–∂–Ω–∞—è –∑–∞–º–µ—Ç–∫–∞ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ' },
            isPrivate: { type: 'boolean', example: false },
            createdAt: { type: 'string', format: 'date-time' },
            updatedAt: { type: 'string', format: 'date-time' },
          },
        },
        
        // –ì–æ—Ç–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã
        CannedResponse: {
          type: 'object',
          properties: {
            id: { type: 'integer', example: 1 },
            title: { type: 'string', example: '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ' },
            text: { type: 'string', example: '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?' },
            category: { type: 'string', example: 'greeting' },
            isActive: { type: 'boolean', example: true },
            createdAt: { type: 'string', format: 'date-time' },
            updatedAt: { type: 'string', format: 'date-time' },
          },
        },
        
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        ChatStats: {
          type: 'object',
          properties: {
            total: { type: 'integer', example: 100 },
            open: { type: 'integer', example: 25 },
            inProgress: { type: 'integer', example: 15 },
            closed: { type: 'integer', example: 60 },
            avgResponseTime: { type: 'number', example: 2.5 },
            avgResolutionTime: { type: 'number', example: 15.3 },
          },
        },
        
        // –ü–∞–≥–∏–Ω–∞—Ü–∏—è
        Pagination: {
          type: 'object',
          properties: {
            page: { type: 'integer', example: 1 },
            limit: { type: 'integer', example: 20 },
            total: { type: 'integer', example: 100 },
            totalPages: { type: 'integer', example: 5 },
            hasNext: { type: 'boolean', example: true },
            hasPrev: { type: 'boolean', example: false },
          },
        },
        
        // –§–∏–ª—å—Ç—Ä—ã —á–∞—Ç–æ–≤
        ChatFilters: {
          type: 'object',
          properties: {
            status: { type: 'string', enum: ['open', 'in_progress', 'closed', 'resolved'] },
            priority: { type: 'string', enum: ['low', 'medium', 'high', 'urgent'] },
            operatorId: { type: 'integer' },
            hasAttachments: { type: 'boolean' },
            dateFrom: { type: 'string', format: 'date' },
            dateTo: { type: 'string', format: 'date' },
            search: { type: 'string' },
          },
        },
        
        // –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
        FileUpload: {
          type: 'object',
          properties: {
            file: { type: 'string', format: 'binary' },
            chatId: { type: 'integer', example: 1 },
            messageId: { type: 'integer', nullable: true, example: 1 },
          },
        },
        
        // Rate Limiting
        RateLimitInfo: {
          type: 'object',
          properties: {
            limit: { type: 'integer', example: 100 },
            remaining: { type: 'integer', example: 95 },
            reset: { type: 'integer', example: 1640995200 },
            retryAfter: { type: 'integer', example: 60 },
          },
        },
        
        // Health Check
        HealthCheck: {
          type: 'object',
          properties: {
            status: { type: 'string', example: 'ok' },
            timestamp: { type: 'string', format: 'date-time' },
            uptime: { type: 'number', example: 3600 },
            environment: { type: 'string', example: 'development' },
            version: { type: 'string', example: '1.0.0' },
            redis: {
              type: 'object',
              properties: {
                status: { type: 'string', example: 'connected' },
                info: {
                  type: 'object',
                  properties: {
                    connected_clients: { type: 'string', example: '5' },
                    used_memory: { type: 'string', example: '1.2M' },
                    total_commands_processed: { type: 'string', example: '1250' },
                  },
                },
              },
            },
          },
        },
      },
      responses: {
        // –û–±—â–∏–µ –æ—Ç–≤–µ—Ç—ã
        UnauthorizedError: {
          description: '–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏',
          content: {
            'application/json': {
              schema: { $ref: '#/components/schemas/Error' },
            },
          },
        },
        ForbiddenError: {
          description: '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏',
          content: {
            'application/json': {
              schema: { $ref: '#/components/schemas/Error' },
            },
          },
        },
        NotFoundError: {
          description: '–†–µ—Å—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω',
          content: {
            'application/json': {
              schema: { $ref: '#/components/schemas/Error' },
            },
          },
        },
        ValidationError: {
          description: '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏',
          content: {
            'application/json': {
              schema: { $ref: '#/components/schemas/Error' },
            },
          },
        },
        RateLimitError: {
          description: '–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤',
          content: {
            'application/json': {
              schema: { $ref: '#/components/schemas/Error' },
            },
          },
        },
        InternalServerError: {
          description: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
          content: {
            'application/json': {
              schema: { $ref: '#/components/schemas/Error' },
            },
          },
        },
      },
    },
    security: [
      {
        bearerAuth: [],
      },
    ],
    tags: [
      {
        name: '–û–ø–µ—Ä–∞—Ç–æ—Ä—ã',
        description: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏',
      },
      {
        name: '–ß–∞—Ç—ã',
        description: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–∞—Ç–∞–º–∏ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏',
      },
      {
        name: '–°–æ–æ–±—â–µ–Ω–∏—è',
        description: '–û—Ç–ø—Ä–∞–≤–∫–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π',
      },
      {
        name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏',
        description: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö Telegram',
      },
      {
        name: '–í–ª–æ–∂–µ–Ω–∏—è',
        description: '–ó–∞–≥—Ä—É–∑–∫–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞–º–∏',
      },
      {
        name: '–ó–∞–º–µ—Ç–∫–∏',
        description: '–ó–∞–º–µ—Ç–∫–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –ø–æ —á–∞—Ç–∞–º',
      },
      {
        name: '–ì–æ—Ç–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã',
        description: '–®–∞–±–ª–æ–Ω—ã –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤',
      },
      {
        name: 'Telegram',
        description: '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Telegram Bot API',
      },
      {
        name: '–ö—ç—à',
        description: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Redis –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º',
      },
      {
        name: 'Rate Limiting',
        description: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏ –∑–∞–ø—Ä–æ—Å–æ–≤',
      },
      {
        name: 'SQL –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è',
        description: '–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è SQL –∑–∞–ø—Ä–æ—Å–æ–≤',
      },
      {
        name: '–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫',
        description: '–°–∏—Å—Ç–µ–º–∞ —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫',
      },
      {
        name: '–°–∏—Å—Ç–µ–º–∞',
        description: '–°–∏—Å—Ç–µ–º–Ω—ã–µ endpoints –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥',
      },
    ],
  },
  apis: [
    './src/routes/*.ts',
    './src/middleware/*.ts',
    './src/services/*.ts',
    './src/index.ts',
  ],
};

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—é Swagger
 */
export const swaggerSpec = swaggerJsdoc(swaggerOptions);

/**
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Swagger UI
 */
export const swaggerUiOptions = {
  explorer: true,
  customCss: `
    .swagger-ui .topbar { display: none }
    .swagger-ui .info .title { color: #3b82f6; font-size: 36px; }
    .swagger-ui .info .description { font-size: 16px; line-height: 1.6; }
    .swagger-ui .scheme-container { background: #f8fafc; padding: 20px; border-radius: 8px; }
    .swagger-ui .opblock.opblock-get .opblock-summary-method { background: #10b981; }
    .swagger-ui .opblock.opblock-post .opblock-summary-method { background: #3b82f6; }
    .swagger-ui .opblock.opblock-put .opblock-summary-method { background: #f59e0b; }
    .swagger-ui .opblock.opblock-delete .opblock-summary-method { background: #ef4444; }
  `,
  customSiteTitle: 'Telegram Bot Support API - –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è',
  customfavIcon: '/favicon.ico',
  swaggerOptions: {
    persistAuthorization: true,
    displayRequestDuration: true,
    filter: true,
    showExtensions: true,
    showCommonExtensions: true,
    docExpansion: 'list',
    defaultModelsExpandDepth: 2,
    defaultModelExpandDepth: 2,
    tryItOutEnabled: true,
  },
};
