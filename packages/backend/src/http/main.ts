import Fastify, {
  type FastifyInstance,
} from "fastify";
import rateLimit from "@fastify/rate-limit";
import { Telegraf } from "telegraf";
import { message } from "telegraf/filters";
import { type Update } from "telegraf/types";
import pgPlugin from "../plugins/pg.js";
import { ragAnswer } from "../app/pipeline/ragAnswer.js";
import path from "path";
import { fileURLToPath } from "url";
import fastifyStatic from "@fastify/static";

// –õ–æ–∫–∞–ª—å–Ω—ã–µ —Ä–æ—É—Ç—ã/–ø–ª–∞–≥–∏–Ω—ã (NodeNext/ESM ‚Üí —É–∫–∞–∑—ã–≤–∞–µ–º .js)
import routes from "./routes/index.js";
import adminTelegram from "./routes/admin/telegram.js";

// –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ Fastify-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
 * Health-—Ä–æ—É—Ç—ã: GET/HEAD "/"
 * Telegram webhook: POST ${TG_WEBHOOK_PATH}/:token?  (—Å–µ–∫—Ä–µ—Ç –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ x-telegram-bot-api-secret-token –ò–õ–ò –≤ :token)
 * –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ö–æ–¥—è—â–∏—Ö –∞–ø–¥–µ–π—Ç–æ–≤ –∏ –æ—Ç–ª–æ–≤ –æ—à–∏–±–æ–∫ Telegraf.
 */
export async function createApp(): Promise<FastifyInstance> {
  const app = Fastify({
    logger: {
      level: process.env.LOG_LEVEL ?? "info",
    },
    trustProxy: true,
  });

  await app.register(rateLimit as any, { global: false });
  await app.register(pgPlugin);

  // -------- Health --------
  app.head("/", (_req, reply) => reply.code(200).send());
  app.get("/", () => ({
    status: "ok",
    service: "bot-test-backend",
    time: new Date().toISOString(),
  }));

  // -------- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —Ä–æ—É—Ç–æ–≤ --------
  await app.register(routes);
  await app.register(adminTelegram);

  // -------- Operator Admin Panel (Static Files) --------
  // –û–±—Å–ª—É–∂–∏–≤–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã operator-admin
  try {
    app.log.info("Starting operator admin panel setup...");
    
    // –ü—É—Ç—å –∫ —Å–æ–±—Ä–∞–Ω–Ω—ã–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–º —Ñ–∞–π–ª–∞–º operator-admin
    const adminStaticPath = path.join(__dirname, "../../../operator-admin/.next");
    app.log.info({ adminStaticPath }, "Admin static path resolved");
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏
    const fs = await import("fs");
    try {
      const stats = fs.statSync(adminStaticPath);
      app.log.info({ 
        exists: true, 
        isDirectory: stats.isDirectory(),
        size: stats.size 
      }, "Admin static path exists");
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏
      const files = fs.readdirSync(adminStaticPath);
      app.log.info({ files: files.slice(0, 10) }, "Admin static folder contents");
      
      // –ò—Å—Å–ª–µ–¥—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É .next –ø–∞–ø–∫–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ HTML —Ñ–∞–π–ª–æ–≤
      app.log.info("Investigating .next folder structure for HTML files...");
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∞–ø–∫–∏
      const subfolders = files.filter(file => {
        try {
          return fs.statSync(path.join(adminStaticPath, file)).isDirectory();
        } catch {
          return false;
        }
      });
      app.log.info({ subfolders }, "Subfolders found in .next");
      
      // –ò—â–µ–º HTML —Ñ–∞–π–ª—ã –≤ —Ä–∞–∑–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö
      const htmlFiles = [];
      const searchPaths = [
        "index.html",
        "app/page.html",
        "pages/index.html",
        "static/index.html"
      ];
      
      for (const searchPath of searchPaths) {
        const fullPath = path.join(adminStaticPath, searchPath);
        try {
          if (fs.existsSync(fullPath)) {
            const stats = fs.statSync(fullPath);
            htmlFiles.push({ path: searchPath, exists: true, size: stats.size });
          } else {
            htmlFiles.push({ path: searchPath, exists: false });
          }
        } catch (err) {
          htmlFiles.push({ path: searchPath, exists: false, error: String(err) });
        }
      }
      
      app.log.info({ htmlFiles }, "HTML file search results");
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º app –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
      if (subfolders.includes("app")) {
        try {
          const appPath = path.join(adminStaticPath, "app");
          const appFiles = fs.readdirSync(appPath);
          app.log.info({ appFiles }, "App directory contents");
          
          // –ò—â–µ–º page.html –∏–ª–∏ –¥—Ä—É–≥–∏–µ HTML —Ñ–∞–π–ª—ã –≤ app
          const appHtmlFiles = appFiles.filter(file => file.endsWith('.html'));
          if (appHtmlFiles.length > 0) {
            app.log.info({ appHtmlFiles }, "HTML files found in app directory");
          }
        } catch (err) {
          app.log.warn({ err }, "Failed to read app directory");
        }
      }
    } catch (fsErr) {
      app.log.warn({ fsErr }, "Admin static path does not exist or not accessible");
    }
    
    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –¥–ª—è operator-admin
    await app.register(fastifyStatic, {
      root: adminStaticPath,
      prefix: "/admin",
      decorateReply: false,
    });
    app.log.info("Static files plugin registered");
    
    // SPA fallback –¥–ª—è admin —Ä–æ—É—Ç–æ–≤ - –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ü–û–°–õ–ï —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç–∏–∫–∏
    app.get("/admin", async (req, reply) => {
      app.log.info("Admin route /admin accessed - redirecting to /admin/");
      return reply.redirect("/admin/");
    });
    
    app.get("/admin/", async (req, reply) => {
      app.log.info("Admin route /admin/ accessed - serving SPA");
      try {
        const fs = await import("fs");
        
        // –í Next.js App Router –∏—â–µ–º index.html –≤ —Ä–∞–∑–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö
        let indexPath = path.join(adminStaticPath, "index.html");
        if (!fs.existsSync(indexPath)) {
          // –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –≤ app –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
          indexPath = path.join(adminStaticPath, "app", "page.html");
        }
        if (!fs.existsSync(indexPath)) {
          // –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –≤ pages –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ (Pages Router)
          indexPath = path.join(adminStaticPath, "pages", "index.html");
        }
        
        if (fs.existsSync(indexPath)) {
          const html = fs.readFileSync(indexPath, "utf8");
          reply.type("text/html");
          return reply.send(html);
        } else {
          // –ï—Å–ª–∏ HTML –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ—Å—Ç—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —Ä–µ–¥–∏—Ä–µ–∫—Ç–æ–º
          app.log.warn("No HTML file found, serving fallback page");
          
          // –û—Ç–∫–ª—é—á–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ fallback —Å—Ç—Ä–∞–Ω–∏—Ü—ã
          reply.header("Cache-Control", "no-cache, no-store, must-revalidate");
          reply.header("Pragma", "no-cache");
          reply.header("Expires", "0");
          
          const fallbackHtml = `
            <!DOCTYPE html>
            <html>
              <head>
                <title>Operator Admin Panel</title>
                <meta charset="utf-8">
                <meta name="viewport" content="width=device-width, initial-scale=1">
                <style>
                  body { font-family: Arial, sans-serif; margin: 40px; background: #f5f5f5; }
                  .container { max-width: 600px; margin: 0 auto; background: white; padding: 30px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
                  h1 { color: #333; margin-bottom: 20px; }
                  .status { background: #e8f5e8; border: 1px solid #4caf50; padding: 15px; border-radius: 4px; margin: 20px 0; }
                  .warning { background: #fff3cd; border: 1px solid #ffc107; padding: 15px; border-radius: 4px; margin: 20px 0; }
                  .info { background: #d1ecf1; border: 1px solid #17a2b8; padding: 15px; border-radius: 4px; margin: 20px 0; }
                </style>
              </head>
              <body>
                <div class="container">
                  <h1>üöÄ Operator Admin Panel</h1>
                  
                  <div class="status">
                    <strong>‚úÖ –°—Ç–∞—Ç—É—Å:</strong> –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω–∞
                  </div>
                  
                  <div class="warning">
                    <strong>‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ:</strong> Frontend —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
                  </div>
                  
                  <div class="info">
                    <strong>‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</strong><br>
                    ‚Ä¢ Backend API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ<br>
                    ‚Ä¢ –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã<br>
                    ‚Ä¢ –ü—É—Ç—å: /app/packages/operator-admin/.next<br>
                    ‚Ä¢ –§–∞–π–ª—ã –Ω–∞–π–¥–µ–Ω—ã –≤ .next –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
                  </div>
                  
                  <p><strong>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:</strong></p>
                  <ul>
                    <li><a href="/admin/">–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É</a></li>
                    <li><a href="/">–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞</a></li>
                  </ul>
                </div>
              </body>
            </html>
          `;
          reply.type("text/html");
          return reply.send(fallbackHtml);
        }
      } catch (err) {
        app.log.error({ err }, "Failed to serve admin page");
        return reply.code(500).send("Internal Server Error");
      }
    });
    
    // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–π —Ä–æ—É—Ç /admin/* - fastifyStatic —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –µ–≥–æ
    app.log.info("Operator admin panel static files registered successfully");
  } catch (err) {
    app.log.error({ err }, "Failed to register operator admin panel static files");
  }

  // -------- Telegram / Webhook --------
  const TG_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
  const TG_PATH = process.env.TG_WEBHOOK_PATH || "/webhooks/telegram";
  const TG_SECRET = process.env.TG_WEBHOOK_SECRET || "";

  if (!TG_TOKEN) {
    app.log.warn(
      "TELEGRAM_BOT_TOKEN is not set ‚Äî Telegram webhook route will NOT be registered",
    );
    return app;
  }

  const bot = new Telegraf(TG_TOKEN);

  bot.catch((err, ctx) => {
    app.log.error(
      { err, tg_chat_id: ctx.chat?.id, tg_type: ctx.updateType },
      "Telegraf error",
    );
  });

  bot.on("message", async (ctx, next) => {
    try {
      app.log.info(
        { tg_chat_id: ctx.chat?.id, tg_type: ctx.updateType },
        "tg update received",
      );
    } catch {
      // ignore
    }
    return next();
  });

  bot.on(message("text"), async (ctx) => {
    const text = ctx.message.text || "";
    try {
      await ctx.sendChatAction("typing");
    } catch {
      // ignore
    }
    try {
      // –í—ã–∑—ã–≤–∞–µ–º ragAnswer –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
      const result = await ragAnswer({
        text,
        lang: "ru",
        logger: app.log,
        pg: app.pg,
      });

      const answer = result.answer;
      const escalate = result.escalate;
      const tail = escalate
        ? "\n\n–ï—Å–ª–∏ –Ω—É–∂–Ω–æ ‚Äî –º–æ–≥—É –ø–æ–¥–∫–ª—é—á–∏—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏."
        : "";
      
      await ctx.reply(`${answer}${tail}`);
    } catch (err) {
      app.log.error({ err }, "ragAnswer/reply failed");
      try {
        await ctx.reply(
          "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏. –ú–æ–≥—É –ø–æ–¥–∫–ª—é—á–∏—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏.",
        );
      } catch {
        // ignore
      }
    }
  });

  interface TelegramWebhookParams {
    token?: string;
  }

  app.post(`${TG_PATH}/:token?`, async (req, reply) => {
    const headerSecret = String(
      req.headers["x-telegram-bot-api-secret-token"] || "",
    );
    const urlSecret = (req.params as TelegramWebhookParams)?.token || "";
    const hasSecret = Boolean(TG_SECRET);

    if (hasSecret) {
      if (headerSecret !== TG_SECRET && urlSecret !== TG_SECRET) {
        app.log.warn({ ip: req.ip }, "Unauthorized Telegram webhook access");
        return reply.code(401).send();
      }
    } else {
      app.log.warn(
        { ip: req.ip },
        "Telegram webhook blocked: missing TG_WEBHOOK_SECRET",
      );
      return reply.code(401).send();
    }

    try {
      await bot.handleUpdate(req.body as Update);
      return reply.send();
    } catch (err) {
      app.log.error({ err }, "bot.handleUpdate failed");
      return reply.code(500).send();
    }
  });

  return app;
}

async function start() {
  const app = await createApp();
  const port = Number(process.env.PORT || 3000);
  const host = "0.0.0.0";
  try {
    await app.listen({ port, host });
    app.log.info({ port }, "server started");
  } catch (err) {
    app.log.error({ err }, "failed to start");
    process.exit(1);
  }
}

if (process.env.NODE_ENV !== "test") {
  void start();
}

export default createApp;
