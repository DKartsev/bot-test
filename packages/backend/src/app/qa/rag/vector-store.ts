import { promises as fs } from "fs";
import path from "path";
// import { HierarchicalNSW } from "hnswlib-node"; // –ó–∞–º–µ–Ω–µ–Ω–æ –Ω–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç
import { logger } from "../../../utils/logger.js";
import { TextChunk } from "./chunker.js";

/**
 * –ê–±—Å—Ç—Ä–∞–∫—Ü–∏—è –¥–ª—è –ª—é–±–æ–≥–æ –¥–≤–∏–∂–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –ø—Ä–µ–≤—Ä–∞—â–∞—Ç—å —Ç–µ–∫—Å—Ç –≤ –≤–µ–∫—Ç–æ—Ä—ã.
 * –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ª–µ–≥–∫–æ –∑–∞–º–µ–Ω—è—Ç—å –º–æ–¥–µ–ª–∏ –≤ –±—É–¥—É—â–µ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, OpenAI, Cohere, etc.).
 */
export interface Embedder {
  embed(texts: string[]): Promise<number[][]>;
  getDimension(): number;
}

/**
 * –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ, –æ–ø–∏—Å—ã–≤–∞—é—â–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞ –Ω–∞ –¥–∏—Å–∫–µ.
 */
interface IndexMeta {
  dim: number;
  size: number;
  updatedAt: string;
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —á–∞–Ω–∫–æ–≤ –≤ –ø–æ—Ä—è–¥–∫–µ –∏—Ö –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏
  chunkIds: string[];
}

/**
 * –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ –ø–æ –≤–µ–∫—Ç–æ—Ä—É.
 */
export interface VectorSearchResult extends TextChunk {
  similarity: number;
}

/**
 * –ö–ª–∞—Å—Å VectorStore —É–ø—Ä–∞–≤–ª—è–µ—Ç –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º HNSW-–∏–Ω–¥–µ–∫—Å–∞ –¥–ª—è –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞.
 * –û–Ω –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —Å–æ–∑–¥–∞–Ω–∏–µ, –∑–∞–≥—Ä—É–∑–∫—É, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ –∏ –ø–æ–∏—Å–∫ –ø–æ –Ω–µ–º—É.
 * –ï—Å–ª–∏ –º–æ–¥—É–ª—å hnswlib-node –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏ –±–∏–ª–¥–∞),
 * –≤–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫ –±—É–¥–µ—Ç –æ—Ç–∫–ª—é—á—ë–Ω (graceful fallback), –∞ –º–µ—Ç–æ–¥—ã –±—É–¥—É—Ç no-op/–≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –ø—É—Å—Ç—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.
 */
export class VectorStore {
  private index: any | null = null;
  private chunkMeta = new Map<string, TextChunk>();
  private chunkIdToIndex = new Map<string, number>();
  private indexToChunkId: string[] = [];
  private dimension: number;
  private isInitialized = false;
  private hnswAvailable = false;

  private readonly indexFile: string;
  private readonly metaFile: string;
  private readonly chunksFile: string;

  constructor(
    private storePath: string,
    private embedder: Embedder,
  ) {
    this.dimension = this.embedder.getDimension();
    this.indexFile = path.join(storePath, "hnsw-index.bin");
    this.metaFile = path.join(storePath, "hnsw-meta.json");
    this.chunksFile = path.join(storePath, "chunks.jsonl");
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç VectorStore.
   * –ü—ã—Ç–∞–µ—Ç—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∏–Ω–¥–µ–∫—Å —Å –¥–∏—Å–∫–∞, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å.
   * –ï—Å–ª–∏ –∏–Ω–¥–µ–∫—Å–∞ –Ω–µ—Ç –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å, —Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—ã–π.
   * –ï—Å–ª–∏ hnswlib-node –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω ‚Äî –æ—Ç–∫–ª—é—á–∞–µ—Ç –≤–µ–∫—Ç–æ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å –±–µ–∑ –ø–∞–¥–µ–Ω–∏—è.
   */
  async init(): Promise<void> {
    if (this.isInitialized) return;
    logger.info(
      { path: this.storePath },
      "üß† –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞...",
    );
    await fs.mkdir(this.storePath, { recursive: true });

    let HierarchicalNSWCtor: any;
    try {
      const mod: any = await import("hnswlib-node");
      HierarchicalNSWCtor = mod?.HierarchicalNSW;
      if (!HierarchicalNSWCtor) {
        throw new Error("HierarchicalNSW export not found");
      }
      this.hnswAvailable = true;
      logger.info("‚úÖ hnswlib-node —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω. –í–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫ –≤–∫–ª—é—á–µ–Ω.");
    } catch (err) {
      const code = (err as any)?.code;
      if (code === "ERR_MODULE_NOT_FOUND") {
        logger.info(
          "‚ÑπÔ∏è –í–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫ –æ—Ç–∫–ª—é—á—ë–Ω: –º–æ–¥—É–ª—å hnswlib-node –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–æ–∂–∏–¥–∞–µ–º–æ –Ω–∞ Render).",
        );
      } else {
        logger.warn(
          { err },
          "‚ö†Ô∏è hnswlib-node –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –í–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫ –±—É–¥–µ—Ç –æ—Ç–∫–ª—é—á—ë–Ω.",
        );
      }
      this.hnswAvailable = false;
      this.isInitialized = true;
      return;
    }

    try {
      await this.load();
      logger.info("‚úÖ –í–µ–∫—Ç–æ—Ä–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ —Å –¥–∏—Å–∫–∞.");
    } catch (err) {
      logger.warn(
        { err },
        "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∏–Ω–¥–µ–∫—Å. –°–æ–∑–¥–∞—ë—Ç—Å—è –Ω–æ–≤—ã–π.",
      );
      this.index = new HierarchicalNSWCtor("cosine", this.dimension);
      this.index.initIndex(0);
    }
    this.isInitialized = true;
  }

  /**
   * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏–Ω–¥–µ–∫—Å –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å –¥–∏—Å–∫–∞.
   */
  private async load(): Promise<void> {
    if (!this.hnswAvailable) return; // –Ω–µ—Ç –∏–Ω–¥–µ–∫—Å–∞ ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –≥—Ä—É–∑–∏–º

    const meta = JSON.parse(
      await fs.readFile(this.metaFile, "utf8"),
    ) as IndexMeta;
    if (meta.dim !== this.dimension) {
      throw new Error(
        `Dimension mismatch: index has ${meta.dim}, embedder has ${this.dimension}`,
      );
    }

    const mod: any = await import("hnswlib-node");
    const HierarchicalNSWCtor = mod.HierarchicalNSW;
    const index = new HierarchicalNSWCtor("cosine", this.dimension);
    await index.readIndex(this.indexFile);
    this.index = index;

    this.indexToChunkId = meta.chunkIds;
    this.chunkIdToIndex = new Map(this.indexToChunkId.map((id, i) => [id, i]));

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —á–∞–Ω–∫–æ–≤
    const lines = (await fs.readFile(this.chunksFile, "utf8")).split("\n");
    for (const line of lines) {
      if (!line) continue;
      const chunk = JSON.parse(line) as TextChunk;
      this.chunkMeta.set(chunk.id, chunk);
    }
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–Ω–¥–µ–∫—Å –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –Ω–∞ –¥–∏—Å–∫.
   */
  private async save(): Promise<void> {
    if (!this.hnswAvailable || !this.index) return;
    await this.index.writeIndex(this.indexFile);
    const meta: IndexMeta = {
      dim: this.dimension,
      size: this.index.getCurrentCount(),
      updatedAt: new Date().toISOString(),
      chunkIds: this.indexToChunkId,
    };
    await fs.writeFile(this.metaFile, JSON.stringify(meta));
  }

  /**
   * –î–æ–±–∞–≤–ª—è–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —á–∞–Ω–∫–∏ –≤ –∏–Ω–¥–µ–∫—Å–µ.
   */
  async upsert(chunks: TextChunk[]): Promise<void> {
    if (!this.hnswAvailable) return; // no-op
    if (!this.index) throw new Error("VectorStore –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.");
    if (!chunks.length) return;

    logger.info(
      { count: chunks.length },
      "üìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —á–∞–Ω–∫–æ–≤ –≤ –≤–µ–∫—Ç–æ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å...",
    );
    const texts = chunks.map((c) => c.text);
    const vectors = await this.embedder.embed(texts);

    const newChunks: TextChunk[] = [];
    for (let i = 0; i < chunks.length; i++) {
      const chunk = chunks[i];
      const vector = vectors[i];

      if (!chunk || !vector) {
        logger.warn(
          { chunkIndex: i },
          "Skipping empty chunk or vector during upsert.",
        );
        continue;
      }

      if (this.chunkIdToIndex.has(chunk.id)) {
        logger.warn(
          { chunkId: chunk.id },
          "Chunk already exists. Update not implemented.",
        );
      } else {
        const newIndex = this.index.getCurrentCount();
        this.index.addPoint(vector, newIndex);
        this.indexToChunkId[newIndex] = chunk.id;
        this.chunkIdToIndex.set(chunk.id, newIndex);
        this.chunkMeta.set(chunk.id, chunk);
        newChunks.push(chunk);
      }
    }

    // –î–æ–ø–∏—Å—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ —á–∞–Ω–∫–∏ –≤ —Ñ–∞–π–ª
    if (newChunks.length) {
      const lines = newChunks.map((c) => JSON.stringify(c)).join("\n") + "\n";
      await fs.appendFile(this.chunksFile, lines);
    }

    await this.save();
    logger.info("–í–µ–∫—Ç–æ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω.");
  }

  /**
   * –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–∏—Å–∫ –±–ª–∏–∂–∞–π—à–∏—Ö —Å–æ—Å–µ–¥–µ–π –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É –∑–∞–ø—Ä–æ—Å—É.
   */
  async search(query: string, k: number): Promise<VectorSearchResult[]> {
    if (!this.hnswAvailable || !this.index || this.index.getCurrentCount?.() === 0) return [];

    const [queryVector] = await this.embedder.embed([query]);
    if (!queryVector) return [];

    const result = this.index.searchKnn(queryVector, k);
    if (!result.neighbors.length) return [];

    const searchResults = result.neighbors
      .map((neighborIndex: number, i: number) => {
        const chunkId = this.indexToChunkId[neighborIndex];
        if (!chunkId) return null;

        const chunk = this.chunkMeta.get(chunkId);
        if (!chunk) return null;

        const distance = result.distances[i];
        if (distance === undefined) return null;

        return {
          ...chunk,
          similarity: 1 - distance, // HNSW-lib –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ, –∞ –Ω–µ —Å—Ö–æ–¥—Å—Ç–≤–æ
        } as VectorSearchResult;
      })
      .filter((res: VectorSearchResult | null): res is VectorSearchResult => res !== null);

    return searchResults;
  }

  /**
   * –ü–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∏–Ω–¥–µ–∫—Å –∏–∑ —Ñ–∞–π–ª–∞ —á–∞–Ω–∫–æ–≤.
   */
  async rebuild(): Promise<void> {
    if (!this.hnswAvailable) return; // no-op
    logger.warn("–ü–æ–ª–Ω–∞—è –ø–µ—Ä–µ—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞...");

    const mod: any = await import("hnswlib-node");
    const HierarchicalNSWCtor = mod.HierarchicalNSW;
    this.index = new HierarchicalNSWCtor("cosine", this.dimension);
    this.index.initIndex(0);
    this.chunkMeta.clear();
    this.chunkIdToIndex.clear();
    this.indexToChunkId = [];

    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã –∏–Ω–¥–µ–∫—Å–∞, –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∏ —á–∞–Ω–∫–æ–≤
    await Promise.all([
      fs
        .unlink(this.indexFile)
        .catch(
          (e: unknown) =>
            e &&
            typeof e === "object" &&
            "code" in e &&
            // @ts-ignore
            e.code !== "ENOENT" &&
            Promise.reject(e),
        ),
      fs
        .unlink(this.metaFile)
        .catch(
          (e: unknown) =>
            e &&
            typeof e === "object" &&
            "code" in e &&
            // @ts-ignore
            e.code !== "ENOENT" &&
            Promise.reject(e),
        ),
    ]);
    const lines = (await fs.readFile(this.chunksFile, "utf8")).split("\n");
    const chunks: TextChunk[] = lines
      .filter(Boolean)
      .map((line) => JSON.parse(line) as TextChunk);

    await this.upsert(chunks);
    logger.info("–ü–µ—Ä–µ—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω–¥–µ–∫—Å–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.");
  }
}
