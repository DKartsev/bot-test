import { createClient } from '@supabase/supabase-js';
import { env } from '../config/env';
import { logError, logInfo, logWarning } from '../utils/logger';
import { HttpsProxyAgent } from 'https-proxy-agent';
import fetch from 'node-fetch';
import { createHash } from 'crypto';

// –¢–∏–ø—ã –¥–ª—è RAG –ø–∞–π–ø–ª–∞–π–Ω–∞
interface RAGQuery {
  question: string;
  userId?: string;
  chatId?: string;
  language?: string;
  options?: {
    temperature?: number;
    maxTokens?: number;
    topK?: number;
    minSimilarity?: number;
  };
}

interface RAGResponse {
  answer: string;
  sources: SearchResult[];
  confidence: number;
  searchTime: number;
  processingTime: number;
  totalTime: number;
  metadata: {
    queryProcessed: string;
    searchStrategy: string;
    modelUsed: string;
    fallbackUsed: boolean;
  };
}

interface SearchResult {
  id: string;
  title: string;
  content: string;
  score: number;
  source: string;
  metadata: {
    articleId?: string;
    chunkIndex?: number;
    similarity?: number;
  };
}

interface OpenAIEmbeddingResponse {
  data: Array<{
    embedding: number[];
  }>;
}

/**
 * –û—Å–Ω–æ–≤–Ω–æ–π RAG —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Supabase –∏ OpenAI
 * –†–µ–∞–ª–∏–∑—É–µ—Ç –ø–∞–π–ø–ª–∞–π–Ω: –í–æ–ø—Ä–æ—Å ‚Üí Embeddings ‚Üí –ü–æ–∏—Å–∫ –≤ kb_chunks ‚Üí GPT ‚Üí –û—Ç–≤–µ—Ç
 */
export class SupabaseRAGService {
  private supabase: any;
  private openaiApiKey: string;
  private openaiModel: string;
  private embeddingModel: string;
  private proxyAgent: any;
  private searchCache: Map<string, { results: SearchResult[], timestamp: number }>;
  private readonly CACHE_TTL = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç

  constructor() {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase –∫–ª–∏–µ–Ω—Ç–∞
    this.supabase = createClient(
      env.SUPABASE_URL || process.env.SUPABASE_URL!,
      env.SUPABASE_SERVICE_ROLE_KEY || process.env.SUPABASE_SERVICE_ROLE_KEY!
    );

    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è OpenAI
    this.openaiApiKey = env.OPENAI_API_KEY || process.env.OPENAI_API_KEY!;
    this.openaiModel = env.OPENAI_MODEL || process.env.OPENAI_MODEL || 'gpt-4o-mini';
    this.embeddingModel = env.OPENAI_EMBED_MODEL || process.env.OPENAI_EMBED_MODEL || 'text-embedding-3-small';

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫—ç—à–∞
    this.searchCache = new Map();

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ HTTP –ø—Ä–æ–∫—Å–∏ –¥–ª—è OpenAI API
    const proxyUrl = process.env.OPENAI_PROXY_URL || process.env.HTTPS_PROXY || process.env.HTTP_PROXY;
    if (proxyUrl) {
      this.proxyAgent = new HttpsProxyAgent(proxyUrl);
      logInfo('OpenAI HTTP –ø—Ä–æ–∫—Å–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ RAG —Å–µ—Ä–≤–∏—Å–µ', { 
        proxyUrl,
        source: process.env.OPENAI_PROXY_URL ? 'OPENAI_PROXY_URL' : 
                process.env.HTTPS_PROXY ? 'HTTPS_PROXY' : 'HTTP_PROXY'
      });
    }

    logInfo('SupabaseRAGService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω', {
      supabaseUrl: env.SUPABASE_URL ? '–Ω–∞—Å—Ç—Ä–æ–µ–Ω' : '–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω',
      openaiKey: this.openaiApiKey ? '–Ω–∞—Å—Ç—Ä–æ–µ–Ω' : '–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω',
      openaiModel: this.openaiModel,
      embeddingModel: this.embeddingModel,
      proxyConfigured: !!this.proxyAgent,
    });
  }

  /**
   * –û—Å–Ω–æ–≤–Ω–æ–π –ø–∞–π–ø–ª–∞–π–Ω RAG
   * 1. –°–æ–∑–¥–∞–Ω–∏–µ embeddings –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * 2. –ü–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö —á–∞–Ω–∫–æ–≤ –≤ Supabase —á–µ—Ä–µ–∑ pgvector
   * 3. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ GPT –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —á–∞–Ω–∫–æ–≤
   * 4. –í–æ–∑–≤—Ä–∞—Ç –æ—Ç–≤–µ—Ç–∞ —Å –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏
   */
  async processQuery(query: RAGQuery): Promise<RAGResponse> {
    const startTime = Date.now();
    const searchStartTime = Date.now();

    try {
      logInfo('üöÄ –ù–∞—á–∏–Ω–∞—é RAG –ø–∞–π–ø–ª–∞–π–Ω', {
        question: query.question,
        userId: query.userId,
        chatId: query.chatId,
      });

      // –®–∞–≥ 1: –°–æ–∑–¥–∞–Ω–∏–µ embeddings –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      logInfo('üìä –®–∞–≥ 1: –°–æ–∑–¥–∞–Ω–∏–µ embeddings –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞');
      const queryEmbedding = await this.createQueryEmbedding(query.question);
      
      if (!queryEmbedding || queryEmbedding.length === 0) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å embeddings –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞');
      }

      // –®–∞–≥ 2: –ü–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö —á–∞–Ω–∫–æ–≤ –≤ Supabase —á–µ—Ä–µ–∑ pgvector
      logInfo('üîç –®–∞–≥ 2: –ü–æ–∏—Å–∫ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π —á–µ—Ä–µ–∑ pgvector');
      const topK = query.options?.topK || 5;
      const minSimilarity = query.options?.minSimilarity || 0.5;
      
      // –°–æ–∑–¥–∞–µ–º –∫–ª—é—á –∫—ç—à–∞
      const cacheKey = this.createCacheKey(query.question, topK * 3, minSimilarity);
      
      // –ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–∏—Å–∫
      const initialResults = await this.cachedSearch(cacheKey, () =>
        this.searchSimilarChunks(
          queryEmbedding,
          topK * 3, // –ü–æ–ª—É—á–∞–µ–º –±–æ–ª—å—à–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è MMR
          minSimilarity,
          query.question
        )
      );

      // –ü—Ä–∏–º–µ–Ω—è–µ–º MMR –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
      const searchResults = this.applyMMR(
        initialResults,
        queryEmbedding,
        topK,
        0.75 // lambda = 0.75 (–±–∞–ª–∞–Ω—Å —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ –∏ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è)
      );
      
      const searchTime = Date.now() - searchStartTime;
      logInfo('‚úÖ –ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω', {
        resultsCount: searchResults.length,
        searchTime: `${searchTime}ms`,
      });

      // –®–∞–≥ 3: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ GPT
      logInfo('ü§ñ –®–∞–≥ 3: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ GPT');
      const generationStartTime = Date.now();
      
      let answer: string;
      let confidence: number;
      let fallbackUsed = false;

      if (searchResults.length === 0) {
        // Fallback: –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —á–∞–Ω–∫–æ–≤
        logWarning('‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —á–∞–Ω–∫–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback');
        answer = this.getFallbackAnswer(query.question);
        confidence = 0.1;
        fallbackUsed = true;
      } else {
        // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —á–∞–Ω–∫–æ–≤
        answer = await this.generateAnswerWithGPT(query.question, searchResults, query.options);
        confidence = this.calculateConfidence(searchResults);
      }

      const processingTime = Date.now() - generationStartTime;
      const totalTime = Date.now() - startTime;

      logInfo('‚úÖ RAG –ø–∞–π–ø–ª–∞–π–Ω –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ', {
        question: query.question,
        totalTime: `${totalTime}ms`,
        confidence,
        sourcesCount: searchResults.length,
        fallbackUsed,
      });

      // –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
      await this.logRAGRequest(
        query.question,
        topK,
        minSimilarity,
        searchResults.length,
        searchTime,
        processingTime,
        totalTime,
        confidence
      );

      // –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
      const response: RAGResponse = {
        answer,
        sources: searchResults,
        confidence,
        searchTime,
        processingTime,
        totalTime,
        metadata: {
          queryProcessed: query.question,
          searchStrategy: 'hybrid_vector_text',
          modelUsed: this.openaiModel,
          fallbackUsed,
        },
      };

      return response;

    } catch (error) {
      const totalTime = Date.now() - startTime;
      logError('‚ùå –û—à–∏–±–∫–∞ –≤ RAG –ø–∞–π–ø–ª–∞–π–Ω–µ', {
        error: error instanceof Error ? error.message : 'Unknown error',
        question: query.question,
        totalTime: `${totalTime}ms`,
      });

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º fallback –æ—Ç–≤–µ—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ
      return this.createFallbackResponse(query.question, totalTime);
    }
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ embeddings –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç OpenAI API –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è
   */
  private async createQueryEmbedding(question: string): Promise<number[]> {
    try {
      logInfo('üîÆ –°–æ–∑–¥–∞–Ω–∏–µ embeddings –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞', { question: question.substring(0, 100) });

      const fetchOptions: any = {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${this.openaiApiKey}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          model: this.embeddingModel,
          input: question,
        }),
      };

      // –î–æ–±–∞–≤–ª—è–µ–º HTTP –ø—Ä–æ–∫—Å–∏ –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω
      if (this.proxyAgent) {
        fetchOptions.agent = this.proxyAgent;
      }

      const response = await fetch('https://api.openai.com/v1/embeddings', fetchOptions);

      if (!response.ok) {
        if (response.status === 403) {
          throw new Error(`OpenAI API –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: ${response.status} ${response.statusText}`);
        }
        throw new Error(`OpenAI API –æ—à–∏–±–∫–∞: ${response.status} ${response.statusText}`);
      }

      const data = await response.json() as OpenAIEmbeddingResponse;
      const embedding = data.data[0]?.embedding;

      if (!embedding || embedding.length === 0) {
        throw new Error('–ü—É—Å—Ç–æ–π embedding –æ—Ç OpenAI API');
      }

      logInfo('‚úÖ Embeddings —Å–æ–∑–¥–∞–Ω—ã', { 
        dimension: embedding.length,
        model: this.embeddingModel,
      });

      return embedding;
    } catch (error) {
      logError('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è embeddings', {
        error: error instanceof Error ? error.message : 'Unknown error',
        question: question.substring(0, 100),
      });
      throw error;
    }
  }

  /**
   * –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –≤–µ–∫—Ç–æ—Ä–∞ –¥–æ –µ–¥–∏–Ω–∏—á–Ω–æ–π –Ω–æ—Ä–º—ã (–≤–∞–∂–Ω–æ –¥–ª—è cosine similarity)
   */
  private l2Normalize(vec: number[]): number[] {
    const norm = Math.sqrt(vec.reduce((sum, val) => sum + val * val, 0)) || 1;
    return vec.map(val => val / norm);
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ —Ö–µ—à–∞ –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
   */
  private createCacheKey(question: string, topK: number, minSimilarity: number): string {
    const hash = createHash('md5').update(question.toLowerCase().trim()).digest('hex');
    return `rag:${hash}:k${topK}:s${minSimilarity}`;
  }

  /**
   * –ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–∏—Å–∫
   */
  private async cachedSearch(
    cacheKey: string,
    searchFn: () => Promise<SearchResult[]>
  ): Promise<SearchResult[]> {
    const cached = this.searchCache.get(cacheKey);
    const now = Date.now();

    if (cached && (now - cached.timestamp) < this.CACHE_TTL) {
      logInfo('üéØ –ö—ç—à –ø–æ–ø–∞–¥–∞–Ω–∏–µ', { cacheKey: cacheKey.substring(0, 20) + '...' });
      return cached.results;
    }

    const results = await searchFn();
    this.searchCache.set(cacheKey, { results, timestamp: now });
    
    // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –∫—ç—à–∞
    if (this.searchCache.size > 100) {
      const oldestKey = this.searchCache.keys().next().value;
      this.searchCache.delete(oldestKey);
    }

    return results;
  }

  /**
   * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ RAG –∑–∞–ø—Ä–æ—Å–∞
   */
  private async logRAGRequest(
    question: string,
    topK: number,
    minSimilarity: number,
    resultsCount: number,
    searchTime: number,
    llmTime: number,
    totalTime: number,
    confidence: number
  ): Promise<void> {
    try {
      const questionHash = createHash('md5').update(question.toLowerCase().trim()).digest('hex');
      
      await this.supabase.from('rag_logs').insert({
        question_hash: questionHash,
        question_text: question.substring(0, 500), // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
        top_k: topK,
        min_similarity: minSimilarity,
        results_count: resultsCount,
        search_time_ms: searchTime,
        llm_time_ms: llmTime,
        total_time_ms: totalTime,
        model_used: this.openaiModel,
        confidence: confidence
      });
    } catch (error) {
      logWarning('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è RAG –∑–∞–ø—Ä–æ—Å–∞', { error: error.message });
    }
  }

  /**
   * MMR (Maximal Marginal Relevance) –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
   * –£–º–µ–Ω—å—à–∞–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç—ã —Å–º—ã—Å–ª–æ–≤ –≤ —Ç–æ–ø-K —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
   */
  private applyMMR(
    candidates: SearchResult[],
    queryEmbedding: number[],
    k: number,
    lambda: number = 0.7
  ): SearchResult[] {
    if (candidates.length <= k) {
      return candidates;
    }

    const selected: SearchResult[] = [];
    const remaining = [...candidates];

    // –ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å—Ö–æ–¥—Å—Ç–≤–∞
    const textSimilarity = (a: string, b: string): number => {
      const wordsA = new Set(a.toLowerCase().split(/\W+/).filter(Boolean));
      const wordsB = new Set(b.toLowerCase().split(/\W+/).filter(Boolean));
      const intersection = [...wordsA].filter(word => wordsB.has(word)).length;
      return intersection / Math.max(1, Math.min(wordsA.size, wordsB.size));
    };

    while (selected.length < k && remaining.length > 0) {
      let bestIdx = 0;
      let bestScore = -Infinity;

      for (let i = 0; i < remaining.length; i++) {
        const relevance = remaining[i].score; // –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å (similarity)
        
        // –í—ã—á–∏—Å–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ —Å —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏
        const maxSimilarity = selected.length === 0 
          ? 0 
          : Math.max(...selected.map(s => textSimilarity(s.content, remaining[i].content)));

        // MMR —Ñ–æ—Ä–º—É–ª–∞: lambda * relevance - (1 - lambda) * max_similarity
        const mmrScore = lambda * relevance - (1 - lambda) * maxSimilarity;

        if (mmrScore > bestScore) {
          bestScore = mmrScore;
          bestIdx = i;
        }
      }

      selected.push(remaining[bestIdx]);
      remaining.splice(bestIdx, 1);
    }

    logInfo('üéØ MMR –ø–µ—Ä–µ—Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ', {
      originalCount: candidates.length,
      selectedCount: selected.length,
      lambda,
      avgRelevance: selected.reduce((sum, s) => sum + s.score, 0) / selected.length
    });

    return selected;
  }

  /**
   * –ü–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö —á–∞–Ω–∫–æ–≤ —á–µ—Ä–µ–∑ pgvector RPC —Ñ—É–Ω–∫—Ü–∏—é
   * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –≥–∏–±—Ä–∏–¥–Ω—ã–π –ø–æ–∏—Å–∫: –≤–µ–∫—Ç–æ—Ä–Ω—ã–π + —Ç–µ–∫—Å—Ç–æ–≤—ã–π
   */
  private async searchSimilarChunks(
    queryEmbedding: number[],
    topK: number = 5,
    minSimilarity: number = 0.5,
    questionText?: string
  ): Promise<SearchResult[]> {
    try {
      logInfo('üîç –ì–∏–±—Ä–∏–¥–Ω—ã–π –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ pgvector RPC', {
        topK,
        minSimilarity,
        embeddingDimension: queryEmbedding.length,
        hasQuestionText: !!questionText,
      });

      // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤–µ–∫—Ç–æ—Ä –∑–∞–ø—Ä–æ—Å–∞
      const normalizedQuery = this.l2Normalize(queryEmbedding);

      // –í—ã–∑—ã–≤–∞–µ–º RPC —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
      const { data, error } = await this.supabase.rpc('rag_hybrid_search', {
        q_vec: normalizedQuery,
        q_text: questionText || '',
        k: topK,
        min_sim: minSimilarity
      });

      if (error) {
        logError('‚ùå –û—à–∏–±–∫–∞ RPC –ø–æ–∏—Å–∫–∞', { error: error.message });
        throw new Error(`Supabase RPC –æ—à–∏–±–∫–∞: ${error.message}`);
      }

      if (!data || data.length === 0) {
        logWarning('‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ—Ö–æ–∂–∏—Ö —á–∞–Ω–∫–æ–≤ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π');
        return [];
      }

      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç SearchResult
      const results: SearchResult[] = data.map((row: any, index: number) => ({
        id: row.id,
        title: `–ß–∞–Ω–∫ ${row.chunk_index + 1}`,
        content: row.chunk_text,
        score: row.cos_sim, // –ò—Å–ø–æ–ª—å–∑—É–µ–º cosine similarity –¥–ª—è –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏
        source: 'supabase_hybrid',
        metadata: {
          articleId: row.article_id,
          chunkIndex: row.chunk_index,
          similarity: row.cos_sim,
          tsRank: row.ts_rank_score,
          hybrid: row.hybrid_score,
          rank: index + 1
        },
      }));

      logInfo('‚úÖ –ì–∏–±—Ä–∏–¥–Ω—ã–π –ø–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω', {
        resultsCount: results.length,
        avgSimilarity: results.length > 0 
          ? (results.reduce((sum, r) => sum + r.score, 0) / results.length).toFixed(3)
          : 0,
        topSimilarity: results.length > 0 ? results[0].score : 0,
        avgHybridScore: results.length > 0 
          ? (results.reduce((sum, r) => sum + (r.metadata as any).hybrid, 0) / results.length).toFixed(3)
          : 0,
      });

      return results;
    } catch (error) {
      logError('‚ùå –û—à–∏–±–∫–∞ –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞', {
        error: error instanceof Error ? error.message : 'Unknown error',
        topK,
        minSimilarity,
      });
      throw error;
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ GPT –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —á–∞–Ω–∫–æ–≤
   * –°—Ç—Ä–æ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–æ–ª—å–∫–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
   */
  private async generateAnswerWithGPT(
    question: string,
    sources: SearchResult[],
    options?: RAGQuery['options']
  ): Promise<string> {
    try {
      logInfo('ü§ñ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ GPT', {
        question: question.substring(0, 100),
        sourcesCount: sources.length,
        model: this.openaiModel,
      });

      // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è GPT —Å –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏
      const prompt = this.buildRAGPrompt(question, sources);

      const fetchOptions: any = {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${this.openaiApiKey}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          model: this.openaiModel,
          messages: [
            {
              role: 'system',
              content: '–û—Ç–≤–µ—á–∞–π –≤ —Å—Ç—Ä–æ–≥–æ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏. –í–æ–∑–≤—Ä–∞—â–∞–π —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–π JSON.',
            },
            {
              role: 'user',
              content: prompt,
            },
          ],
          max_tokens: options?.maxTokens || 700,
          temperature: options?.temperature || 0.2,
        }),
      };

      // –î–æ–±–∞–≤–ª—è–µ–º HTTP –ø—Ä–æ–∫—Å–∏ –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω
      if (this.proxyAgent) {
        fetchOptions.agent = this.proxyAgent;
      }

      const response = await fetch('https://api.openai.com/v1/chat/completions', fetchOptions);

      if (!response.ok) {
        if (response.status === 403) {
          throw new Error(`OpenAI API –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: ${response.status} ${response.statusText}`);
        }
        throw new Error(`OpenAI API –æ—à–∏–±–∫–∞: ${response.status} ${response.statusText}`);
      }

      const data: any = await response.json();
      const rawAnswer = data.choices[0]?.message?.content;

      if (!rawAnswer) {
        throw new Error('–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç OpenAI API');
      }

      // –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –æ—Ç–≤–µ—Ç
      let answer: string;
      try {
        const parsed = JSON.parse(rawAnswer);
        if (parsed.answer) {
          answer = parsed.answer;
          // –î–æ–±–∞–≤–ª—è–µ–º —Ü–∏—Ç–∞—Ç—ã –µ—Å–ª–∏ –µ—Å—Ç—å
          if (parsed.citations && parsed.citations.length > 0) {
            const citations = parsed.citations.map((c: any) => 
              `[–ò—Å—Ç–æ—á–Ω–∏–∫ ${c.source}] ${c.quote}`
            ).join('\n');
            answer += `\n\n–¶–∏—Ç–∞—Ç—ã:\n${citations}`;
          }
          if (parsed.notes) {
            answer += `\n\n–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: ${parsed.notes}`;
          }
        } else {
          answer = rawAnswer;
        }
      } catch (e) {
        // –ï—Å–ª–∏ –Ω–µ JSON, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
        answer = rawAnswer;
      }

      logInfo('‚úÖ –û—Ç–≤–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —á–µ—Ä–µ–∑ GPT', {
        answerLength: answer.length,
        model: this.openaiModel,
        isJson: rawAnswer.startsWith('{'),
      });

      return answer;
    } catch (error) {
      logError('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ GPT', {
        error: error instanceof Error ? error.message : 'Unknown error',
        question: question.substring(0, 100),
      });
      throw error;
    }
  }

  /**
   * –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è RAG –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å —Ü–∏—Ç–∞—Ç–∞–º–∏
   */
  private buildRAGPrompt(question: string, sources: SearchResult[]): string {
    const context = sources.map((source, index) => 
      `–ò—Å—Ç–æ—á–Ω–∏–∫ ${index + 1} (similarity=${source.score.toFixed(3)}):\n${source.content}`
    ).join('\n\n');

    return `–¢—ã ‚Äî –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å–ª—É–∂–±—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏. –û—Ç–≤–µ—á–∞–π —Å—Ç—Ä–æ–≥–æ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º –Ω–∏–∂–µ. –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ‚Äî —Å–∫–∞–∂–∏ –æ–± —ç—Ç–æ–º –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ —ç—Å–∫–∞–ª–∞—Ü–∏—é.

=== –ò–°–¢–û–ß–ù–ò–ö–ò ===
${context}

=== –ó–ê–î–ê–ù–ò–ï ===
1) –î–∞–π —Ç–æ—á–Ω—ã–π, –∫—Ä–∞—Ç–∫–∏–π –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
2) –ü—Ä–∏–≤–µ–¥–∏ –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ü–∏—Ç–∞—Ç—ã —Å —É–∫–∞–∑–∞–Ω–∏–µ–º "–ò—Å—Ç–æ—á–Ω–∏–∫ N".
3) –ù–∏—á–µ–≥–æ –Ω–µ –≤—ã–¥—É–º—ã–≤–∞–π –≤–Ω–µ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤.
4) –í–µ—Ä–Ω–∏ JSON —Å –ø–æ–ª—è–º–∏:
{
  "answer": "–∫—Ä–∞—Ç–∫–∏–π –æ—Ç–≤–µ—Ç",
  "citations": [{"source": N, "quote": "–∫–æ—Ä–æ—Ç–∫–∞—è —Ü–∏—Ç–∞—Ç–∞"}],
  "notes": "–ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏"
}

–í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: "${question}"`;
  }

  /**
   * –†–∞—Å—á–µ—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–∞—á–µ—Å—Ç–≤–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
   */
  private calculateConfidence(sources: SearchResult[]): number {
    if (sources.length === 0) return 0.1;

    // –°—Ä–µ–¥–Ω—è—è similarity –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —á–∞–Ω–∫–æ–≤
    const avgSimilarity = sources.reduce((sum, s) => sum + s.score, 0) / sources.length;
    
    // –ë–æ–Ω—É—Å –∑–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ (–¥–æ 3 –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤)
    const sourceBonus = Math.min(sources.length * 0.1, 0.3);
    
    // –ò—Ç–æ–≥–æ–≤–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
    const confidence = Math.min(1.0, avgSimilarity + sourceBonus);
    
    logInfo('üìä –†–∞—Å—á–µ—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏', {
      avgSimilarity: avgSimilarity.toFixed(3),
      sourceBonus: sourceBonus.toFixed(3),
      finalConfidence: confidence.toFixed(3),
      sourcesCount: sources.length,
    });

    return confidence;
  }

  /**
   * Fallback –æ—Ç–≤–µ—Ç –∫–æ–≥–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —á–∞–Ω–∫–æ–≤
   */
  private getFallbackAnswer(question: string): string {
    const fallbackAnswers = [
      '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –Ω–∞—à–µ–ª –ø–æ–¥—Ö–æ–¥—è—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π –ø–æ –≤–∞—à–µ–º—É –≤–æ–ø—Ä–æ—Å—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏.',
      '–í –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞—à–∏–º–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º–∏.',
      '–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ –¥–µ—Ç–∞–ª–∏ –≤–æ–ø—Ä–æ—Å–∞ –∏–ª–∏ –ø–µ—Ä–µ–¥–∞–º –≤–∞—à –∑–∞–ø—Ä–æ—Å –æ–ø–µ—Ä–∞—Ç–æ—Ä—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏.',
    ];

    // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π fallback –æ—Ç–≤–µ—Ç
    const randomIndex = Math.floor(Math.random() * fallbackAnswers.length);
    return fallbackAnswers[randomIndex];
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ fallback –æ—Ç–≤–µ—Ç–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
   */
  private createFallbackResponse(question: string, totalTime: number): RAGResponse {
    return {
      answer: '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏.',
      sources: [],
      confidence: 0.1,
      searchTime: 0,
      processingTime: 0,
      totalTime,
      metadata: {
        queryProcessed: question,
        searchStrategy: 'fallback',
        modelUsed: 'none',
        fallbackUsed: true,
      },
    };
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ RAG –ø–∞–π–ø–ª–∞–π–Ω–∞
   */
  async testPipeline(testQuery: string): Promise<{ success: boolean; response?: RAGResponse; error?: string }> {
    try {
      const query: RAGQuery = {
        question: testQuery,
        language: 'ru',
        options: {
          temperature: 0.3,
          maxTokens: 1000,
          topK: 5,
          minSimilarity: 0.5,
        },
      };

      const response = await this.processQuery(query);
      
      return {
        success: true,
        response,
      };
    } catch (error) {
      return {
        success: false,
        error: error instanceof Error ? error.message : 'Unknown error',
      };
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞
   */
  async healthCheck(): Promise<{
    status: 'healthy' | 'degraded' | 'unhealthy';
    services: {
      supabase: boolean;
      openai: boolean;
    };
    timestamp: string;
  }> {
    const timestamp = new Date().toISOString();
    
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º Supabase
      const { data: supabaseTest, error: supabaseError } = await this.supabase
        .from('kb_chunks')
        .select('id')
        .limit(1);

      const supabaseHealthy = !supabaseError;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º OpenAI (–ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å)
      let openaiHealthy = false;
      try {
        const response = await fetch('https://api.openai.com/v1/models', {
          headers: {
            'Authorization': `Bearer ${this.openaiApiKey}`,
          },
        });
        openaiHealthy = response.ok;
      } catch (error) {
        openaiHealthy = false;
      }

      const status = supabaseHealthy && openaiHealthy ? 'healthy' : 
                    supabaseHealthy || openaiHealthy ? 'degraded' : 'unhealthy';

      return {
        status,
        services: {
          supabase: supabaseHealthy,
          openai: openaiHealthy,
        },
        timestamp,
      };
    } catch (error) {
      return {
        status: 'unhealthy',
        services: {
          supabase: false,
          openai: false,
        },
        timestamp,
      };
    }
  }
}
