import TelegramBot = require('node-telegram-bot-api');
import { ChatService } from './chat';
import { MessageService } from './message';
import { UserService } from './user';
import { SupabaseRAGService } from './supabaseRAGService';
import logger from '../utils/logger';

// –¢–∏–ø—ã –¥–ª—è Telegram
interface TelegramUser {
  id: number;
  username?: string;
  first_name: string;
  last_name?: string;
  language_code?: string;
}

interface TelegramMessage {
  message_id: number;
  from: TelegramUser;
  chat: {
    id: number;
    type: string;
    title?: string;
    username?: string;
    first_name?: string;
    last_name?: string;
  };
  date: number;
  text?: string;
  caption?: string;
  photo?: any[];
  document?: any;
  audio?: any;
  voice?: any;
  video?: any;
  sticker?: any;
  location?: any;
  contact?: any;
  reply_to_message?: TelegramMessage;
  forward_from?: TelegramUser;
  forward_from_chat?: any;
  forward_date?: number;
  edit_date?: number;
  media_group_id?: string;
  author_signature?: string;
  via_bot?: any;
  has_protected_content?: boolean;
  is_automatic_forward?: boolean;
  has_media_spoiler?: boolean;
}

interface TelegramCallbackQuery {
  id: string;
  from: TelegramUser;
  message?: TelegramMessage;
  inline_message_id?: string;
  chat_instance: string;
  data?: string;
  game_short_name?: string;
}

export class TelegramService {
  private bot: TelegramBot;
  private userService: UserService;
  private chatService: ChatService;
  private messageService: MessageService;
  private ragService: SupabaseRAGService;

  constructor(token: string) {
    console.log('ü§ñ TelegramService –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –≤—ã–∑–≤–∞–Ω —Å —Ç–æ–∫–µ–Ω–æ–º:', token ? '–µ—Å—Ç—å' : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
    if (!token) {
      console.warn('Telegram Bot Token –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. Telegram —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.');
      this.bot = null as any; // –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    } else {
      console.log('‚úÖ –°–æ–∑–¥–∞–µ–º TelegramBot —Å —Ç–æ–∫–µ–Ω–æ–º');
      this.bot = new TelegramBot(token, { polling: false });
    }
    this.userService = new UserService();
    this.chatService = new ChatService();
    this.messageService = new MessageService();
    this.ragService = new SupabaseRAGService();

    logger.info('Telegram —Å–µ—Ä–≤–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω', { token: `${token.substring(0, 10)}...` });
  }

  async handleStartCommand(chatId: number, userId: number, username?: string): Promise<void> {
    try {
      console.log('üöÄ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start', { chatId, userId, username });
      
      // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const user = await this.userService.getOrCreate({
        telegram_id: userId,
        username,
        first_name: username || 'User',
        last_name: undefined,
        avatar_url: undefined,
      });

      console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω/–Ω–∞–π–¥–µ–Ω:', { id: user.id, telegram_id: user.telegram_id });

      // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º —á–∞—Ç
      const chat = await this.chatService.create({
        user_id: user.id,
        status: 'waiting',
        priority: 'medium',
        source: 'telegram',
      });

      console.log('üí¨ –ß–∞—Ç —Å–æ–∑–¥–∞–Ω/–Ω–∞–π–¥–µ–Ω:', { id: chat.id, user_id: chat.user_id });

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram API (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω)
      if (this.bot) {
        try {
          await this.sendMessage(chatId, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?');
        } catch (error) {
          console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram (–≤–æ–∑–º–æ–∂–Ω–æ, —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º):', error.message);
        }
      } else {
        console.log('‚ö†Ô∏è Telegram –±–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è');
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      await this.messageService.createBotMessage(chat.id,
        '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?',
      );

      // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await this.userService.updateActivity(userId);
    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /start:', error);
      throw error;
    }
  }

  async handleMessage(message: Record<string, unknown>): Promise<void> {
    try {
      console.log('üéØ handleMessage –≤—ã–∑–≤–∞–Ω —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º:', JSON.stringify(message, null, 2));
      
      const chatId = (message as any).chat.id;
      const userId = (message as any).from.id;
      const text = (message as any).text || '';
      // const _messageId = message.message_id; // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è

      console.log('üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è:', { chatId, userId, text });

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—É /start
      if (text === '/start') {
        console.log('‚≠ê –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start');
        await this.handleStartCommand(Number(chatId), Number(userId), (message as any).from.username);
        return;
      }

      // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      console.log('üë§ –ü–æ–ª—É—á–µ–Ω–∏–µ/—Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
      const user = await this.userService.getOrCreate({
        telegram_id: userId,
        username: (message as any).from.username,
        first_name: (message as any).from.first_name,
        last_name: (message as any).from.last_name,
        avatar_url: undefined,
      });
      console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω/–Ω–∞–π–¥–µ–Ω:', user.id);

      // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —á–∞—Ç
      console.log('üí¨ –°–æ–∑–¥–∞–Ω–∏–µ —á–∞—Ç–∞...');
      const chat = await this.chatService.create({
        user_id: user.id,
        status: 'waiting',
        priority: 'medium',
        source: 'telegram',
      });
      console.log('‚úÖ –ß–∞—Ç —Å–æ–∑–¥–∞–Ω:', chat.id);

      // –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      console.log('üìù –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
      await this.messageService.createUserMessage(Number(chatId).toString(), user.id, String(text));
      console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ–∑–¥–∞–Ω–æ');

      // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      console.log('‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
      await this.userService.updateActivity(Number(userId));
      console.log('‚úÖ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞');

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ (–ª–æ–≥–∏–∫–∞ –±–æ—Ç–∞)
      console.log('ü§ñ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–æ–º...');
      await this.processUserMessage(Number(chat.id), String(text), Number(userId));
      console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –±–æ—Ç–æ–º');
    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      throw error;
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  async handleEditedMessage(message: TelegramMessage): Promise<void> {
    try {
      logger.info('–ü–æ–ª—É—á–µ–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç Telegram', {
        messageId: message.message_id,
        fromId: message.from.id,
        chatId: message.chat.id,
        text: message.text?.substring(0, 100),
      });

      // –ù–∞—Ö–æ–¥–∏–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ
      if (message.text) {
        await this.messageService.updateMessageByTelegramId(message.message_id, {
          text: message.text,
          metadata: {
            source: 'telegram',
            channel: 'edit',
            telegram_message_id: message.message_id,
            telegram_edit_date: message.edit_date,
            is_edited: true,
          },
        });
      }

    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è Telegram', {
        error: error instanceof Error ? error.message : 'Unknown error',
        messageId: message.message_id,
        fromId: message.from.id,
      });
    }
  }

  async handleCallbackQuery(query: TelegramCallbackQuery): Promise<void> {
    try {
      if (!query.message || !query.from || !query.data) {
        throw new Error('–ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ callback query');
      }
      const chatId = Number(query.message.chat.id);
      const userId = Number(query.from.id);
      const data = String(query.data);

      // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const user = await this.userService.getOrCreate({
        telegram_id: userId,
        username: query.from.username,
        first_name: query.from.first_name,
        last_name: query.from.last_name,
        avatar_url: undefined,
      });

      // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —á–∞—Ç
      const chat = await this.chatService.create({
        user_id: user.id,
        status: 'waiting',
        priority: 'medium',
        source: 'telegram',
      });

      // –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await this.messageService.createBotMessage(chatId.toString(), `Callback: ${data}`);

      // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await this.userService.updateActivity(userId);

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback (–ª–æ–≥–∏–∫–∞ –±–æ—Ç–∞)
      await this.processCallbackQuery(Number(chat.id), data, userId);
    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback query:', error);
      throw error;
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
  private async handleMediaMessage(message: TelegramMessage, chatId: number, userId: number): Promise<void> {
    try {
      let mediaType = 'unknown';
      let mediaData: any = {};

      if (message.photo) {
        mediaType = 'photo';
        mediaData = {
          file_id: message.photo[message.photo.length - 1].file_id,
          width: message.photo[message.photo.length - 1].width,
          height: message.photo[message.photo.length - 1].height,
        };
      } else if (message.document) {
        mediaType = 'document';
        mediaData = {
          file_id: message.document.file_id,
          file_name: message.document.file_name,
          mime_type: message.document.mime_type,
          file_size: message.document.file_size,
        };
      } else if (message.audio) {
        mediaType = 'audio';
        mediaData = {
          file_id: message.audio.file_id,
          duration: message.audio.duration,
          title: message.audio.title,
          performer: message.audio.performer,
        };
      } else if (message.voice) {
        mediaType = 'voice';
        mediaData = {
          file_id: message.voice.file_id,
          duration: message.voice.duration,
        };
      } else if (message.video) {
        mediaType = 'video';
        mediaData = {
          file_id: message.video.file_id,
          duration: message.video.duration,
          width: message.video.width,
          height: message.video.height,
        };
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ–¥–∏–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
      await this.messageService.createMessage({
        chatId: chatId.toString(),
        authorType: 'user',
        authorId: userId,
        text: message.caption || `[${mediaType.toUpperCase()}]`,
        metadata: {
          media_type: mediaType,
          media_data: mediaData,
          telegram_date: message.date,
          telegram_message_id: message.message_id,
        },
      });

    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ–¥–∏–∞ —Å–æ–æ–±—â–µ–Ω–∏—è Telegram', {
        error: error instanceof Error ? error.message : 'Unknown error',
        messageId: message.message_id,
        chatId,
        userId,
      });
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —ç—Å–∫–∞–ª–∞—Ü–∏–∏
  private async checkEscalation(chat: any, message: TelegramMessage): Promise<void> {
    try {
      // –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ —ç—Å–∫–∞–ª–∞—Ü–∏–∏: –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
      const escalationKeywords = ['–ø–æ–º–æ—â—å', '–ø–æ–¥–¥–µ—Ä–∂–∫–∞', '–æ–ø–µ—Ä–∞—Ç–æ—Ä', '—á–µ–ª–æ–≤–µ–∫', '—á–µ–ª–æ–≤–µ–∫–∞'];
      const messageText = message.text?.toLowerCase() || '';

      const needsEscalation = escalationKeywords.some(keyword =>
        messageText.includes(keyword),
      );

      if (needsEscalation && chat.status === 'waiting') {
        const chatId = Number(chat.id);
        await this.chatService.escalateChat(chatId.toString(), '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —ç—Å–∫–∞–ª–∞—Ü–∏—è –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É');
        logger.info('–ß–∞—Ç —ç—Å–∫–∞–ª–∏—Ä–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏', {
          chatId,
          reason: '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —ç—Å–∫–∞–ª–∞—Ü–∏—è –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É',
          messageText: message.text?.substring(0, 100),
        });
      }

    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —ç—Å–∫–∞–ª–∞—Ü–∏–∏', {
        error: error instanceof Error ? error.message : 'Unknown error',
        chatId: (chat).id,
      });
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –¥–∞–Ω–Ω—ã—Ö
  private async processCallbackData(data: string, userId: number): Promise<void> {
    try {
      const [action] = data.split(':');

      switch (action) {
        case 'help':
          await this.sendHelpMessage(userId);
          break;
        case 'contact':
          await this.sendContactInfo(userId);
          break;
        case 'menu':
          await this.sendMainMenu(userId);
          break;
        default:
          logger.warn('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback action', { action, data, userId });
      }

    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback –¥–∞–Ω–Ω—ã—Ö', {
        error: error instanceof Error ? error.message : 'Unknown error',
        data,
        userId,
      });
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
  async sendMessage(chatId: number, text: string, options?: {
    parse_mode?: string;
    reply_markup?: Record<string, unknown>;
    disable_web_page_preview?: boolean;
  }): Promise<unknown> {
    try {
      const messageOptions: Record<string, unknown> = {};

      if (options?.parse_mode) {
        messageOptions['parse_mode'] = options.parse_mode;
      }
      if (options?.reply_markup) {
        messageOptions['reply_markup'] = options.reply_markup;
      }
      if (options?.disable_web_page_preview) {
        messageOptions['disable_web_page_preview'] = options.disable_web_page_preview;
      }

      const result = await this.bot.sendMessage(chatId, text, messageOptions);
      return result;
    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      throw error;
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
  async sendMessageWithKeyboard(chatId: number, text: string, keyboard: string[][]): Promise<unknown> {
    const replyMarkup = {
      keyboard: keyboard,
      resize_keyboard: true,
      one_time_keyboard: false,
    };

    return this.sendMessage(chatId, text, {
      parse_mode: 'HTML',
      reply_markup: replyMarkup,
    });
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
  async sendMessageWithInlineKeyboard(chatId: number, text: string, inlineKeyboard: Array<Array<{ text: string; callback_data: string }>>): Promise<unknown> {
    const replyMarkup = {
      inline_keyboard: inlineKeyboard,
    };

    return this.sendMessage(chatId, text, {
      parse_mode: 'HTML',
      reply_markup: replyMarkup,
    });
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
  async sendMainMenu(chatId: number): Promise<void> {
    const keyboard = [
      ['üìã –ü–æ–º–æ—â—å', 'üìû –°–≤—è–∑–∞—Ç—å—Å—è'],
      ['‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', 'üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏'],
    ];

    await this.sendMessageWithKeyboard(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', keyboard);
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–º–æ—â–∏
  async sendHelpMessage(chatId: number): Promise<void> {
    const helpText = `
ü§ñ <b>–°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏</b>

–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å –ø–æ –ª—é–±—ã–º –≤–æ–ø—Ä–æ—Å–∞–º.

<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/contact - –°–≤—è–∑–∞—Ç—å—Å—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º

<b>–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:</b>
1. –û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É
2. –ë–æ—Ç –ø–æ–ø—ã—Ç–∞–µ—Ç—Å—è –ø–æ–º–æ—á—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
3. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤–∞—Å –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏—Ç –∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É
4. –û–ø–µ—Ä–∞—Ç–æ—Ä –æ—Ç–≤–µ—Ç–∏—Ç –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è

<b>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:</b>
24/7 - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç–≤–µ—Ç—ã
9:00-18:00 - –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã
    `;

    await this.sendMessage(chatId, helpText, {
      parse_mode: 'HTML',
    });
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
  async sendContactInfo(chatId: number): Promise<void> {
    const contactText = `
üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b>

<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> +7 (XXX) XXX-XX-XX
<b>Email:</b> support@example.com
<b>–°–∞–π—Ç:</b> https://example.com

<b>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤:</b>
–ü–Ω-–ü—Ç: 9:00-18:00
–°–±-–í—Å: 10:00-16:00

<b>–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞:</b>
–ö—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ —á–µ—Ä–µ–∑ –±–æ—Ç–∞
    `;

    await this.sendMessage(chatId, contactText, {
      parse_mode: 'HTML',
    });
  }

  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook
  async setWebhook(url: string): Promise<boolean> {
    try {
      const result = await this.bot.setWebHook(url);
      logger.info('Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:', result);
      return result;
    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook:', error);
      throw error;
    }
  }

  // –£–¥–∞–ª–µ–Ω–∏–µ webhook
  async deleteWebhook(): Promise<boolean> {
    try {
      const result = await this.bot.deleteWebHook();
      logger.info('Webhook —É–¥–∞–ª–µ–Ω:', result);
      return result;
    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è webhook:', error);
      throw error;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ webhook
  async getWebhookInfo(): Promise<unknown> {
    try {
      const webhookInfo = await this.bot.getWebHookInfo();
      logger.info('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ webhook –ø–æ–ª—É—á–µ–Ω–∞', { webhookInfo });
      return webhookInfo;
    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ webhook', {
        error: error instanceof Error ? error.message : 'Unknown error',
      });
      throw error;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ
  async getBotInfo(): Promise<unknown> {
    try {
      const botInfo = await this.bot.getMe();
      logger.info('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ –ø–æ–ª—É—á–µ–Ω–∞', { botInfo });
      return botInfo;
    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ', {
        error: error instanceof Error ? error.message : 'Unknown error',
      });
      throw error;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
  async getUpdates(offset?: number, limit?: number, timeout?: number): Promise<unknown[]> {
    try {
      const updates = await this.bot.getUpdates({
        offset,
        limit,
        timeout,
      });
      return updates;
    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π', {
        error: error instanceof Error ? error.message : 'Unknown error',
      });
      throw error;
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
  async handleIncomingMessage(update: Record<string, unknown>): Promise<void> {
    try {
      if (update['message']) {
        await this.handleMessage(update['message'] as Record<string, unknown>);
      } else if (update['edited_message']) {
        await this.handleEditedMessage(update['edited_message'] as TelegramMessage);
      } else if (update['callback_query']) {
        await this.handleCallbackQuery(update['callback_query'] as TelegramCallbackQuery);
      }
    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è', {
        error: error instanceof Error ? error.message : 'Unknown error',
        update,
      });
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º RAG
  async processUserMessage(chatId: number, text: string, userId: number): Promise<void> {
    try {
      logger.info('ü§ñ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ RAG', {
        chatId,
        userId,
        text: text.substring(0, 100),
      });

      let response: string;

      try {
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ RAG –ø–∞–π–ø–ª–∞–π–Ω
        const ragResponse = await this.ragService.processQuery({
          question: text,
          userId: userId.toString(),
          chatId: chatId.toString(),
          language: 'ru',
          options: {
            temperature: 0.3,
            maxTokens: 1000,
            topK: 5,
            minSimilarity: 0.5,
          },
        });

        // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å —É—á–µ—Ç–æ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        response = ragResponse.answer;
        
        // –ï—Å–ª–∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –Ω–∏–∑–∫–∞—è, –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É
        if (ragResponse.confidence < 0.6) {
          response += '\n\n–ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–º–æ—â—å, —è –ø–µ—Ä–µ–¥–∞–º –≤–∞—à –≤–æ–ø—Ä–æ—Å –æ–ø–µ—Ä–∞—Ç–æ—Ä—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏.';
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
        if (ragResponse.sources.length > 0 && ragResponse.confidence > 0.7) {
          response += `\n\nüìö –ù–∞–π–¥–µ–Ω–æ ${ragResponse.sources.length} —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤.`;
        }

        logger.info('‚úÖ RAG –æ—Ç–≤–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω', {
          chatId,
          userId,
          confidence: ragResponse.confidence,
          sourcesCount: ragResponse.sources.length,
          totalTime: ragResponse.totalTime,
          fallbackUsed: ragResponse.metadata.fallbackUsed,
        });

      } catch (ragError) {
        logger.warn('‚ö†Ô∏è RAG —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –æ—Ç–≤–µ—Ç', {
          error: ragError instanceof Error ? ragError.message : 'Unknown error',
          chatId,
          userId,
        });

        // –ü—Ä–æ—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –±–µ–∑ RAG
        response = '–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ! –Ø –ø–æ–ª—É—á–∏–ª –µ–≥–æ –∏ –ø–µ—Ä–µ–¥–∞–º –æ–ø–µ—Ä–∞—Ç–æ—Ä—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏.';
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
      await this.sendMessage(chatId, response);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞
      await this.messageService.createBotMessage(chatId.toString(), response);

      logger.info('‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é', {
        chatId,
        userId,
        response: response.substring(0, 100),
      });

    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', {
        error: error instanceof Error ? error.message : 'Unknown error',
        chatId,
        userId,
        text: text.substring(0, 100),
      });

      // Fallback –æ—Ç–≤–µ—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ
      const fallbackResponse = '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏.';
      
      try {
        await this.sendMessage(chatId, fallbackResponse);
        await this.messageService.createBotMessage(chatId.toString(), fallbackResponse);
      } catch (sendError) {
        logger.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ fallback –æ—Ç–≤–µ—Ç–∞', { sendError });
      }
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback query
  async processCallbackQuery(chatId: number, data: string, userId: number): Promise<void> {
    try {
      await this.processCallbackData(data, userId);
    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback query', {
        error: error instanceof Error ? error.message : 'Unknown error',
        chatId,
        userId,
        data,
      });
    }
  }
}
