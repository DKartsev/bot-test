import { Request, Response, NextFunction } from 'express';
import jwt from 'jsonwebtoken';
import { logError, logWarn } from '../utils/logger';

// –†–∞—Å—à–∏—Ä—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å Request –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
declare global {
  namespace Express {
    interface Request {
      user?: {
        id: number;
        email: string;
        role: string;
        type: string;
      };
      operator?: {
        id: number;
        email: string;
        role: string;
      };
    }
  }
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è JWT payload
interface JWTPayload {
  id: number;
  email: string;
  role: string;
  type: string;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
const extractToken = (req: Request): string | null => {
  const authHeader = req.headers.authorization;
  
  if (!authHeader) {
    return null;
  }

  // –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: "Bearer <token>" –∏ –ø—Ä–æ—Å—Ç–æ "<token>"
  if (authHeader.startsWith('Bearer ')) {
    return authHeader.substring(7);
  }

  return authHeader;
};

// –û—Å–Ω–æ–≤–Ω–æ–π middleware –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
export const authenticateToken = (req: Request, res: Response, next: NextFunction): void => {
  try {
    const token = extractToken(req);
    
    if (!token) {
      logWarn('–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏', {
        error: { code: 'MISSING_TOKEN', message: '–¢–æ–∫–µ–Ω –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω' },
        ip: req.ip,
        method: req.method,
        path: req.path,
        userAgent: req.get('User-Agent')
      });
      
      res.status(401).json({
        success: false,
        error: '–¢–æ–∫–µ–Ω –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω',
        code: 'MISSING_TOKEN'
      });
      return;
    }

    // –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è JWT —Ç–æ–∫–µ–Ω–∞
    const JWT_SECRET = process.env.JWT_SECRET || 'dev-jwt-secret-key-32-chars-minimum-required';
    
    try {
      const decoded = jwt.verify(token, JWT_SECRET) as JWTPayload;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ç–æ–∫–µ–Ω–∞
      if (decoded.type !== 'operator') {
        logWarn('–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏', {
          error: { code: 'INVALID_TOKEN_TYPE', message: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Ç–æ–∫–µ–Ω–∞' },
          ip: req.ip,
          method: req.method,
          path: req.path,
          userAgent: req.get('User-Agent'),
          tokenType: decoded.type
        });
        
        res.status(401).json({
          success: false,
          error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Ç–æ–∫–µ–Ω–∞',
          code: 'INVALID_TOKEN_TYPE'
        });
        return;
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ request
      req.user = {
        id: decoded.id,
        email: decoded.email,
        role: decoded.role,
        type: decoded.type
      };

      // –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –¥–æ–±–∞–≤–ª—è–µ–º —Ç–∞–∫–∂–µ –≤ operator
      req.operator = {
        id: decoded.id,
        email: decoded.email,
        role: decoded.role
      };

      next();
      
    } catch (jwtError) {
      logWarn('–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏', {
        error: { code: 'INVALID_TOKEN', message: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏' },
        ip: req.ip,
        method: req.method,
        path: req.path,
        userAgent: req.get('User-Agent'),
        jwtError: jwtError instanceof Error ? jwtError.message : 'Unknown JWT error'
      });
      
      res.status(401).json({
        success: false,
        error: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏',
        code: 'INVALID_TOKEN'
      });
    }
    
  } catch (error) {
    logError('–û—à–∏–±–∫–∞ middleware –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏', error);
    res.status(500).json({
      success: false,
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏'
    });
  }
};

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–æ–ª–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
export const requireOperator = (req: Request, res: Response, next: NextFunction): void => {
  authenticateToken(req, res, next);
};

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–æ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
export const requireAdmin = (req: Request, res: Response, next: NextFunction): void => {
  authenticateToken(req, res, (err) => {
    if (err) return next(err);
    
    if (req.user?.role !== 'admin' && req.user?.role !== 'supervisor') {
      logWarn('–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞', {
        error: { code: 'INSUFFICIENT_PERMISSIONS', message: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞' },
        ip: req.ip,
        method: req.method,
        path: req.path,
        userAgent: req.get('User-Agent'),
        userRole: req.user?.role,
        requiredRole: 'admin'
      });
      
      res.status(403).json({
        success: false,
        error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞',
        code: 'INSUFFICIENT_PERMISSIONS'
      });
      return;
    }
    
    next();
  });
};

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–æ–ª–∏ —Å—É–ø–µ—Ä–≤–∏–∑–æ—Ä–∞
export const requireSupervisor = (req: Request, res: Response, next: NextFunction): void => {
  authenticateToken(req, res, (err) => {
    if (err) return next(err);
    
    if (req.user?.role !== 'supervisor') {
      logWarn('–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞', {
        error: { code: 'INSUFFICIENT_PERMISSIONS', message: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞' },
        ip: req.ip,
        method: req.method,
        path: req.path,
        userAgent: req.get('User-Agent'),
        userRole: req.user?.role,
        requiredRole: 'supervisor'
      });
      
      res.status(403).json({
        success: false,
        error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞',
        code: 'INSUFFICIENT_PERMISSIONS'
      });
      return;
    }
    
    next();
  });
};

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ä–æ–ª–∏
export const requireRole = (allowedRoles: string[]) => {
  return (req: Request, res: Response, next: NextFunction): void => {
    authenticateToken(req, res, (err) => {
      if (err) return next(err);
      
      if (!req.user || !allowedRoles.includes(req.user.role)) {
        logWarn('–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞', {
          error: { 
            code: 'INSUFFICIENT_PERMISSIONS', 
            message: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞' 
          },
          ip: req.ip,
          method: req.method,
          path: req.path,
          userAgent: req.get('User-Agent'),
          userRole: req.user?.role,
          requiredRoles: allowedRoles
        });
        
        res.status(403).json({
          success: false,
          error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞',
          code: 'INSUFFICIENT_PERMISSIONS'
        });
        return;
      }
      
      next();
    });
  };
};

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–ª–∞–¥–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ–ø–µ—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ —á–∞—Ç—ã)
export const requireResourceOwnership = (resourceType: string, resourceIdExtractor: (req: Request) => number | null) => {
  return (req: Request, res: Response, next: NextFunction): void => {
    authenticateToken(req, res, (err) => {
      if (err) return next(err);
      
      // –ê–¥–º–∏–Ω—ã –∏ —Å—É–ø–µ—Ä–≤–∏–∑–æ—Ä—ã –∏–º–µ—é—Ç –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ä–µ—Å—É—Ä—Å–∞–º
      if (req.user?.role === 'admin' || req.user?.role === 'supervisor') {
        return next();
      }
      
      const resourceId = resourceIdExtractor(req);
      if (!resourceId) {
        res.status(400).json({
          success: false,
          error: '–ù–µ–≤–µ—Ä–Ω—ã–π ID —Ä–µ—Å—É—Ä—Å–∞'
        });
        return;
      }
      
      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–ª–∞–¥–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–º
      // –ù–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ —á–∞—Ç –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä—É
      // –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
      next();
    });
  };
};

// Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
export const logAuth = (req: Request, res: Response, next: NextFunction): void => {
  if (process.env.NODE_ENV === 'development') {
    console.log(`üîê Auth Log: ${req.method} ${req.path} - User: ${req.user?.email || 'Unauthenticated'}`);
  }
  next();
};
