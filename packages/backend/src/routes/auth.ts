import express from 'express';
import jwt from 'jsonwebtoken';
import bcrypt from 'bcrypt';
import { z } from 'zod';
import { OperatorService } from '../services/operator';
import { rateLimitMiddleware } from '../services/rateLimiter';

const router = express.Router();
const operatorService = new OperatorService();

console.log('üîß AUTH ROUTER: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è auth —Ä–æ—É—Ç–µ—Ä–∞');

// –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π middleware –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ auth —Ä–æ—É—Ç–µ—Ä—É
router.use((req, res, next) => {
  console.log('üöÄ AUTH ROUTER: –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å', {
    method: req.method,
    path: req.path,
    originalUrl: req.originalUrl,
    baseUrl: req.baseUrl,
    url: req.url,
    headers: req.headers,
    body: req.body
  });
  next();
});

// –°—Ö–µ–º—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏
const loginSchema = z.object({
  email: z.string().email('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email'),
  password: z.string().min(6, '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 6 —Å–∏–º–≤–æ–ª–æ–≤')
});

const registerSchema = z.object({
  first_name: z.string().min(2, '–ò–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 2 —Å–∏–º–≤–æ–ª–æ–≤'),
  last_name: z.string().min(2, '–§–∞–º–∏–ª–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 2 —Å–∏–º–≤–æ–ª–æ–≤'),
  email: z.string().email('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email'),
  password: z.string().min(6, '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 6 —Å–∏–º–≤–æ–ª–æ–≤'),
  role: z.enum(['operator', 'admin', 'supervisor']).default('operator')
});

// Helper —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–µ—Ä—Ç—ã–≤–∞–Ω–∏—è async handlers
const asyncHandler = (fn: (req: express.Request, res: express.Response) => Promise<any>) => 
  (req: express.Request, res: express.Response) => { void fn(req, res); };

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è JWT —Ç–æ–∫–µ–Ω–æ–≤
const generateTokens = (operator: any) => {
  const accessToken = jwt.sign(
    { 
      id: operator.id, 
      email: operator.email, 
      role: operator.role,
      type: 'operator'
    },
    process.env.JWT_SECRET || 'dev-jwt-secret-key-32-chars-minimum-required',
    { expiresIn: '1h' }
  );

  const refreshToken = jwt.sign(
    { 
      id: operator.id, 
      type: 'refresh'
    },
    process.env.JWT_REFRESH_SECRET || process.env.JWT_SECRET || 'dev-jwt-secret-key-32-chars-minimum-required',
    { expiresIn: '7d' }
  );

  return { accessToken, refreshToken };
};

// –õ–æ–≥–∏–Ω –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
router.post('/login', asyncHandler(async (req, res) => {
  console.log('üöÄ === –ù–ê–ß–ê–õ–û –û–ë–†–ê–ë–û–¢–ö–ò –ó–ê–ü–†–û–°–ê /login ===');
  console.log('üìù –ú–µ—Ç–æ–¥:', req.method);
  console.log('üîó URL:', req.url);
  console.log('üìç –ü—É—Ç—å:', req.path);
  console.log('üìä –ó–∞–≥–æ–ª–æ–≤–∫–∏:', req.headers);
  console.log('üì¶ –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞:', req.body);
  
  try {
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    const validatedData = loginSchema.parse(req.body);
    
    console.log('üîê –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è email:', validatedData.email);
    
    // –ü–æ–∏—Å–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –ø–æ email
    const operator = await operatorService.getOperatorByEmail(validatedData.email);
    if (!operator) {
      console.log('‚ùå –û–ø–µ—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω:', validatedData.email);
      return res.status(401).json({ 
        success: false, 
        error: '–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å' 
      });
    }

    console.log('‚úÖ –û–ø–µ—Ä–∞—Ç–æ—Ä –Ω–∞–π–¥–µ–Ω:', {
      id: operator.id,
      email: operator.email,
      hasPasswordHash: !!operator.password_hash,
      passwordHashLength: operator.password_hash?.length,
      isActive: operator.is_active
    });

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è —Å—Ç—Ä–æ–≥–æ —á–µ—Ä–µ–∑ bcrypt –∏ —Ö–µ—à –∏–∑ –ë–î
    let isValidPassword = false;
    try {
      console.log('üîç –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–∞—Ä–æ–ª–µ–π...');
      console.log('üìù –í–≤–µ–¥—ë–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å:', validatedData.password);
      console.log('üîë –•–µ—à –∏–∑ –ë–î:', operator.password_hash);
      
      isValidPassword = await bcrypt.compare(validatedData.password, operator.password_hash);
      console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è bcrypt:', isValidPassword);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è —á–µ—Ä–µ–∑ bcrypt:', error);
      isValidPassword = false;
    }
    
    if (!isValidPassword) {
      console.log('‚ùå –ü–∞—Ä–æ–ª—å –Ω–µ–≤–µ—Ä–Ω—ã–π');
      return res.status(401).json({ 
        success: false, 
        error: '–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å' 
      });
    }

    console.log('‚úÖ –ü–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å...');

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
    if (!operator.is_active) {
      console.log('‚ùå –û–ø–µ—Ä–∞—Ç–æ—Ä –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω');
      return res.status(403).json({ 
        success: false, 
        error: '–ê–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω' 
      });
    }

    console.log('‚úÖ –û–ø–µ—Ä–∞—Ç–æ—Ä –∞–∫—Ç–∏–≤–µ–Ω, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω—ã...');

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–æ–≤
    const { accessToken, refreshToken } = generateTokens(operator);

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ö–æ–¥–∞
    await operatorService.updateLastLogin(operator.id);

    console.log('‚úÖ –í—Ö–æ–¥ —É—Å–ø–µ—à–µ–Ω, —Ç–æ–∫–µ–Ω—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã');

    res.json({
      success: true,
      data: {
        operator: {
          id: operator.id,
          name: `${operator.first_name} ${operator.last_name}`,
          email: operator.email,
          role: operator.role,
          is_active: operator.is_active
        },
        tokens: {
          access: accessToken,
          refresh: refreshToken
        }
      },
      message: '–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É'
    });

  } catch (error) {
    if (error instanceof z.ZodError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:', error.issues);
      return res.status(400).json({ 
        success: false, 
        error: '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö',
        details: error.issues 
      });
    }

    console.error('‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', error);
    res.status(500).json({ 
      success: false, 
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' 
    });
  }
}));

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞ –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º: —ç–Ω–¥–ø–æ–∏–Ω—Ç —É–¥–∞–ª—ë–Ω

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
router.post('/refresh', asyncHandler(async (req, res) => {
  try {
    const { refresh_token } = req.body;
    
    if (!refresh_token) {
      return res.status(400).json({ 
        success: false, 
        error: 'Refresh —Ç–æ–∫–µ–Ω –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' 
      });
    }

    // –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è refresh —Ç–æ–∫–µ–Ω–∞
    const decoded = jwt.verify(
      refresh_token, 
      process.env.JWT_REFRESH_SECRET || process.env.JWT_SECRET || 'dev-jwt-secret-key-32-chars-minimum-required'
    ) as any;

    if (decoded.type !== 'refresh') {
      return res.status(401).json({ 
        success: false, 
        error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Ç–æ–∫–µ–Ω–∞' 
      });
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
    const operator = await operatorService.getOperatorById(decoded.id);
    if (!operator || !operator.is_active) {
      return res.status(401).json({ 
        success: false, 
        error: '–û–ø–µ—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω' 
      });
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
    const { accessToken, refreshToken } = generateTokens(operator);

    res.json({
      success: true,
      data: {
        tokens: {
          access: accessToken,
          refresh: refreshToken
        }
      },
      message: '–¢–æ–∫–µ–Ω—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã'
    });

  } catch (error) {
    if (error instanceof jwt.JsonWebTokenError) {
      return res.status(401).json({ 
        success: false, 
        error: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π refresh —Ç–æ–∫–µ–Ω' 
      });
    }

    console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:', error);
    res.status(500).json({ 
      success: false, 
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' 
    });
  }
}));

// –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
router.post('/logout', asyncHandler(async (req, res) => {
  try {
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–∫–µ–Ω –≤ blacklist
    res.json({
      success: true,
      message: '–£—Å–ø–µ—à–Ω—ã–π –≤—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã'
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞:', error);
    res.status(500).json({ 
      success: false, 
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' 
    });
  }
}));

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è —Ç–µ–∫—É—â–µ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
router.get('/profile', asyncHandler(async (req, res) => {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –∏–∑ middleware –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    const operatorId = (req as any).user?.id;
    if (!operatorId) {
      return res.status(401).json({ 
        success: false, 
        error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' 
      });
    }

    const operator = await operatorService.getOperatorById(operatorId);
    if (!operator) {
      return res.status(404).json({ 
        success: false, 
        error: '–û–ø–µ—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' 
      });
    }

    res.json({
      success: true,
      data: {
        operator: {
          id: operator.id,
          name: `${operator.first_name} ${operator.last_name}`,
          email: operator.email,
          role: operator.role,
          is_active: operator.is_active,
          max_chats: operator.max_chats,
          created_at: operator.created_at,
          last_login: operator.last_login
        }
      }
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', error);
    res.status(500).json({ 
      success: false, 
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' 
    });
  }
}));

// –£–¥–∞–ª–µ–Ω–æ: —Ç–µ—Å—Ç–æ–≤—ã–µ/–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã

export default router;
