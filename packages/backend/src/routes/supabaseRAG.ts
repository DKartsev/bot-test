import express from 'express';
import { SupabaseRAGService } from '../services/supabaseRAGService';
import { logError, logInfo } from '../utils/logger';

const router = express.Router();
const ragService = new SupabaseRAGService();

// Helper —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–µ—Ä—Ç—ã–≤–∞–Ω–∏—è async handlers
const asyncHandler = (fn: (req: express.Request, res: express.Response) => Promise<void>) => 
  (req: express.Request, res: express.Response) => { void fn(req, res); };

/**
 * –û—Å–Ω–æ–≤–Ω–æ–π endpoint –¥–ª—è RAG –∑–∞–ø—Ä–æ—Å–æ–≤ —á–µ—Ä–µ–∑ Supabase
 * POST /api/supabase-rag/query
 */
router.post('/query', asyncHandler(async (req, res) => {
  try {
    const startTime = Date.now();
    
    const { question, userId, chatId, language = 'ru', options } = req.body;

    logInfo('üîç –ü–æ–ª—É—á–µ–Ω RAG –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ Supabase', { 
      question: question?.substring(0, 100), 
      userId,
      chatId,
      language,
    });

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (!question || question.trim().length === 0) {
      res.status(400).json({
        success: false,
        error: '–í–æ–ø—Ä–æ—Å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω',
        code: 'MISSING_QUESTION',
      });
      return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ RAG –ø–∞–π–ø–ª–∞–π–Ω
    const response = await ragService.processQuery({
      question: question.trim(),
      userId,
      chatId,
      language,
      options: {
        temperature: options?.temperature || 0.3,
        maxTokens: options?.maxTokens || 1000,
        topK: options?.topK || 5,
        minSimilarity: options?.minSimilarity || 0.5,
      },
    });

    const totalTime = Date.now() - startTime;

    logInfo('‚úÖ RAG –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ', { 
      question: question.substring(0, 100),
      totalTime: `${totalTime}ms`,
      confidence: response.confidence,
      sourcesCount: response.sources.length,
      fallbackUsed: response.metadata.fallbackUsed,
    });

    res.json({
      success: true,
      data: response,
      metadata: {
        processingTime: totalTime,
        timestamp: new Date().toISOString(),
        service: 'SupabaseRAG',
        version: '1.0.0',
      },
    });

  } catch (error) {
    logError('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ RAG –∑–∞–ø—Ä–æ—Å–∞', { 
      error: error instanceof Error ? error.message : 'Unknown error',
      body: req.body,
    });

    res.status(500).json({
      success: false,
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      code: 'INTERNAL_ERROR',
    });
  }
}));

/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ RAG –ø–∞–π–ø–ª–∞–π–Ω–∞
 * POST /api/supabase-rag/test
 */
router.post('/test', asyncHandler(async (req, res) => {
  try {
    const { testQuery } = req.body;

    if (!testQuery || testQuery.trim().length === 0) {
      res.status(400).json({
        success: false,
        error: '–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω',
        code: 'MISSING_TEST_QUERY',
      });
      return;
    }

    logInfo('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ RAG –ø–∞–π–ø–ª–∞–π–Ω–∞', { testQuery });

    const testResult = await ragService.testPipeline(testQuery);

    if (testResult.success && testResult.response) {
      res.json({
        success: true,
        data: {
          testQuery,
          response: testResult.response,
          pipelineStatus: 'success',
          healthCheck: await ragService.healthCheck(),
        },
      });
    } else {
      res.status(500).json({
        success: false,
        error: testResult.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è',
        code: 'TEST_FAILED',
      });
    }

  } catch (error) {
    logError('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è RAG –ø–∞–π–ø–ª–∞–π–Ω–∞', { 
      error: error instanceof Error ? error.message : 'Unknown error',
      body: req.body,
    });

    res.status(500).json({
      success: false,
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      code: 'INTERNAL_ERROR',
    });
  }
}));

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è RAG —Å–µ—Ä–≤–∏—Å–∞
 * GET /api/supabase-rag/health
 */
router.get('/health', asyncHandler(async (req, res) => {
  try {
    const healthStatus = await ragService.healthCheck();
    
    res.json({
      success: true,
      data: {
        ...healthStatus,
        service: 'SupabaseRAG',
        version: '1.0.0',
        endpoints: {
          query: 'POST /api/supabase-rag/query',
          test: 'POST /api/supabase-rag/test',
          health: 'GET /api/supabase-rag/health',
        },
      },
    });
  } catch (error) {
    logError('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è RAG —Å–µ—Ä–≤–∏—Å–∞', { 
      error: error instanceof Error ? error.message : 'Unknown error',
    });

    res.status(500).json({
      success: false,
      error: '–°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω',
      code: 'SERVICE_UNAVAILABLE',
    });
  }
}));

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥–µ–ª–∏ –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
 * GET /api/supabase-rag/info
 */
router.get('/info', asyncHandler(async (req, res) => {
  try {
    res.json({
      success: true,
      data: {
        service: 'SupabaseRAG',
        version: '1.0.0',
        pipeline: {
          step1: '–°–æ–∑–¥–∞–Ω–∏–µ embeddings –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
          step2: '–ü–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö —á–∞–Ω–∫–æ–≤ –≤ Supabase —á–µ—Ä–µ–∑ pgvector',
          step3: '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ GPT –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —á–∞–Ω–∫–æ–≤',
          step4: '–í–æ–∑–≤—Ä–∞—Ç –æ—Ç–≤–µ—Ç–∞ —Å –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏ –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏',
        },
        models: {
          openai: 'gpt-4o-mini',
          embedding: 'text-embedding-3-small',
        },
        database: {
          provider: 'Supabase',
          table: 'kb_chunks',
          vectorColumn: 'embedding',
          vectorDimension: 1536,
          searchOperator: '<-> (cosine distance)',
        },
        features: {
          vectorSearch: true,
          fallbackAnswers: true,
          confidenceScoring: true,
          sourceAttribution: true,
          errorHandling: true,
        },
        timestamp: new Date().toISOString(),
      },
    });
  } catch (error) {
    logError('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ RAG —Å–µ—Ä–≤–∏—Å–µ', { 
      error: error instanceof Error ? error.message : 'Unknown error',
    });

    res.status(500).json({
      success: false,
      error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–∏—Å–µ',
      code: 'INFO_ERROR',
    });
  }
}));

export default router;
