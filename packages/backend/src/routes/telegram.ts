import express from 'express';
import { env } from '../config/env';
import { cacheMiddleware } from '../middleware/cache';

// Helper —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–µ—Ä—Ç—ã–≤–∞–Ω–∏—è async handlers
const asyncHandler = (fn: (req: express.Request, res: express.Response) => Promise<void>) => 
  (req: express.Request, res: express.Response) => { void fn(req, res); };
import { TelegramService } from '../services/telegram';
import { ChatService } from '../services/chat';
import { MessageService } from '../services/message';
import { UserService } from '../services/user';

const router = express.Router();

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telegram —Å–µ—Ä–≤–∏—Å
const telegramService = new TelegramService(env.TG_BOT_TOKEN || '');

// –°–æ–∑–¥–∞–µ–º instances —Å–µ—Ä–≤–∏—Å–æ–≤
const chatService = new ChatService();
const messageService = new MessageService();
const userService = new UserService();

// Webhook –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç Telegram
router.post('/webhook', asyncHandler(async (req, res) => {
  try {
    console.log('üì® Webhook –ø–æ–ª—É—á–µ–Ω:', JSON.stringify(req.body, null, 2));
    
    const { message, callback_query, edited_message } = req.body;

    if (message) {
      console.log('üìù –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è:', message.text);
      await telegramService.handleMessage(message as any);
    } else if (callback_query) {
      console.log('üîò –û–±—Ä–∞–±–æ—Ç–∫–∞ callback query');
      await telegramService.handleCallbackQuery(callback_query as any);
    } else if (edited_message) {
      console.log('‚úèÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è');
      await telegramService.handleEditedMessage(edited_message as any);
    } else {
      console.log('‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
    }

    console.log('‚úÖ Webhook –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ');
    res.status(200).json({ ok: true });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook' });
  }
}));

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook
router.post('/set-webhook', asyncHandler(async (req, res) => {
  try {
    const { url } = req.body;

    if (!url) {
      res.status(400).json({ error: 'URL webhook –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' });
      return;
    }

    const result = await telegramService.setWebhook(String(url));
    res.json(result);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook:', error);
    res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook' });
  }
}));

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ
router.get('/bot-info', cacheMiddleware.long, asyncHandler(async (req, res) => {
  try {
    const botInfo = await telegramService.getBotInfo();
    res.json(botInfo);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ:', error);
    res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ' });
  }
}));

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
router.post('/send-message', asyncHandler(async (req, res) => {
  try {
    const { chat_id, text, parse_mode = 'HTML', reply_markup } = req.body;

    if (!chat_id || !text) {
      res.status(400).json({ error: 'chat_id –∏ text –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
      return;
    }

    const result = await telegramService.sendMessage(Number(chat_id), String(text), {
      parse_mode: String(parse_mode),
      reply_markup,
    });
    res.json(result);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ' });
  }
}));

// –ü–æ–ª—É—á–µ–Ω–∏–µ —á–∞—Ç–æ–≤ –±–æ—Ç–∞
router.get('/chats', cacheMiddleware.medium, asyncHandler(async (req, res) => {
  try {
    const chats = await chatService.getChats({ limit: 100 });
    res.json(chats);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —á–∞—Ç–æ–≤:', error);
    res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —á–∞—Ç—ã' });
  }
}));

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞
router.get('/chats/:id/messages', cacheMiddleware.short, asyncHandler(async (req, res) => {
  try {
    const chatId = req.params['id'];
    if (!chatId) {
      res.status(400).json({ error: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π ID —á–∞—Ç–∞' });
      return;
    }

    const messages = await messageService.getMessagesByChatId(chatId, 50, 0);
    res.json(messages);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π:', error);
    res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è' });
  }
}));

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
router.get('/users', cacheMiddleware.medium, asyncHandler(async (req, res) => {
  try {
    const users = await userService.getUsers(100, 0);
    res.json(users);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
    res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π' });
  }
}));

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
router.get('/stats', cacheMiddleware.medium, asyncHandler(async (req, res) => {
  try {
    const chatStats = await chatService.getChatStats();
    const userStats = await userService.getUserStats();

    res.json({
      chats: chatStats,
      users: userStats,
      timestamp: new Date().toISOString(),
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
    res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É' });
  }
}));

export default router;
