import { db } from '../database/connection';
import type { Chat, ChatStats, FilterOptions } from '../types';

export class ChatRepository {
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
  async findWithFilters(filters: FilterOptions): Promise<Chat[]> {
    try {
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
      const tablesCheck = await db.query(`
        SELECT EXISTS (
          SELECT FROM information_schema.tables 
          WHERE table_schema = 'public' 
          AND table_name = 'conversations'
        ) as conversations_table_exists,
        EXISTS (
          SELECT FROM information_schema.tables 
          WHERE table_schema = 'public' 
          AND table_name = 'messages'
        ) as messages_table_exists
      `);

      const { conversations_table_exists, messages_table_exists } = tablesCheck.rows[0];

      if (!conversations_table_exists) {
        console.warn('–¢–∞–±–ª–∏—Ü–∞ conversations –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤');
        return [];
      }

      let query = `
        SELECT 
          c.*,
          m.id as message_id,
          m.sender as message_sender,
          m.content as message_content,
          m.created_at as message_created_at,
          m.media_urls as message_media_urls,
          m.media_types as message_media_types
        FROM conversations c
        LEFT JOIN LATERAL (
          SELECT * FROM messages 
          WHERE conversation_id = c.id 
          ORDER BY created_at DESC 
          LIMIT 1
          ) m ON true
        WHERE 1=1
      `;

      const params: any[] = [];
      let paramIndex = 1;

      // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
      if (filters.status && filters.status.length > 0) {
        query += ` AND c.status = ANY($${paramIndex++})`;
        params.push(filters.status);
      }

      if (filters.source && filters.source.length > 0) {
        // –í –Ω–æ–≤–æ–π —Å—Ö–µ–º–µ source –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
      }

      if (filters.priority && filters.priority.length > 0) {
        // –í –Ω–æ–≤–æ–π —Å—Ö–µ–º–µ priority –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
      }

      if (filters.operator_id) {
        query += ` AND c.assignee_id = $${paramIndex++}`;
        params.push(filters.operator_id);
      }

      // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏—è
      query += ' ORDER BY c.last_message_at DESC NULLS LAST';

      if (filters.limit) {
        query += ` LIMIT $${paramIndex++}`;
        params.push(filters.limit);
      }

      if (filters.page && filters.limit) {
        query += ` OFFSET $${paramIndex++}`;
        params.push((filters.page - 1) * filters.limit);
      }

      const result = await db.query(query, params);

      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –æ–±—ä–µ–∫—Ç—ã Chat
      return result.rows.map((row: Record<string, unknown>) => this.mapRowToChat(row));
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —á–∞—Ç–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏:', error);
      throw error;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∞—Ç–∞
  async findById(id: string): Promise<Chat | null> {
    try {
      const result = await db.query(`
        SELECT 
          c.*,
          m.id as message_id,
          m.sender as message_sender,
          m.content as message_content,
          m.created_at as message_created_at,
          m.media_urls as message_media_urls,
          m.media_types as message_media_types
        FROM conversations c
        LEFT JOIN LATERAL (
          SELECT * FROM messages 
          WHERE conversation_id = c.id 
          ORDER BY created_at DESC 
          LIMIT 1
        ) m ON true
        WHERE c.id = $1
      `, [id]);

      if (result.rows.length === 0) return null;

      return this.mapRowToChat(result.rows[0] as Record<string, unknown>);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —á–∞—Ç–∞ –ø–æ ID:', error);
      throw error;
    }
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞
  async create(userTelegramId: number, source: string = 'telegram'): Promise<Chat> {
    try {
      const result = await db.query(`
        INSERT INTO conversations (id, user_telegram_id, status, handoff)
        VALUES (gen_random_uuid(), $1, 'waiting', 'bot')
        RETURNING *
      `, [userTelegramId.toString()]);

      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
      return await this.findById(String(result.rows[0]['id']));
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞:', error);
      throw error;
    }
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —á–∞—Ç–∞
  async updateStatus(id: string, status: string, operatorId?: number): Promise<Chat | null> {
    try {
      console.log('üîÑ ChatRepository.updateStatus –≤—ã–∑–≤–∞–Ω —Å:', { id, status, operatorId });
      const result = await db.query(`
        UPDATE conversations 
        SET status = $1, assignee_id = $2
        WHERE id = $3
        RETURNING *
      `, [status, operatorId, id]);

      if (result.rows.length === 0) return null;

      return await this.findById(id);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —á–∞—Ç–∞:', error);
      throw error;
    }
  }

  // –ü—Ä–∏–Ω—è—Ç–∏–µ —á–∞—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É
  async takeChat(id: string, operatorId: number): Promise<Chat | null> {
    try {
      const result = await db.query(`
        UPDATE conversations 
        SET status = 'in_progress', assignee_id = $1
        WHERE id = $2 AND status = 'open'
        RETURNING *
      `, [operatorId, id]);

      if (result.rows.length === 0) return null;

      return await this.findById(id);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è —á–∞—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É:', error);
      throw error;
    }
  }

  // –ó–∞–∫—Ä—ã—Ç–∏–µ —á–∞—Ç–∞
  async closeChat(id: string, operatorId: number): Promise<Chat | null> {
    try {
      const result = await db.query(`
        UPDATE conversations 
        SET status = 'closed'
        WHERE id = $1 AND assignee_id = $2
        RETURNING *
      `, [id, operatorId]);

      if (result.rows.length === 0) return null;

      return await this.findById(id);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —á–∞—Ç–∞:', error);
      throw error;
    }
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ —á–∞—Ç–∞
  async updatePriority(id: string, priority: string): Promise<Chat | null> {
    try {
      // –í –Ω–æ–≤–æ–π —Å—Ö–µ–º–µ priority –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      console.warn('–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ –Ω–æ–≤–æ–π —Å—Ö–µ–º–µ');
      return await this.findById(id);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ —á–∞—Ç–∞:', error);
      throw error;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —á–∞—Ç–æ–≤
  async getStats(): Promise<ChatStats> {
    try {
      const result = await db.query(`
        SELECT 
          COUNT(*) as total_chats,
          COUNT(*) FILTER (WHERE status = 'open') as waiting_chats,
          COUNT(*) FILTER (WHERE status = 'in_progress') as in_progress_chats,
          COUNT(*) FILTER (WHERE status = 'closed') as closed_chats
        FROM conversations
      `);

      const stats = result.rows[0];

      // –ü–æ–ª—É—á–∞–µ–º —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞
      const responseTimeResult = await db.query(`
        SELECT AVG(EXTRACT(EPOCH FROM (m.created_at - c.created_at))) as avg_response_seconds
        FROM conversations c
        JOIN messages m ON c.id = m.conversation_id
        WHERE m.sender = 'operator' 
        AND m.created_at = (
          SELECT MIN(m2.created_at) 
          FROM messages m2 
          WHERE m2.conversation_id = c.id 
          AND m2.sender = 'operator'
        )
      `);

      // –ü–æ–ª—É—á–∞–µ–º —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
      const resolutionTimeResult = await db.query(`
        SELECT AVG(EXTRACT(EPOCH FROM (c.last_message_at - c.created_at))) as avg_resolution_seconds
        FROM conversations c
        WHERE c.status = 'closed'
      `);

      const avgResponseSeconds = responseTimeResult.rows[0]?.avg_response_seconds || 0;
      const avgResolutionSeconds = resolutionTimeResult.rows[0]?.avg_resolution_seconds || 0;

      return {
        total_chats: parseInt(String(stats['total_chats'])),
        waiting_chats: parseInt(String(stats['waiting_chats'])),
        in_progress_chats: parseInt(String(stats['in_progress_chats'])),
        closed_chats: parseInt(String(stats['closed_chats'])),
        avg_response_time: Math.round(avgResponseSeconds / 60), // –≤ –º–∏–Ω—É—Ç–∞—Ö
        avg_resolution_time: Math.round(avgResolutionSeconds / 60), // –≤ –º–∏–Ω—É—Ç–∞—Ö
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —á–∞—Ç–æ–≤:', error);
      throw error;
    }
  }

  // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –ë–î –≤ –æ–±—ä–µ–∫—Ç Chat
  private mapRowToChat(row: Record<string, unknown>): Chat {
    // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ id —á–∞—Ç–∞ –Ω–µ null
    const chatId = row['id'];
    if (!chatId) {
      console.warn('Chat ID is null, skipping chat:', row);
      throw new Error('Chat ID cannot be null');
    }

    return {
      id: String(chatId), // –ò—Å–ø–æ–ª—å–∑—É–µ–º UUID –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
      user_id: Number(row['user_telegram_id']),
      user: {
        id: Number(row['user_telegram_id']),
        telegram_id: Number(row['user_telegram_id']),
        username: String(row['user_telegram_id']),
        first_name: String(row['user_telegram_id']),
        last_name: '',
        avatar_url: '',
        balance: 0,
        deals_count: 0,
        flags: [],
        is_blocked: false,
        is_verified: false,
        created_at: new Date(row['created_at'] as string).toISOString(),
        last_activity: new Date(row['last_message_at'] as string || row['created_at'] as string).toISOString(),
      },
      last_message: row['message_id'] ? {
        id: String(row['message_id']), // UUID –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞
        chat_id: String(chatId), // UUID –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞
        conversation_id: String(chatId), // UUID –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞
        sender: String(row['message_sender']),
        content: String(row['message_content'] || ''),
        author_type: String(row['message_sender']) as 'user' | 'bot' | 'operator',
        author_id: String(row['message_sender']), // –ò—Å–ø–æ–ª—å–∑—É–µ–º sender –∫–∞–∫ author_id
        text: String(row['message_content'] || ''), // –î–æ–±–∞–≤–ª—è–µ–º text –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º
        timestamp: new Date(row['message_created_at'] as string).toISOString(),
        is_read: true,
        created_at: new Date(row['message_created_at'] as string).toISOString(),
        metadata: {
          source: 'telegram',
          channel: 'default',
          media_urls: row['message_media_urls'] as any || [],
          media_types: row['message_media_types'] as string[] || [],
        },
      } : null,
      status: String(row['status']) as 'waiting' | 'in_progress' | 'closed',
      priority: 'medium', // –í –Ω–æ–≤–æ–π —Å—Ö–µ–º–µ priority –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      source: 'telegram', // –í –Ω–æ–≤–æ–π —Å—Ö–µ–º–µ source –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      operator_id: row['assignee_id'] ? Number(row['assignee_id']) : null,
      is_pinned: false, // –í –Ω–æ–≤–æ–π —Å—Ö–µ–º–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      is_important: false, // –í –Ω–æ–≤–æ–π —Å—Ö–µ–º–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      unread_count: 0, // –í –Ω–æ–≤–æ–π —Å—Ö–µ–º–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      created_at: new Date(row['created_at'] as string).toISOString(),
      updated_at: new Date(row['last_message_at'] as string || row['created_at'] as string).toISOString(),
      tags: [], // –í –Ω–æ–≤–æ–π —Å—Ö–µ–º–µ tags –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      escalation_reason: null, // –í –Ω–æ–≤–æ–π —Å—Ö–µ–º–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    };
  }

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–≥–æ–≤ –∫ —á–∞—Ç—É (–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
  async addTags(chatId: string, tags: string[]): Promise<Chat | null> {
    try {
      // –í –Ω–æ–≤–æ–π —Å—Ö–µ–º–µ tags –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —á–∞—Ç –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
      console.warn('–¢–µ–≥–∏ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –≤ –Ω–æ–≤–æ–π —Å—Ö–µ–º–µ');
      return await this.findById(chatId);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ–≥–æ–≤ –∫ —á–∞—Ç—É:', error);
      return null;
    }
  }
}
