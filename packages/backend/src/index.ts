import express from 'express';
import cors from 'cors';
import helmet from 'helmet';
import morgan from 'morgan';
import rateLimit from 'express-rate-limit';
import { env } from './config/env';
import { errorLogger, requestLogger, logInfo, logError } from './utils/logger';
import { cacheService } from './services/cache';

// –ò–º–ø–æ—Ä—Ç —Å–∏—Å—Ç–µ–º—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
import {
  requestIdMiddleware,
  validationErrorHandler,
  authErrorHandler,
  errorHandlerMiddleware,
  notFoundHandler,
  unhandledErrorHandler,
  performanceMonitor,
} from './middleware/errorHandler';

// –ò–º–ø–æ—Ä—Ç —Å–∏—Å—Ç–µ–º—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
import { authenticateToken } from './middleware/auth';

// –ò–º–ø–æ—Ä—Ç —Å–∏—Å—Ç–µ–º—ã –º–µ—Ç—Ä–∏–∫
import {
  
  httpMetricsMiddleware,
  errorMetricsMiddleware,
  systemMetricsMiddleware,
  redisMetricsMiddleware,
} from './middleware/metricsMiddleware';
import { metricsCollector } from './services/metricsCollector';

// –ò–º–ø–æ—Ä—Ç –º–∞—Ä—à—Ä—É—Ç–æ–≤
import operatorRoutes from './routes/operator';
import authRoutes from './routes/auth';
import telegramRoutes from './routes/telegram';
import uploadRoutes from './routes/upload';
import rateLimitRoutes from './routes/rateLimit';
import queryOptimizerRoutes from './routes/queryOptimizer';
import errorHandlerRoutes from './routes/errorHandler';
import swaggerRoutes from './routes/swagger';
import metricsRoutes from './routes/metrics';
import ragRoutes from './routes/rag';



// –ò–º–ø–æ—Ä—Ç WebSocket —Å–µ—Ä–≤–∏—Å–∞
import { WebSocketService } from './services/websocket';

const app = express();
const PORT = env.PORT || 3000;

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è Windows
process.env.LANG = 'en_US.UTF-8';
process.env.LC_ALL = 'en_US.UTF-8';

// CORS –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–µ—Ä–≤–æ–π!)
try {
  console.log('CORS Origin:', env.api.cors.origin);
  console.log('CORS Credentials:', env.api.cors.credentials);
  
  const corsOrigins = env.api.cors.origin.split(',').map(origin => origin.trim());
  console.log('CORS Origins:', corsOrigins);

  app.use(cors({
    origin: corsOrigins,
    credentials: env.api.cors.credentials,
    methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'],
    allowedHeaders: ['Content-Type', 'Authorization', 'X-Requested-With', 'X-Request-ID'],
    exposedHeaders: ['Content-Length', 'X-Request-Id'],
    preflightContinue: false,
    optionsSuccessStatus: 204
  }));
  
  console.log('CORS middleware –Ω–∞—Å—Ç—Ä–æ–µ–Ω —É—Å–ø–µ—à–Ω–æ');
} catch (error) {
  console.error('–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ CORS:', error);
  // Fallback CORS –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
  app.use(cors({
    origin: ['http://localhost:3001', 'http://158.160.169.147:3001'],
    credentials: true,
    methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'],
    allowedHeaders: ['Content-Type', 'Authorization', 'X-Requested-With', 'X-Request-ID'],
    exposedHeaders: ['Content-Length', 'X-Request-Id'],
    preflightContinue: false,
    optionsSuccessStatus: 204
  }));
  console.log('–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è fallback CORS –Ω–∞—Å—Ç—Ä–æ–π–∫–∞');
}

// –Ø–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ OPTIONS –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –≤—Å–µ—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤ (–ø–æ—Å–ª–µ CORS middleware)
app.options('*', (req, res) => {
  console.log('OPTIONS request received for:', req.path);
  console.log('Origin header:', req.headers.origin);
  
  const origin = req.headers.origin;
  const allowedOrigins = env.api.cors.origin.split(',').map(o => o.trim());
  
  if (origin && allowedOrigins.includes(origin)) {
    res.header('Access-Control-Allow-Origin', origin);
  } else {
    res.header('Access-Control-Allow-Origin', '*');
  }
  
  res.header('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS, PATCH');
  res.header('Access-Control-Allow-Headers', 'Content-Type, Authorization, X-Requested-With, X-Request-ID');
  res.header('Access-Control-Allow-Credentials', 'true');
  res.header('Access-Control-Max-Age', '86400'); // 24 —á–∞—Å–∞
  
  console.log('CORS headers set:', {
    'Access-Control-Allow-Origin': res.getHeader('Access-Control-Allow-Origin'),
    'Access-Control-Allow-Methods': res.getHeader('Access-Control-Allow-Methods'),
    'Access-Control-Allow-Headers': res.getHeader('Access-Control-Allow-Headers')
  });
  
  res.sendStatus(204);
});

// –ë–∞–∑–æ–≤—ã–µ middleware
app.use(helmet());

// –°–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
app.use(requestIdMiddleware);
app.use(performanceMonitor);
app.use(validationErrorHandler);
app.use(authErrorHandler);

// –°–∏—Å—Ç–µ–º–∞ –º–µ—Ç—Ä–∏–∫ (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–∞–Ω–æ –≤ —Ü–µ–ø–æ—á–∫–µ middleware)
app.use(httpMetricsMiddleware);
app.use(systemMetricsMiddleware);
app.use(redisMetricsMiddleware);

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤
app.use(requestLogger);

// Morgan –¥–ª—è HTTP –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
app.use(morgan('combined'));

// Rate limiting - –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à –∫–∞—Å—Ç–æ–º–Ω—ã–π —Å–µ—Ä–≤–∏—Å
import { rateLimitMiddleware } from './services/rateLimiter';
app.use(rateLimitMiddleware.global());

// –ü–∞—Ä—Å–∏–Ω–≥ JSON —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
app.use(express.json({ 
  limit: '10mb',
  strict: false,
  type: 'application/json'
}));
app.use(express.urlencoded({ 
  extended: true, 
  limit: '10mb',
  type: 'application/x-www-form-urlencoded'
}));

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
app.use('/uploads', express.static('uploads'));

// Health check
app.get('/health', async (req, res) => {
  const redisStatus = cacheService.isConnected() ? 'connected' : 'disconnected';
  const redisInfo = cacheService.isConnected() ? await cacheService.getInfo() : null;
  const metricsStats = metricsCollector.getCollectorStats();
  const systemMetrics = metricsCollector.getSystemMetrics();
  
  res.json({
    status: 'ok',
    timestamp: new Date().toISOString(),
    uptime: process.uptime(),
    environment: env.NODE_ENV,
    version: process.env.npm_package_version || '1.0.0',
    redis: {
      status: redisStatus,
      info: redisInfo ? {
        connected_clients: redisInfo['connected_clients'],
        used_memory: redisInfo['used_memory_human'],
        total_commands_processed: redisInfo['total_commands_processed'],
      } : null,
    },
    metrics: {
      totalMetrics: metricsStats.totalMetrics,
      totalCounters: metricsStats.totalCounters,
      totalGauges: metricsStats.totalGauges,
      totalHistograms: metricsStats.totalHistograms,
      memoryUsage: metricsStats.memoryUsage,
    },
    system: {
      memoryUsage: Math.round(systemMetrics.memory.usage),
      nodeVersion: systemMetrics.nodeVersion,
      platform: systemMetrics.platform,
    },
  });
});

// API –º–∞—Ä—à—Ä—É—Ç—ã
app.use('/api/auth', authRoutes); // –ú–∞—Ä—à—Ä—É—Ç—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–±–µ–∑ middleware)
app.use('/api/metrics', metricsRoutes);
app.use('/api/rag', ragRoutes);

// –£–¥–∞–ª–µ–Ω—ã dev-—ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤ –∏ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
app.use('/telegram', telegramRoutes);
app.use('/upload', uploadRoutes);
app.use('/rate-limit', rateLimitRoutes);
app.use('/query-optimizer', queryOptimizerRoutes);
app.use('/error-handler', errorHandlerRoutes);

// Swagger –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
app.use('/docs', swaggerRoutes);

// –û–±—â–∏–π —Ä–æ—É—Ç /api –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ü–û–°–õ–ï–î–ù–ò–ú, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞—Ç—å —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Ä–æ—É—Ç—ã
app.use('/api', authenticateToken, operatorRoutes); // –ó–∞—â–∏—â–µ–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
async function initializeServices(): Promise<void> {
  try {
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Redis
    await cacheService.connect();
    logInfo('‚úÖ Redis –ø–æ–¥–∫–ª—é—á–µ–Ω');
  } catch (error) {
    logError('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis:', error);
    logInfo('‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –ø—Ä–æ–¥–æ–ª–∂–∏—Ç —Ä–∞–±–æ—Ç—É –±–µ–∑ Redis –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è');
  }
}

// WebSocket endpoint
const server = app.listen(PORT, async () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  console.log(`üì° WebSocket –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ ws://localhost:${PORT}/ws`);
  console.log(`üîó API –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ http://localhost:${PORT}/api`);
  console.log(`üìä Health check: http://localhost:${PORT}/health`);
  console.log(`üìö Swagger UI: http://localhost:${PORT}/docs`);
  console.log(`üìà –ú–µ—Ç—Ä–∏–∫–∏: http://localhost:${PORT}/api/metrics`);

  if (env.NODE_ENV === 'development') {
    console.log('üîß –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏');
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
  await initializeServices();
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebSocket
const wsService = new WebSocketService(server);

// –°–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
app.use(errorMetricsMiddleware);
app.use(errorHandlerMiddleware);
app.use(notFoundHandler);

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
app.use(unhandledErrorHandler);

// Graceful shutdown
const gracefulShutdown = (signal: string) => {
  console.log(`\n–ü–æ–ª—É—á–µ–Ω ${signal}, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...`);

  server.close(async () => {
    console.log('HTTP —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');

    // –ó–∞–∫—Ä—ã–≤–∞–µ–º WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    if (wsService) {
      wsService.cleanup();
    }

    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–±–æ—Ä—â–∏–∫ –º–µ—Ç—Ä–∏–∫
    try {
      metricsCollector.stop();
      console.log('–°–±–æ—Ä—â–∏–∫ –º–µ—Ç—Ä–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–±–æ—Ä—â–∏–∫–∞ –º–µ—Ç—Ä–∏–∫:', error);
    }

    // –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç Redis
    try {
      await cacheService.disconnect();
      console.log('Redis –æ—Ç–∫–ª—é—á–µ–Ω');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è Redis:', error);
    }

    process.exit(0);
  });

  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
  setTimeout(() => {
    console.error('–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞');
    process.exit(1);
  }, 10000);
};

process.on('SIGTERM', () => gracefulShutdown('SIGTERM'));
process.on('SIGINT', () => gracefulShutdown('SIGINT'));

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
process.on('uncaughtException', (err: Error) => {
  console.error('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', err);
  process.exit(1);
});

process.on('unhandledRejection', (reason: unknown, _promise: Promise<unknown>) => {
  console.error('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–∏—Å–∞:', reason);
  process.exit(1);
});

export default app;
