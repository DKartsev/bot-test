import OpenAI from 'openai';
// Runtime type guards to avoid unsafe casts
function isNumberArray(value: unknown): value is number[] {
  return Array.isArray(value) && value.every((v) => typeof v === 'number');
}

function isEmbeddingItems(value: unknown): value is Array<{ embedding: number[] }> {
  return Array.isArray(value) && value.every((item) =>
    item !== null && typeof item === 'object' && isNumberArray((item as { embedding?: unknown }).embedding),
  );
}
import { logger } from '../../../utils/logger.js';
import { env } from '../../../config/env.js';
import type { Embedder } from './vector-store.js';

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–æ–¥–µ–ª—å –∏ —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å –≤–µ–∫—Ç–æ—Ä–∞ –¥–ª—è OpenAI
const OPENAI_EMBEDDING_MODEL = 'text-embedding-3-small';
const OPENAI_EMBEDDING_DIMENSION = 1536;

/**
 * –†–µ–∞–ª–∏–∑–∞—Ü–∏—è Embedder —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º OpenAI API.
 * –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –ø—Ä–µ–≤—Ä–∞—â–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤ —á–∏—Å–ª–æ–≤—ã–µ –≤–µ–∫—Ç–æ—Ä—ã.
 */
export class OpenAIEmbedder implements Embedder {
  private client: OpenAI;
  private dimension: number;

  constructor() {
    if (!env.OPENAI_API_KEY) {
      throw new Error(
        'OPENAI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. Embedder –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.',
      );
    }
    this.client = new OpenAI({ apiKey: env.OPENAI_API_KEY });
    this.dimension = OPENAI_EMBEDDING_DIMENSION;
    logger.info(
      { model: OPENAI_EMBEDDING_MODEL },
      'üß† –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω OpenAI Embedder.',
    );
  }

  getDimension(): number {
    return this.dimension;
  }

  /**
   * –ü—Ä–µ–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ —Ç–µ–∫—Å—Ç–æ–≤ –≤ –º–∞—Å—Å–∏–≤ –≤–µ–∫—Ç–æ—Ä–æ–≤.
   * @param texts - –ú–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫ –¥–ª—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.
   * @returns –ü—Ä–æ–º–∏—Å, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–∑—Ä–µ—à–∞–µ—Ç—Å—è –≤ –º–∞—Å—Å–∏–≤ –≤–µ–∫—Ç–æ—Ä–æ–≤.
   */
  async embed(texts: string[]): Promise<number[][]> {
    if (!texts || texts.length === 0) {
      return [];
    }

    // OpenAI API –º–æ–∂–µ—Ç –≤—ã–±—Ä–∞—Å—ã–≤–∞—Ç—å –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –Ω–∞ –≤—Ö–æ–¥ –ø–æ–¥–∞–Ω –ø—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç.
    // –ó–∞–º–µ–Ω—è–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –Ω–∞ –ø—Ä–æ–±–µ–ª, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —ç—Ç–æ–≥–æ.
    const sanitizedTexts = texts.map((t) =>
      (t || '').trim().replace(/\n/g, ' '),
    );

    try {
      const response = await this.client.embeddings.create({
        model: OPENAI_EMBEDDING_MODEL,
        input: sanitizedTexts,
      });

      // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤–µ–∫—Ç–æ—Ä—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å –∫–æ—Å–∏–Ω—É—Å–Ω—ã–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ–º
      const raw: unknown = response.data;
      if (!isEmbeddingItems(raw)) {
        throw new Error('Invalid embeddings format from OpenAI');
      }
      const items = raw as Array<{ embedding: number[] }>; // safe after guard
      const normalized: number[][] = [];
      for (const item of items) {
        normalized.push(this.normalize(item.embedding));
      }
      return normalized;
    } catch (err) {
      logger.error({ err }, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–µ–∫—Ç–æ—Ä–æ–≤ —Å –ø–æ–º–æ—â—å—é OpenAI');
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—ã–µ –≤–µ–∫—Ç–æ—Ä—ã –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å
      const emptyVectors: number[][] = [];
      for (let i = 0; i < texts.length; i++) {
        const zeroVector: number[] = Array<number>(this.dimension).fill(0);
        emptyVectors.push(zeroVector);
      }
      return emptyVectors;
    }
  }

  async embedText(text: string): Promise<number[]> {
    try {
      const response = await this.client.embeddings.create({
        model: 'text-embedding-3-small',
        input: text,
        dimensions: 1536,
      });

      const embedding = response.data[0]?.embedding;
      if (!embedding) {
        throw new Error('No embedding returned from OpenAI');
      }

      return embedding;
    } catch (error) {
      throw new Error(`Failed to embed text: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
  }

  async embedTexts(texts: string[]): Promise<number[][]> {
    try {
      const response = await this.client.embeddings.create({
        model: 'text-embedding-3-small',
        input: texts,
        dimensions: 1536,
      });

      const raw: unknown = response.data;
      if (!isEmbeddingItems(raw)) {
        throw new Error('Invalid embeddings format from OpenAI');
      }
      const items = raw as Array<{ embedding: number[] }>; // safe after guard
      const vectors: number[][] = [];
      for (const item of items) {
        vectors.push(item.embedding);
      }
      if (!vectors.length) {
        throw new Error('No embeddings returned from OpenAI');
      }

      return vectors;
    } catch (error) {
      throw new Error(`Failed to embed texts: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
  }

  /**
   * –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –≤–µ–∫—Ç–æ—Ä (–¥–µ–ª–∏—Ç –Ω–∞ –µ–≥–æ –¥–ª–∏–Ω—É).
   * –≠—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –∫–æ—Å–∏–Ω—É—Å–Ω–æ–≥–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è.
   */
  private normalize(vec: number[]): number[] {
    const norm = Math.sqrt(vec.reduce((sum, val) => sum + val * val, 0));
    // –ò–∑–±–µ–≥–∞–µ–º –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å
    if (norm === 0) return vec;
    return vec.map((v) => v / norm);
  }
}
