import { env } from '../src/config/env';

async function setupTelegramWebhook() {
  try {
    console.log('üöÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram webhook...');
    
    if (!env.TELEGRAM_BOT_TOKEN) {
      throw new Error('TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
    }

    const webhookUrl = `${env.PUBLIC_URL || `http://localhost:${env.PORT}`}/telegram/webhook`;
    
    console.log(`üì° Webhook URL: ${webhookUrl}`);
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook —á–µ—Ä–µ–∑ Telegram Bot API
    const response = await fetch(`https://api.telegram.org/bot${env.TELEGRAM_BOT_TOKEN}/setWebhook`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        url: webhookUrl,
        allowed_updates: ['message', 'edited_message', 'channel_post', 'edited_channel_post', 'callback_query']
      })
    });

    const result = await response.json();
    
    if (result.ok) {
      console.log('‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ');
      console.log(`üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: ${JSON.stringify(result.result, null, 2)}`);
    } else {
      console.error('‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook:', result.description);
    }

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º webhook
    const webhookInfoResponse = await fetch(`https://api.telegram.org/bot${env.TELEGRAM_BOT_TOKEN}/getWebhookInfo`);
    const webhookInfo = await webhookInfoResponse.json();
    
    if (webhookInfo.ok) {
      console.log('üìã –¢–µ–∫—É—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ webhook:');
      console.log(JSON.stringify(webhookInfo.result, null, 2));
    }

  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook:', error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É
setupTelegramWebhook();
