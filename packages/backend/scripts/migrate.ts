import { db } from '../src/database/connection';
import { readFileSync, readdirSync } from 'fs';
import { join } from 'path';

async function runMigrations() {
  try {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    const isConnected = await db.ping();
    if (!isConnected) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
    }
    
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    
    // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    await db.query(`
      CREATE TABLE IF NOT EXISTS migrations (
        id SERIAL PRIMARY KEY,
        name VARCHAR(255) NOT NULL UNIQUE,
        executed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `);
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –º–∏–≥—Ä–∞—Ü–∏–π
    const executedMigrations = await db.query('SELECT name FROM migrations');
    const executedNames = executedMigrations.rows.map(row => row.name);
    
    // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª—ã –º–∏–≥—Ä–∞—Ü–∏–π
    const migrationsDir = join(__dirname, '../src/database/migrations');
    const migrationFiles = readdirSync(migrationsDir)
      .filter(file => file.endsWith('.sql'))
      .sort(); // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
    
    console.log(`üìÅ –ù–∞–π–¥–µ–Ω–æ ${migrationFiles.length} —Ñ–∞–π–ª–æ–≤ –º–∏–≥—Ä–∞—Ü–∏–π`);
    
    let executedCount = 0;
    
    for (const file of migrationFiles) {
      if (executedNames.includes(file)) {
        console.log(`‚è≠Ô∏è  –ú–∏–≥—Ä–∞—Ü–∏—è ${file} —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞`);
        continue;
      }
      
      try {
        console.log(`üîÑ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏: ${file}`);
        
        const migrationPath = join(migrationsDir, file);
        const migrationSQL = readFileSync(migrationPath, 'utf-8');
        
        // –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
        await db.query(migrationSQL);
        
        // –û—Ç–º–µ—á–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é
        await db.query('INSERT INTO migrations (name) VALUES ($1)', [file]);
        
        console.log(`‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è ${file} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`);
        executedCount++;
        
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏ ${file}:`, error);
        throw error;
      }
    }
    
    if (executedCount === 0) {
      console.log('‚ú® –í—Å–µ –º–∏–≥—Ä–∞—Ü–∏–∏ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã');
    } else {
      console.log(`üéâ –í—ã–ø–æ–ª–Ω–µ–Ω–æ ${executedCount} –Ω–æ–≤—ã—Ö –º–∏–≥—Ä–∞—Ü–∏–π`);
    }
    
  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π:', error);
    process.exit(1);
  } finally {
    await db.close();
    console.log('üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ');
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏
runMigrations();
