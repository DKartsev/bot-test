import { HttpsProxyAgent } from 'https-proxy-agent';

console.log('üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ HTTP-–ø—Ä–æ–∫—Å–∏...');

const proxyUrl = 'http://aUGIll6zoH:KFu2uvbHBx@193.233.115.178:11403';
console.log('üì° –ü—Ä–æ–∫—Å–∏ URL:', proxyUrl);

try {
  const agent = new HttpsProxyAgent(proxyUrl);
  console.log('‚úÖ HttpsProxyAgent —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ');
  
  const fetchOptions = {
    method: 'GET',
    headers: {
      'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`,
    },
    agent: agent
  };
  
  console.log('üåê –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏...');
  const response = await fetch('https://api.openai.com/v1/models', fetchOptions);
  
  console.log('üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', response.status);
  console.log('üìã –ó–∞–≥–æ–ª–æ–≤–∫–∏:', Object.fromEntries(response.headers.entries()));
  
  if (response.ok) {
    const data = await response.json();
    console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ! –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–µ–π:', data.data?.length || 0);
  } else {
    const text = await response.text();
    console.log('‚ùå –û—à–∏–±–∫–∞:', text);
  }
} catch (error) {
  console.error('üí• –û—à–∏–±–∫–∞:', error.message);
  console.error('üîç –î–µ—Ç–∞–ª–∏:', error);
}
