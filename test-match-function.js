const { createClient } = require('@supabase/supabase-js');

async function testMatchFunction() {
  console.log('üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é match_kb_chunks...');
  
  const supabase = createClient(
    process.env.SUPABASE_URL,
    process.env.SUPABASE_SERVICE_ROLE_KEY
  );
  
  try {
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π embedding (–º–∞—Å—Å–∏–≤ –∏–∑ 1536 –Ω—É–ª–µ–π)
    const testEmbedding = new Array(1536).fill(0);
    
    console.log('üìä –¢–µ—Å—Ç–æ–≤—ã–π embedding —Å–æ–∑–¥–∞–Ω, —Ä–∞–∑–º–µ—Ä:', testEmbedding.length);
    
    // –ü—Ä–æ–±—É–µ–º –≤—ã–∑–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é match_kb_chunks
    const { data, error } = await supabase.rpc('match_kb_chunks', {
      query_embedding: testEmbedding,
      match_count: 5,
      match_threshold: 0.1, // –ù–∏–∑–∫–∏–π –ø–æ—Ä–æ–≥ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    });
    
    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ match_kb_chunks:', error);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
      console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏...');
      const { data: functions, error: functionsError } = await supabase
        .from('pg_proc')
        .select('proname')
        .ilike('proname', '%match%');
      
      if (functionsError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ñ—É–Ω–∫—Ü–∏–π:', functionsError);
      } else {
        console.log('üìã –§—É–Ω–∫—Ü–∏–∏ —Å "match" –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏:', functions);
      }
    } else {
      console.log('‚úÖ –§—É–Ω–∫—Ü–∏—è match_kb_chunks —Ä–∞–±–æ—Ç–∞–µ—Ç!');
      console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:', data);
    }
    
  } catch (err) {
    console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞:', err.message);
  }
}

testMatchFunction();
