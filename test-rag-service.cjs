const { SupabaseRAGService } = require('./packages/backend/dist/services/supabaseRAGService.js');

async function testRAGService() {
  console.log('üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ RAG —Å–µ—Ä–≤–∏—Å–∞...\n');

  try {
    // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
    const ragService = new SupabaseRAGService();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ —Å–µ—Ä–≤–∏—Å–∞
    console.log('üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞...');
    const healthCheck = await ragService.healthCheck();
    console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è:', JSON.stringify(healthCheck, null, 2));
    
    if (healthCheck.status === 'unhealthy') {
      console.log('‚ùå –°–µ—Ä–≤–∏—Å –Ω–µ–∑–¥–æ—Ä–æ–≤, –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ');
      return;
    }
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º RAG –ø–∞–π–ø–ª–∞–π–Ω
    console.log('\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ RAG –ø–∞–π–ø–ª–∞–π–Ω–∞...');
    const testQuery = '–∫–∞–∫ –æ—Ç–∫—Ä—ã—Ç—å —Å–¥–µ–ª–∫—É';
    
    const testResult = await ragService.testPipeline(testQuery);
    
    if (testResult.success) {
      console.log('‚úÖ RAG –ø–∞–π–ø–ª–∞–π–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç!');
      console.log('üìù –û—Ç–≤–µ—Ç:', testResult.response.answer);
      console.log('üìä –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:', (testResult.response.confidence * 100).toFixed(1) + '%');
      console.log('üîç –ù–∞–π–¥–µ–Ω–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤:', testResult.response.sources.length);
      console.log('‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:', testResult.response.totalTime + 'ms');
      
      if (testResult.response.sources.length > 0) {
        console.log('\nüìö –ò—Å—Ç–æ—á–Ω–∏–∫–∏:');
        testResult.response.sources.forEach((source, index) => {
          console.log(`${index + 1}. ${source.title} (similarity: ${source.score.toFixed(3)})`);
          console.log(`   ${source.content.substring(0, 100)}...`);
        });
      }
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ RAG –ø–∞–π–ø–ª–∞–π–Ω–∞:', testResult.error);
    }
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
    console.error('Stack trace:', error.stack);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testRAGService().catch(console.error);
