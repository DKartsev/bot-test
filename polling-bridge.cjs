const https = require('https');
const http = require('http');

const BOT_TOKEN = '8466377396:AAGOt2PImCCeFkC3vEIsM7KISv87Lpj9OhY';
const SERVER_URL = 'http://158.160.197.7:3000';

async function makeRequest(url, method = 'GET', data = null) {
  return new Promise((resolve, reject) => {
    const options = {
      method,
      headers: {
        'Content-Type': 'application/json'
      }
    };
    
    const client = url.startsWith('https:') ? https : http;
    const req = client.request(url, options, (res) => {
      let body = '';
      res.on('data', (chunk) => body += chunk);
      res.on('end', () => {
        try {
          const parsed = JSON.parse(body);
          resolve(parsed);
        } catch (e) {
          reject(new Error(`Invalid JSON: ${body}`));
        }
      });
    });
    
    req.on('error', reject);
    
    if (data) {
      req.write(JSON.stringify(data));
    }
    
    req.end();
  });
}

async function processUpdates() {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram
    const updates = await makeRequest(`https://api.telegram.org/bot${BOT_TOKEN}/getUpdates`);
    
    if (updates.result && updates.result.length > 0) {
      console.log(`üì® –ü–æ–ª—É—á–µ–Ω–æ ${updates.result.length} –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π`);
      
      for (const update of updates.result) {
        console.log(`üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ${update.update_id}:`, update.message?.text || 'callback_query');
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞ –Ω–∞—à webhook
        try {
          const response = await makeRequest(`${SERVER_URL}/telegram/webhook`, 'POST', update);
          console.log(`‚úÖ Webhook –æ—Ç–≤–µ—Ç:`, response);
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ webhook:`, error.message);
        }
      }
      
      // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π update_id –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
      const lastUpdateId = updates.result[updates.result.length - 1].update_id;
      console.log(`üìù –ü–æ—Å–ª–µ–¥–Ω–∏–π update_id: ${lastUpdateId}`);
      
      // –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      await makeRequest(`https://api.telegram.org/bot${BOT_TOKEN}/getUpdates?offset=${lastUpdateId + 1}`);
      
    } else {
      console.log('‚è≥ –ù–µ—Ç –Ω–æ–≤—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π:', error.message);
  }
}

async function startPolling() {
  console.log('ü§ñ –ó–∞–ø—É—Å–∫ polling bridge...');
  console.log(`üì° –ë–æ—Ç: @RapiraProdTestBot`);
  console.log(`üåê –°–µ—Ä–≤–µ—Ä: ${SERVER_URL}`);
  console.log('‚è∞ Polling –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥...\n');
  
  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  await processUpdates();
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π polling
  setInterval(processUpdates, 5000);
}

// –ó–∞–ø—É—Å–∫–∞–µ–º polling
startPolling();
