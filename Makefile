# Makefile –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞–º–∏
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: make <–∫–æ–º–∞–Ω–¥–∞>

.PHONY: help build up down restart logs status clean prod-up prod-down

# ========================================
# RAG Pipeline Management
# ========================================

# RAG Pipeline commands
rag-install-deps:
	@echo "üì¶ Installing RAG pipeline dependencies..."
	cd packages/backend && npm install openai@^4.20.1

rag-build:
	@echo "üî® Building RAG pipeline..."
	cd packages/backend && npm run build

rag-start:
	@echo "üöÄ Starting RAG pipeline backend..."
	cd packages/backend && npm run dev

rag-test:
	@echo "üß™ Testing RAG pipeline..."
	cd tools && python test_rag.py

rag-test-single:
	@echo "üß™ Testing single RAG component..."
	cd tools && python test_rag.py --single-test $(TEST)

rag-demo:
	@echo "üé≠ Running RAG pipeline demo..."
	cd tools && python bot_search.py

rag-health:
	@echo "üè• Checking RAG service health..."
	curl -s http://localhost:3000/api/rag/health | jq '.'

rag-stats:
	@echo "üìä Getting RAG pipeline stats..."
	curl -s http://localhost:3000/api/rag/stats | jq '.'

rag-model-info:
	@echo "ü§ñ Getting model information..."
	curl -s http://localhost:3000/api/rag/model-info | jq '.'

rag-test-query:
	@echo "üîç Testing RAG query..."
	curl -X POST http://localhost:3000/api/rag/test \
		-H "Content-Type: application/json" \
		-d '{"testQuery": "–ö–∞–∫ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å —á–µ—Ä–µ–∑ QR-–∫–æ–¥?"}' | jq '.'

# ========================================
# –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
# ========================================

help: ## –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
	@echo "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "\033[36m%-20s\033[0m %s\n", $$1, $$2}'

build: ## –°–æ–±—Ä–∞—Ç—å –≤—Å–µ –æ–±—Ä–∞–∑—ã
	docker-compose -f docker-compose.yml -f docker-compose.override.yml --profile dev build

up: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
	docker-compose -f docker-compose.yml -f docker-compose.override.yml --profile dev up -d

down: ## –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã
	docker-compose -f docker-compose.yml -f docker-compose.override.yml --profile dev down

restart: ## –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã
	docker-compose -f docker-compose.yml -f docker-compose.override.yml --profile dev restart

logs: ## –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
	docker-compose -f docker-compose.yml -f docker-compose.override.yml --profile dev logs -f

status: ## –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
	docker-compose -f docker-compose.yml -f docker-compose.override.yml --profile dev ps

clean: ## –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã, –æ–±—Ä–∞–∑—ã –∏ volumes
	docker-compose -f docker-compose.yml -f docker-compose.override.yml --profile dev down -v
	docker system prune -f
	docker volume prune -f

# Production –∫–æ–º–∞–Ω–¥—ã
prod-build: ## –°–æ–±—Ä–∞—Ç—å production –æ–±—Ä–∞–∑—ã
	docker-compose -f docker-compose.prod.yml build

prod-up: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å production —Å–µ—Ä–≤–∏—Å—ã
	docker-compose -f docker-compose.prod.yml up -d

prod-down: ## –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å production —Å–µ—Ä–≤–∏—Å—ã
	docker-compose -f docker-compose.prod.yml down

prod-logs: ## –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ production —Å–µ—Ä–≤–∏—Å–æ–≤
	docker-compose -f docker-compose.prod.yml logs -f

prod-status: ## –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å production —Å–µ—Ä–≤–∏—Å–æ–≤
	docker-compose -f docker-compose.prod.yml ps

# –û—Ç–¥–µ–ª—å–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
backend-logs: ## –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ backend
	docker-compose -f docker-compose.yml -f docker-compose.override.yml --profile dev logs -f bot-backend

admin-logs: ## –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ admin –ø–∞–Ω–µ–ª–∏
	docker-compose -f docker-compose.yml -f docker-compose.override.yml --profile dev logs -f bot-admin

worker-logs: ## –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ worker
	docker-compose -f docker-compose.yml -f docker-compose.override.yml --profile dev logs -f worker

postgres-logs: ## –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ PostgreSQL
	docker-compose -f docker-compose.yml -f docker-compose.override.yml --profile dev logs -f postgres

redis-logs: ## –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ Redis
	docker-compose -f docker-compose.yml -f docker-compose.override.yml --profile dev logs -f redis

# –£—Ç–∏–ª–∏—Ç—ã
shell-backend: ## –í–æ–π—Ç–∏ –≤ shell backend –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
	docker-compose -f docker-compose.yml -f docker-compose.override.yml --profile dev exec bot-backend sh

shell-admin: ## –í–æ–π—Ç–∏ –≤ shell admin –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
	docker-compose -f docker-compose.yml -f docker-compose.override.yml --profile dev exec bot-admin sh

shell-worker: ## –í–æ–π—Ç–∏ –≤ shell worker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
	docker-compose -f docker-compose.yml -f docker-compose.override.yml --profile dev exec worker sh

shell-postgres: ## –í–æ–π—Ç–∏ –≤ shell PostgreSQL –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
	docker-compose -f docker-compose.yml -f docker-compose.override.yml --profile dev exec postgres psql -U bot_user -d bot_support

# –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
monitor: ## –ü–æ–∫–∞–∑–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
	docker stats --no-stream

health: ## –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
	docker-compose -f docker-compose.yml -f docker-compose.override.yml --profile dev ps --format "table {{.Name}}\t{{.Status}}\t{{.Ports}}"

# –ë—ç–∫–∞–ø—ã
backup-db: ## –°–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
	docker-compose -f docker-compose.yml -f docker-compose.override.yml --profile dev exec postgres pg_dump -U bot_user bot_support > backup_$(shell date +%Y%m%d_%H%M%S).sql

restore-db: ## –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±—ç–∫–∞–ø–∞ (—É–∫–∞–∑–∞—Ç—å —Ñ–∞–π–ª: make restore-db FILE=backup.sql)
	docker-compose -f docker-compose.yml -f docker-compose.override.yml --profile dev exec -T postgres psql -U bot_user -d bot_support < $(FILE)

# –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ
deploy: prod-build prod-up ## –†–∞–∑–≤–µ—Ä–Ω—É—Ç—å production –≤–µ—Ä—Å–∏—é
	@echo "Production —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"

rollback: prod-down ## –û—Ç–∫–∞—Ç–∏—Ç—å production –≤–µ—Ä—Å–∏—é
	@echo "Production –≤–µ—Ä—Å–∏—è –æ—Ç–∫–∞—á–µ–Ω–∞!"
