const { HttpsProxyAgent } = require('https-proxy-agent');

console.log('üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ HTTP-–ø—Ä–æ–∫—Å–∏ –∏–∑ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞...');

const proxyUrl = 'http://aUGIll6zoH:KFu2uvbHBx@193.233.115.178:11403';
console.log('Proxy URL:', proxyUrl);

try {
  const agent = new HttpsProxyAgent(proxyUrl);
  console.log('‚úÖ Proxy agent —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ');
  
  // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–π HTTP –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏
  const https = require('https');
  const options = {
    hostname: 'api.openai.com',
    port: 443,
    path: '/v1/models',
    method: 'GET',
    agent: agent,
    headers: {
      'Authorization': 'Bearer ' + process.env.OPENAI_API_KEY
    }
  };
  
  console.log('üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ OpenAI API —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏...');
  
  const req = https.request(options, (res) => {
    console.log('üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', res.statusCode);
    console.log('üìã –ó–∞–≥–æ–ª–æ–≤–∫–∏:', res.headers);
    
    let data = '';
    res.on('data', (chunk) => {
      data += chunk;
    });
    
    res.on('end', () => {
      console.log('üìÑ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω, –¥–ª–∏–Ω–∞:', data.length);
      if (res.statusCode === 200) {
        console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ! OpenAI API –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏');
        const models = JSON.parse(data);
        console.log('üìã –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–µ–π:', models.data?.length || 0);
      } else {
        console.log('‚ùå –û—à–∏–±–∫–∞:', data);
      }
    });
  });
  
  req.on('error', (error) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', error.message);
  });
  
  req.setTimeout(10000, () => {
    console.error('‚ùå –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞');
    req.destroy();
  });
  
  req.end();
  
} catch (error) {
  console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è proxy agent:', error.message);
}
